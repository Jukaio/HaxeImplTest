/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  Material output expression for writing advanced volumetric material properties.
**/
@:glueCppIncludes("Materials/MaterialExpressionVolumetricAdvancedMaterialOutput.h")
@:uextern @:uclass extern class UMaterialExpressionVolumetricAdvancedMaterialOutput extends unreal.UMaterialExpressionCustomOutput {
  
  /**
    Disable this to use the cloud shadow map instead of secondary raymarching. This is usually enough for clouds viewed from the ground and it result in a performance boost. Shadow now have infinite length but also becomes less accurate and gray scale.
  **/
  @:uproperty public var bRayMarchVolumeShadow : Bool;
  
  /**
    Set this for the material to only be considered grey scale, only using the R chanel of the input parameters internally. The lighting will still be colored. This is an optimisation.
  **/
  @:uproperty public var bGrayScaleMaterial : Bool;
  
  /**
    Sample the shadowed lighting contribution from the ground onto the medium (single scattering). This adds some costs to the tracing when enabled.
  **/
  @:uproperty public var bGroundContribution : Bool;
  
  /**
    Only used if MultiScatteringEccentricity is not hooked up. Multi-scattering approximation: represents how much the phase will become isotropic for each successive octave. Valid range is [0,1], from anisotropic to isotropic phase.
  **/
  @:uproperty public var ConstMultiScatteringEccentricity : unreal.Float32;
  
  /**
    Only used if MultiScatteringOcclusion is not hooked up. Multi-scattering approximation: represents how much occlusion will be reduced for each successive octave. Valid range is [0,1], from low to high occlusion.
  **/
  @:uproperty public var ConstMultiScatteringOcclusion : unreal.Float32;
  
  /**
    Only used if MultiScatteringContribution is not hooked up. Multi-scattering approximation: represents how much contribution each successive octave will add. Valid range is [0,1], from low to high contribution
  **/
  @:uproperty public var ConstMultiScatteringContribution : unreal.Float32;
  
  /**
    How many octave to use for the multiple-scattering approximation. This makes the shader more expensive so try to only a single octave. 0 means single scattering only.
  **/
  @:uproperty public var MultiScatteringApproximationOctaveCount : unreal.FakeUInt32;
  
  /**
    Set this to true to force the phase function to be evaluated per sample, instead once per pixel (globally). Per sample evaluation is slower.
  **/
  @:uproperty public var PerSamplePhaseEvaluation : Bool;
  
  /**
    Only used if PhaseBlend is not hooked up. Lerp factor when blending the two phase functions parameterized by G and G2. Valid range is [0,1].
  **/
  @:uproperty public var ConstPhaseBlend : unreal.Float32;
  
  /**
    Only used if PhaseG2 is not hooked up. Parameter 'g' input to the second phase function  describing how much forward(g<0) or backward (g>0) light scatter around. Valid range is [-1,1].
  **/
  @:uproperty public var ConstPhaseG2 : unreal.Float32;
  
  /**
    Only used if PhaseG is not hooked up. Parameter 'g' input to the phase function  describing how much forward(g<0) or backward (g>0) light scatter around.
  **/
  @:uproperty public var ConstPhaseG : unreal.Float32;
  
  /**
    This is a 3-components float vector. The X component must represent the participating medium conservative density. This is used to accelerate the ray marching by early skipping expensive material evaluation. For example, a simple top down 2D density texture would be enough to help by not evaluating the material in empty regions. The Y and Z components can contain parameters that can be recovered during the material evaluation using the VolumetricAdvancedMaterialInput node. Evaluated per sample.
  **/
  @:uproperty public var ConservativeDensity : unreal.FExpressionInput;
  
  /**
    Multi-scattering approximation: represents how much the phase will become isotropic for each successive octave. Evaluated per pixel. Valid range is [0,1], from anisotropic to isotropic phase. Defaults to ConstMultiScatteringEccentricity from properties panel if not specified. Evaluated per pixel (globally).
  **/
  @:uproperty public var MultiScatteringEccentricity : unreal.FExpressionInput;
  
  /**
    Multi-scattering approximation: represents how much occlusion will be reduced for each successive octave. Evaluated per pixel. Valid range is [0,1], from low to high occlusion. Defaults to ConstMultiScatteringOcclusion from properties panel if not specified. Evaluated per pixel (globally).
  **/
  @:uproperty public var MultiScatteringOcclusion : unreal.FExpressionInput;
  
  /**
    Multi-scattering approximation: represents how much contribution each successive octave will add. Evaluated per pixel. Valid range is [0,1], from low to high contribution. Defaults to ConstMultiScatteringContribution from properties panel if not specified. Evaluated per pixel (globally).
  **/
  @:uproperty public var MultiScatteringContribution : unreal.FExpressionInput;
  
  /**
    Lerp factor when blending the two phase functions parameterized by G and G2. Valid range is [0,1] Defaults to ConstPhaseBlend from properties panel if not specified. Evaluated per sample if EvaluatePhaseOncePerSample is true.
  **/
  @:uproperty public var PhaseBlend : unreal.FExpressionInput;
  
  /**
    Parameter 'g' input to the second phase function  describing how much forward(g<0) or backward (g>0) light scatter around. Valid range is [-1,1]. Defaults to ConstPhaseG2 from properties panel if not specified. Evaluated per sample if EvaluatePhaseOncePerSample is true.
  **/
  @:uproperty public var PhaseG2 : unreal.FExpressionInput;
  
  /**
    Parameter 'g' input to the phase function  describing how much forward(g<0) or backward (g>0) light scatter around. Valid range is [-1,1]. Defaults to ConstPhaseG from properties panel if not specified. Evaluated per sample if EvaluatePhaseOncePerSample is true.
  **/
  @:uproperty public var PhaseG : unreal.FExpressionInput;
  
}
