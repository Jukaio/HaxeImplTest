/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.interactivetoolsframework;

/**
  UPlanePositionGizmo implements a gizmo interaction where 2D parameter value is manipulated
  by dragging a point on a 3D plane in space. The 3D position is converted to 2D coordinates
  based on the tangent axes of the plane.
  
  As with other base gizmos, this class only implements the interaction. The visual aspect of the
  gizmo, the plane, and the parameter storage are all provided externally.
  
  The plane is provided by an IGizmoAxisSource. The origin and normal define the plane and then
  the tangent axes of the source define the coordinate space.
  
  The interaction target (ie the thing you have to click on to start the dragging interaction) is provided by an IGizmoClickTarget.
  
  The new 2D parameter value is sent to an IGizmoVec2ParameterSource
  
  Internally a UClickDragInputBehavior is used to handle mouse input, configured in ::Setup()
**/
@:umodule("InteractiveToolsFramework")
@:glueCppIncludes("BaseGizmos/PlanePositionGizmo.h")
@:uextern @:uclass extern class UPlanePositionGizmo extends unreal.interactivetoolsframework.UInteractiveGizmo {
  @:uproperty public var ParameterSigns : unreal.FVector2D;
  @:uproperty public var InteractionCurParameter : unreal.FVector2D;
  @:uproperty public var InteractionStartParameter : unreal.FVector2D;
  @:uproperty public var InteractionCurPoint : unreal.FVector;
  @:uproperty public var InteractionStartPoint : unreal.FVector;
  @:uproperty public var InteractionAxisY : unreal.FVector;
  @:uproperty public var InteractionAxisX : unreal.FVector;
  @:uproperty public var InteractionNormal : unreal.FVector;
  
  /**
    The values below are used in the context of a single click-drag interaction, ie if bInInteraction = true
    They otherwise should be considered uninitialized
  **/
  @:uproperty public var InteractionOrigin : unreal.FVector;
  
  /**
    If true, we are in an active click+drag interaction, otherwise we are not
  **/
  @:uproperty public var bInInteraction : Bool;
  
  /**
    If enabled, flip sign of parameter delta on Y axis
  **/
  @:uproperty public var bFlipY : Bool;
  
  /**
    If enabled, flip sign of parameter delta on X axis
  **/
  @:uproperty public var bFlipX : Bool;
  
  /**
    If enabled, then the sign on the parameter delta is always "increasing" when moving away from the origin point, rather than just being a projection onto the axis
  **/
  @:uproperty public var bEnableSignedAxis : Bool;
  
}
