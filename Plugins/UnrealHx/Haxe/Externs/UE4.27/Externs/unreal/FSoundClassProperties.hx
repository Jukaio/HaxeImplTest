/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Classes/Sound/SoundClass.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FSoundClassProperties {
  
  /**
    Default output submix of referencing sounds. If unset, falls back to the 'Master Submix' as set in the 'Audio' category of Project Settings.
    (Unavailable if legacy 'Output to Master EQ Submix' is set)
  **/
  @:uproperty public var DefaultSubmix : unreal.USoundSubmix;
  
  /**
    Specifies how and when compressed audio data is loaded for asset if stream caching is enabled.
  **/
  @:uproperty public var LoadingBehavior : unreal.ESoundWaveLoadingBehavior;
  
  /**
    Which output target the sound should be played through
  **/
  @:uproperty public var OutputTarget : unreal.EAudioOutputTarget;
  
  /**
    Default modulation settings for sounds directly referencing this class
  **/
  @:uproperty public var ModulationSettings : unreal.FSoundModulationDefaultSettings;
  
  /**
    Send amount to master reverb effect for referencing unattenuated (2D) sounds.
  **/
  @:uproperty public var Default2DReverbSendAmount : unreal.Float32;
  
  /**
    Whether or not sounds referencing this class send to the reverb submix
  **/
  @:uproperty public var bReverb : Bool;
  
  /**
    Whether the Interior/Exterior volume and LPF modifiers should be applied
  **/
  @:uproperty public var bApplyAmbientVolumes : Bool;
  
  /**
    Whether or not this sound class forces sounds to the center channel
  **/
  @:uproperty public var bCenterChannelOnly : Bool;
  
  /**
    Whether or not this is music (propagates to child classes only if parent is true)
  **/
  @:uproperty public var bIsMusic : Bool;
  
  /**
    Whether or not this sound plays when the game is paused in the UI
  **/
  @:uproperty public var bIsUISound : Bool;
  
  /**
    Whether to inflate referencing sound's priority to always play.
  **/
  @:uproperty public var bAlwaysPlay : Bool;
  
  /**
    Whether to use 'Master EQ Submix' as set in the 'Audio' category of Project Settings as the default submix for referencing sounds.
  **/
  @:uproperty public var bApplyEffects : Bool;
  
  /**
    Volume at which the radio filter kicks in
  **/
  @:uproperty public var RadioFilterVolumeThreshold : unreal.Float32;
  
  /**
    Volume of the radio filter effect.
  **/
  @:uproperty public var RadioFilterVolume : unreal.Float32;
  
  /**
    The amount to send to center channel (does not propagate to child classes)
  **/
  @:uproperty public var VoiceCenterChannelVolume : unreal.Float32;
  
  /**
    The amount of a sound to bleed to the LFE channel
  **/
  @:uproperty public var LFEBleed : unreal.Float32;
  
  /**
    Distance scale to apply to sounds that play with this sound class.
    Sounds will have their attenuation distance scaled by this amount.
    Allows adjusting attenuation settings dynamically.
  **/
  @:uproperty public var AttenuationDistanceScale : unreal.Float32;
  
  /**
    Lowpass filter cutoff frequency
  **/
  @:uproperty public var LowPassFilterFrequency : unreal.Float32;
  
  /**
    Pitch multiplier.
  **/
  @:uproperty public var Pitch : unreal.Float32;
  
  /**
    Volume multiplier.
  **/
  @:uproperty public var Volume : unreal.Float32;
  
}
