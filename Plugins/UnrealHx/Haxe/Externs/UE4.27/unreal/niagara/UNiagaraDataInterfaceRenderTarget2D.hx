/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

@:umodule("Niagara")
@:glueCppIncludes("NiagaraDataInterfaceRenderTarget2D.h")
@:uextern @:uclass extern class UNiagaraDataInterfaceRenderTarget2D extends unreal.niagara.UNiagaraDataInterfaceRWBase {
  @:uproperty private var ManagedRenderTargets : unreal.TMap<unreal.FakeUInt64, unreal.UTextureRenderTarget2D>;
  
  /**
    When valid the user parameter is used as the render target rather than creating one internal, note that the input render target will be adjusted by the Niagara simulation
  **/
  @:uproperty public var RenderTargetUserParameter : unreal.niagara.FNiagaraUserParameterBinding;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var bPreviewRenderTarget : Bool;
  #end // WITH_EDITORONLY_DATA
  @:uproperty public var bOverrideFormat : Bool;
  
  /**
    When enabled texture parameters (size / etc) are taken from the user provided render target.
    If no valid user parameter is set the system will be invalid.
    Note: The resource will be recreated if UAV access is not available, which will reset the contents.
  **/
  @:uproperty public var bInheritUserParameterSettings : Bool;
  
  /**
    When enabled overrides the format of the render target, otherwise uses the project default setting.
  **/
  @:uproperty public var OverrideRenderTargetFormat : unreal.ETextureRenderTargetFormat;
  
  /**
    Controls if and when we generate mips for the render target.
  **/
  @:uproperty public var MipMapGeneration : unreal.niagara.ENiagaraMipMapGeneration;
  @:uproperty public var Size : unreal.FIntPoint;
  
}
