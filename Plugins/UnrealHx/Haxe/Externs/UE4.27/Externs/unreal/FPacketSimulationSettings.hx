/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Holds the packet simulation settings in one place
**/
@:glueCppIncludes("Classes/Engine/NetDriver.h")
@:uextern @:ustruct extern class FPacketSimulationSettings {
  
  /**
    Causes sent packets to have a variable latency that fluctuates from [PktLagMin] to [PktLagMin+PktJitter]
    Note that this will cause packet loss on the receiving end.
  **/
  @:uproperty public var PktJitter : unreal.Int32;
  
  /**
    The ratio of incoming packets that will be dropped
    to simulate packet loss
  **/
  @:uproperty public var PktIncomingLoss : unreal.Int32;
  
  /**
    The maximum delay in milliseconds to add to incoming
    packets before they are processed.
  **/
  @:uproperty public var PktIncomingLagMax : unreal.Int32;
  
  /**
    Set a value to add a minimum delay in milliseconds to incoming
    packets before they are processed.
  **/
  @:uproperty public var PktIncomingLagMin : unreal.Int32;
  @:uproperty public var PktLagMax : unreal.Int32;
  
  /**
    If set lag values will randomly fluctuate between Min and Max.
    Ignored if PktLag value is set
  **/
  @:uproperty public var PktLagMin : unreal.Int32;
  
  /**
    When set, will cause PktLag to use variable lag instead of constant.
    Value is treated as millisecond lag range (e.g. -GivenVariance <= 0 <= GivenVariance).
    
    Can only be used when PktLag is enabled.
  **/
  @:uproperty public var PktLagVariance : unreal.Int32;
  
  /**
    When set, will cause calls to FlushNet to delay packets.
    Value is treated as millisecond lag.
    
    Cannot be used with PktOrder.
  **/
  @:uproperty public var PktLag : unreal.Int32;
  
  /**
    When set, will cause calls to FlushNet to duplicate packets.
    Value is treated as % of packets duplicated (i.e. 0 = None, 100 = All).
    No general pattern / ordering is guaranteed.
    Clamped between 0 and 100.
    
    Cannot be used with PktOrder or PktLag.
  **/
  @:uproperty public var PktDup : unreal.Int32;
  
  /**
    When set, will cause calls to FlushNet to change ordering of packets at random.
    Value is treated as a bool (i.e. 0 = False, anything else = True).
    This works by randomly selecting packets to be delayed until a subsequent call to FlushNet.
    
    Takes precedence over PktDup and PktLag.
  **/
  @:uproperty public var PktOrder : unreal.Int32;
  
  /**
    Sets the minimum size of packets in bytes that will be dropped
    according to the PktLoss setting. Default is 0.
    
    Works with all other settings.
  **/
  @:uproperty public var PktLossMinSize : unreal.Int32;
  
  /**
    Sets the maximum size of packets in bytes that will be dropped
    according to the PktLoss setting. Default is INT_MAX.
    
    Works with all other settings.
  **/
  @:uproperty public var PktLossMaxSize : unreal.Int32;
  
  /**
    When set, will cause calls to FlushNet to drop packets.
    Value is treated as % of packets dropped (i.e. 0 = None, 100 = All).
    No general pattern / ordering is guaranteed.
    Clamped between 0 and 100.
    
    Works with all other settings.
  **/
  @:uproperty public var PktLoss : unreal.Int32;
  
}
