/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  Object allowing for retrieving Chaos Destruction data.
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("ChaosBlueprint.h")
@:uextern @:uclass extern class UChaosDestructionListener extends unreal.USceneComponent {
  
  /**
    Called when new trailing events are available.
  **/
  @:uproperty public var OnTrailingEvents : unreal.geometrycollectionengine.FOnChaosTrailingEvents;
  
  /**
    Called when new breaking events are available.
  **/
  @:uproperty public var OnBreakingEvents : unreal.geometrycollectionengine.FOnChaosBreakingEvents;
  
  /**
    Called when new collision events are available.
  **/
  @:uproperty public var OnCollisionEvents : unreal.geometrycollectionengine.FOnChaosCollisionEvents;
  
  /**
    Which chaos solver actors we're using. If empty, this listener will fallback to the "world" solver.
  **/
  @:uproperty public var GeometryCollectionActors : unreal.TSet<unreal.geometrycollectionengine.AGeometryCollectionActor>;
  
  /**
    Which chaos solver actors we're using. If empty, this listener will fallback to the "world" solver.
  **/
  @:uproperty public var ChaosSolverActors : unreal.TSet<unreal.chaossolverengine.AChaosSolverActor>;
  
  /**
    The settings to use for trailing event listening
  **/
  @:uproperty public var TrailingEventRequestSettings : unreal.geometrycollectionengine.FChaosTrailingEventRequestSettings;
  
  /**
    The settings to use for breaking event listening
  **/
  @:uproperty public var BreakingEventRequestSettings : unreal.geometrycollectionengine.FChaosBreakingEventRequestSettings;
  
  /**
    The settings to use for collision event listening
  **/
  @:uproperty public var CollisionEventRequestSettings : unreal.geometrycollectionengine.FChaosCollisionEventRequestSettings;
  
  /**
    Whether or not trailing event listening is enabled
  **/
  @:uproperty public var bIsTrailingEventListeningEnabled : Bool;
  
  /**
    Whether or not collision event listening is enabled
  **/
  @:uproperty public var bIsBreakingEventListeningEnabled : Bool;
  
  /**
    Whether or not collision event listening is enabled
  **/
  @:uproperty public var bIsCollisionEventListeningEnabled : Bool;
  
  /**
    Dynamically adds a chaos solver to the listener
  **/
  @:ufunction(BlueprintCallable) @:final public function AddChaosSolverActor(ChaosSolverActor : unreal.chaossolverengine.AChaosSolverActor) : Void;
  
  /**
    Dynamically removes a chaos solver from the listener
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveChaosSolverActor(ChaosSolverActor : unreal.chaossolverengine.AChaosSolverActor) : Void;
  
  /**
    Dynamically adds a chaos solver to the listener
  **/
  @:ufunction(BlueprintCallable) @:final public function AddGeometryCollectionActor(GeometryCollectionActor : unreal.geometrycollectionengine.AGeometryCollectionActor) : Void;
  
  /**
    Dynamically removes a chaos solver from the listener
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveGeometryCollectionActor(GeometryCollectionActor : unreal.geometrycollectionengine.AGeometryCollectionActor) : Void;
  
  /**
    Sets collision event request settings dynamically
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCollisionEventRequestSettings(InSettings : unreal.Const<unreal.PRef<unreal.geometrycollectionengine.FChaosCollisionEventRequestSettings>>) : Void;
  
  /**
    Sets breaking event request settings dynamically
  **/
  @:ufunction(BlueprintCallable) @:final public function SetBreakingEventRequestSettings(InSettings : unreal.Const<unreal.PRef<unreal.geometrycollectionengine.FChaosBreakingEventRequestSettings>>) : Void;
  
  /**
    Sets trailing event request settings dynamically
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTrailingEventRequestSettings(InSettings : unreal.Const<unreal.PRef<unreal.geometrycollectionengine.FChaosTrailingEventRequestSettings>>) : Void;
  
  /**
    Enables or disables collision event listening
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCollisionEventEnabled(bIsEnabled : Bool) : Void;
  
  /**
    Enables or disables breaking event listening
  **/
  @:ufunction(BlueprintCallable) @:final public function SetBreakingEventEnabled(bIsEnabled : Bool) : Void;
  
  /**
    Enables or disables breaking event listening
  **/
  @:ufunction(BlueprintCallable) @:final public function SetTrailingEventEnabled(bIsEnabled : Bool) : Void;
  
  /**
    Returns if the destruction listener is listening to any events
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsEventListening() : Bool;
  
  /**
    Sorts collision events according to the given sort method
  **/
  @:ufunction(BlueprintCallable) @:final public function SortCollisionEvents(CollisionEvents : unreal.PRef<unreal.TArray<unreal.geometrycollectionengine.FChaosCollisionEventData>>, SortMethod : unreal.geometrycollectionengine.EChaosCollisionSortMethod) : Void;
  
  /**
    Sorts breaking events according to the given sort method
  **/
  @:ufunction(BlueprintCallable) @:final public function SortBreakingEvents(BreakingEvents : unreal.PRef<unreal.TArray<unreal.geometrycollectionengine.FChaosBreakingEventData>>, SortMethod : unreal.geometrycollectionengine.EChaosBreakingSortMethod) : Void;
  
  /**
    Sorts trailing events according to the given sort method
  **/
  @:ufunction(BlueprintCallable) @:final public function SortTrailingEvents(TrailingEvents : unreal.PRef<unreal.TArray<unreal.geometrycollectionengine.FChaosTrailingEventData>>, SortMethod : unreal.geometrycollectionengine.EChaosTrailingSortMethod) : Void;
  
}
