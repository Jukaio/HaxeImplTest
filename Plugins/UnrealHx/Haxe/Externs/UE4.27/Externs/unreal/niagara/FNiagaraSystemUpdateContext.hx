/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  Helper for reseting/reinitializing Niagara systems currently active when they are being edited.
  Can be used inside a scope with Systems being reinitialized on destruction or you can store the context and use CommitUpdate() to trigger reinitialization.
  For example, this can be split between PreEditChange and PostEditChange to ensure problematic data is not modified during execution of a system.
  This can be made a UPROPERTY() to ensure safey in cases where a GC could be possible between Add() and CommitUpdate().
**/
@:umodule("Niagara")
@:glueCppIncludes("Public/NiagaraCommon.h")
@:uextern @:ustruct extern class FNiagaraSystemUpdateContext {
  
}
