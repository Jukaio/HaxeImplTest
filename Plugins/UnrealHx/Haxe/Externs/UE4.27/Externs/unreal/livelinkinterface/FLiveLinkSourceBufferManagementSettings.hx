/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.livelinkinterface;

@:umodule("LiveLinkInterface")
@:glueCppIncludes("Public/LiveLinkSourceSettings.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FLiveLinkSourceBufferManagementSettings {
  
  /**
    When cleaning the buffer keep at least one frame, even if the frame doesn't matches the other options.
  **/
  @:uproperty public var bKeepAtLeastOneFrame : Bool;
  
  /**
    Maximum number of frame to keep in memory.
  **/
  @:uproperty public var MaxNumberOfFrameToBuffered : unreal.Int32;
  
  /**
    When evaluating with latest: how far back from latest frame should we read the buffer
  **/
  @:uproperty public var LatestOffset : unreal.Int32;
  
  /**
    Continuously updated clock offset estimator between source timecode clock and engine timecode provider clock (in seconds)
  **/
  @:uproperty public var TimecodeClockOffset : unreal.Float64;
  
  /**
    When evaluating with timecode: how far back from current timecode should we read the buffer (in TimecodeFrameRate).
  **/
  @:uproperty public var TimecodeFrameOffset : unreal.Float32;
  
  /**
    If the frame timecode is older than ValidTimecodeFrame, remove it from the buffer list (in TimecodeFrameRate).
  **/
  @:uproperty public var ValidTimecodeFrame : unreal.Int32;
  
  /**
    If the frame timecode is older than ValidTimecodeFrame, remove it from the buffer list (in TimecodeFrameRate).
  **/
  @:uproperty public var bValidTimecodeFrameEnabled : Bool;
  
  /**
    What is the source frame rate.
    When the refresh rate of the source is bigger than the timecode frame rate, LiveLink will try to generate sub frame numbers.
    @note The source should generate the sub frame numbers. Use this setting when the source is not able to do so.
    @note The generated sub frame numbers will not be saved by Sequencer.
  **/
  @:uproperty public var SourceTimecodeFrameRate : unreal.FFrameRate;
  
  /**
    When evaluating with timecode, align source timecode using a continuous clock offset to do a smooth latest
    This means that even if engine Timecode and source Timecode are not aligned, the offset between both clocks
    will be tracked to keep them aligned. With an additionnal offset, 1.5 is a good number, you can evaluate
    your subject using the latest frame by keeping just enough margin to have a smooth playback and avoid starving.
  **/
  @:uproperty public var bUseTimecodeSmoothLatest : Bool;
  
  /**
    FrameRate taken from one of the subjects. It's expected that all subjects have the same FrameRate
  **/
  @:uproperty public var DetectedFrameRate : unreal.FFrameRate;
  @:uproperty public var bGenerateSubFrame : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    DEPRECATED: TimecodeFrameRate is now read from each individual subject from FQualifiedFrameTime.
    It is expected that all subjects under a source have the same and it will be readable in DetectedFrameRate variable
  **/
  @:deprecated @:uproperty public var TimecodeFrameRate_DEPRECATED : unreal.FFrameRate;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Continuously updated clock offset estimator between source clock and engine clock (in seconds)
  **/
  @:uproperty public var EngineTimeClockOffset : unreal.Float64;
  
  /**
    When evaluating with time: how far back from current time should we read the buffer (in seconds)
  **/
  @:uproperty public var EngineTimeOffset : unreal.Float32;
  
  /**
    If the frame is older than ValidTime, remove it from the buffer list (in seconds).
  **/
  @:uproperty public var ValidEngineTime : unreal.Float32;
  
  /**
    Enabled the ValidEngineTime setting.
  **/
  @:uproperty public var bValidEngineTimeEnabled : Bool;
  
}
