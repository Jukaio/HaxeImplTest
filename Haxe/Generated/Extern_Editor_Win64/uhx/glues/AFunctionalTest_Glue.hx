// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/functionaltesting/afunctionaltest.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class AFunctionalTest_Glue {
public static function get_TotalTime(self:unreal.UIntPtr):cpp.Float32;
public static function set_TotalTime(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_bIsRunning(self:unreal.UIntPtr):Bool;
public static function set_bIsRunning(self:unreal.UIntPtr, value:Bool):Void;
public static function get_TestName(self:unreal.UIntPtr):unreal.UIntPtr;
public static function set_TestName(self:unreal.UIntPtr, value:unreal.UIntPtr):Void;
public static function get_RenderComp(self:unreal.UIntPtr):unreal.UIntPtr;
public static function set_RenderComp(self:unreal.UIntPtr, value:unreal.UIntPtr):Void;
public static function get_AutoDestroyActors(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_AutoDestroyActors(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_OnTestFinished(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_OnTestFinished(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_OnTestStart(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_OnTestStart(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_OnTestPrepare(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_OnTestPrepare(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_TimesUpResult(self:unreal.UIntPtr):Int;
public static function set_TimesUpResult(self:unreal.UIntPtr, value:Int):Void;
public static function get_TimesUpMessage(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_TimesUpMessage(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_TimeLimit(self:unreal.UIntPtr):cpp.Float32;
public static function set_TimeLimit(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_PreparationTimeLimit(self:unreal.UIntPtr):cpp.Float32;
public static function set_PreparationTimeLimit(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_Result(self:unreal.UIntPtr):Int;
public static function set_Result(self:unreal.UIntPtr, value:Int):Void;
public static function get_RandomNumbersStream(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_RandomNumbersStream(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_ObservationPoint(self:unreal.UIntPtr):unreal.UIntPtr;
public static function set_ObservationPoint(self:unreal.UIntPtr, value:unreal.UIntPtr):Void;
public static function get_Description(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_Description(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_Author(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_Author(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_LogWarningHandling(self:unreal.UIntPtr):Int;
public static function set_LogWarningHandling(self:unreal.UIntPtr, value:Int):Void;
public static function get_LogErrorHandling(self:unreal.UIntPtr):Int;
public static function set_LogErrorHandling(self:unreal.UIntPtr, value:Int):Void;
public static function AssertTrue(self:unreal.UIntPtr, Condition:Bool, Message:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertFalse(self:unreal.UIntPtr, Condition:Bool, Message:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertIsValid(self:unreal.UIntPtr, Object:unreal.UIntPtr, Message:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertValue_Int(self:unreal.UIntPtr, Actual:Int, ShouldBe:Int, Expected:Int, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertValue_Float(self:unreal.UIntPtr, Actual:cpp.Float32, ShouldBe:Int, Expected:cpp.Float32, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertValue_DateTime(self:unreal.UIntPtr, Actual:unreal.VariantPtr, ShouldBe:Int, Expected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Transform(self:unreal.UIntPtr, Actual:unreal.VariantPtr, Expected:unreal.VariantPtr, What:unreal.VariantPtr, Tolerance:cpp.Float32, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Float(self:unreal.UIntPtr, Actual:cpp.Float32, Expected:cpp.Float32, What:unreal.VariantPtr, Tolerance:cpp.Float32, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Bool(self:unreal.UIntPtr, Actual:Bool, Expected:Bool, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Int(self:unreal.UIntPtr, Actual:Int, Expected:Int, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Name(self:unreal.UIntPtr, Actual:unreal.VariantPtr, Expected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Object(self:unreal.UIntPtr, Actual:unreal.UIntPtr, Expected:unreal.UIntPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertNotEqual_Transform(self:unreal.UIntPtr, Actual:unreal.VariantPtr, NotExpected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Rotator(self:unreal.UIntPtr, Actual:unreal.VariantPtr, Expected:unreal.VariantPtr, What:unreal.VariantPtr, Tolerance:cpp.Float32, ContextObject:unreal.UIntPtr):Bool;
public static function AssertNotEqual_Rotator(self:unreal.UIntPtr, Actual:unreal.VariantPtr, NotExpected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_Vector(self:unreal.UIntPtr, Actual:unreal.VariantPtr, Expected:unreal.VariantPtr, What:unreal.VariantPtr, Tolerance:cpp.Float32, ContextObject:unreal.UIntPtr):Bool;
public static function AssertNotEqual_Vector(self:unreal.UIntPtr, Actual:unreal.VariantPtr, NotExpected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_String(self:unreal.UIntPtr, Actual:unreal.VariantPtr, Expected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertNotEqual_String(self:unreal.UIntPtr, Actual:unreal.VariantPtr, NotExpected:unreal.VariantPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AssertEqual_TraceQueryResults(self:unreal.UIntPtr, Actual:unreal.UIntPtr, Expected:unreal.UIntPtr, What:unreal.VariantPtr, ContextObject:unreal.UIntPtr):Bool;
public static function AddWarning(self:unreal.UIntPtr, Message:unreal.VariantPtr):Void;
public static function AddError(self:unreal.UIntPtr, Message:unreal.VariantPtr):Void;
public static function FinishTest(self:unreal.UIntPtr, TestResult:Int, Message:unreal.VariantPtr):Void;
public static function LogMessage(self:unreal.UIntPtr, Message:unreal.VariantPtr):Void;
public static function SetTimeLimit(self:unreal.UIntPtr, NewTimeLimit:cpp.Float32, ResultWhenTimeRunsOut:Int):Void;
public static function DebugGatherRelevantActors(self:unreal.UIntPtr):unreal.VariantPtr;
public static function OnWantsReRunCheck(self:unreal.UIntPtr):Bool;
public static function AddRerun(self:unreal.UIntPtr, Reason:unreal.VariantPtr):Void;
public static function GetCurrentRerunReason(self:unreal.UIntPtr):unreal.VariantPtr;
public static function OnAdditionalTestFinishedMessageRequest(self:unreal.UIntPtr, TestResult:Int):unreal.VariantPtr;
public static function RegisterAutoDestroyActor(self:unreal.UIntPtr, ActorToAutoDestroy:unreal.UIntPtr):Void;
public static function IsRunning(self:unreal.UIntPtr):Bool;
public static function IsEnabled(self:unreal.UIntPtr):Bool;
public static function ReceivePrepareTest(self:unreal.UIntPtr):Void;
public static function ReceiveStartTest(self:unreal.UIntPtr):Void;
public static function IsReady(self:unreal.UIntPtr):Bool;
public static function StaticClass():unreal.UIntPtr;
}