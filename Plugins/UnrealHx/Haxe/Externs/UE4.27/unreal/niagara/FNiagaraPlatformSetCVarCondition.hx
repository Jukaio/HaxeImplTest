/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  Imposes a condition that a CVar must contain a set value or range of values for a platform set to be enabled.
**/
@:umodule("Niagara")
@:glueCppIncludes("Classes/NiagaraPlatformSet.h")
@:uextern @:ustruct extern class FNiagaraPlatformSetCVarCondition {
  
  /**
    True if we should apply the maximum restriction for float CVars.
  **/
  @:uproperty public var bUseMaxFloat : Bool;
  
  /**
    True if we should apply the minimum restriction for float CVars.
  **/
  @:uproperty public var bUseMinFloat : Bool;
  
  /**
    True if we should apply the maximum restriction for int CVars.
  **/
  @:uproperty public var bUseMaxInt : Bool;
  
  /**
    True if we should apply the minimum restriction for int CVars.
  **/
  @:uproperty public var bUseMinInt : Bool;
  
  /**
    If the value of the CVar is greater than this maximum then the PlatformSet will not be enabled.
  **/
  @:uproperty public var MaxFloat : unreal.Float32;
  
  /**
    If the value of the CVar is less than this minimum then the PlatformSet will not be enabled.
  **/
  @:uproperty public var MinFloat : unreal.Float32;
  
  /**
    If the value of the CVar is greater than this maximum then the PlatformSet will not be enabled.
  **/
  @:uproperty public var MaxInt : unreal.Int32;
  
  /**
    If the value of the CVar is less than this minimum then the PlatformSet will not be enabled.
  **/
  @:uproperty public var MinInt : unreal.Int32;
  
  /**
    The value this CVar must contain for this platform set to be enabled.
  **/
  @:uproperty public var Value : Bool;
  
  /**
    The name of the CVar we're testing the value of.
  **/
  @:uproperty public var CVarName : unreal.FName;
  
}
