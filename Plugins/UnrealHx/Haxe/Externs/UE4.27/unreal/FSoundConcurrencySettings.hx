/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Classes/Sound/SoundConcurrency.h")
@:uextern @:ustruct extern class FSoundConcurrencySettings {
  
  /**
    Time taken to fade out if voice is evicted or culled due to another voice in the group starting.
  **/
  @:uproperty public var VoiceStealReleaseTime : unreal.Float32;
  
  /**
    Time taken to recover volume scalar duck.
  **/
  @:uproperty public var VolumeScaleReleaseTime : unreal.Float32;
  
  /**
    Whether or not volume scaling can recover volume ducking behavior when concurrency group sounds stop (default scale mode only).
  **/
  @:uproperty public var bVolumeScaleCanRelease : Bool;
  
  /**
    Time taken to apply duck using volume scalar.
  **/
  @:uproperty public var VolumeScaleAttackTime : unreal.Float32;
  
  /**
    Volume Scale mode designating how to scale voice volume based on number of member sounds active in group.
  **/
  @:uproperty public var VolumeScaleMode : unreal.EConcurrencyVolumeScaleMode;
  
  /**
    Amount of time to wait (in seconds) between different sounds which play with this concurrency. Sounds rejected from this will ignore virtualization settings.
  **/
  @:uproperty public var RetriggerTime : unreal.Float32;
  
  /**
    Which concurrency resolution policy to use if max voice count is reached.
  **/
  @:uproperty public var ResolutionRule : unreal.EMaxConcurrentResolutionRule;
  
  /**
    Whether or not to limit the concurrency to per sound owner (i.e. the actor that plays the sound). If the sound doesn't have an owner, it falls back to global concurrency.
  **/
  @:uproperty public var bLimitToOwner : Bool;
  
  /**
    The max number of allowable concurrent active voices for voices playing in this concurrency group.
  **/
  @:uproperty public var MaxCount : unreal.Int32;
  
}
