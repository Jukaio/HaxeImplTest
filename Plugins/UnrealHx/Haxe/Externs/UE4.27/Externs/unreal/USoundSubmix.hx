/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Sound Submix class meant for applying an effect to the downmixed sum of multiple audio sources.
**/
@:glueCppIncludes("Sound/SoundSubmix.h")
@:uextern @:uclass extern class USoundSubmix extends unreal.USoundSubmixWithParentBase {
  
  /**
    Blueprint delegate for when a recorded file is finished exporting.
  **/
  @:uproperty public var OnSubmixRecordedFileDone : unreal.FOnSubmixRecordedFileDone;
  
  /**
    Modulation to apply to the submix Dry Level (in dB)
  **/
  @:uproperty public var DryLevelModulation : unreal.FSoundModulationDestinationSettings;
  
  /**
    Modulation to apply to the submix Wet Level (in dB)
  **/
  @:uproperty public var WetLevelModulation : unreal.FSoundModulationDestinationSettings;
  
  /**
    Modulation to apply to the submix Output Volume (in dB)
  **/
  @:uproperty public var OutputVolumeModulation : unreal.FSoundModulationDestinationSettings;
  #if WITH_EDITORONLY_DATA
  
  /**
    The dry level of the submix  (in dB)s. Applied before submix effects and analysis are performed.
  **/
  @:uproperty public var DryLevelDB : unreal.Float32;
  
  /**
    The wet level of the submix  (in dB). Applied after submix effects and analysis are performed.
  **/
  @:uproperty public var WetLevelDB : unreal.Float32;
  
  /**
    The output volume of the submix (in dB).
  **/
  @:uproperty public var OutputVolumeDB : unreal.Float32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    The dry level of the submix. Applied before submix effects and analysis are performed.
  **/
  @:uproperty public var DryLevel : unreal.Float32;
  
  /**
    The wet level of the submix. Applied after submix effects and analysis are performed.
  **/
  @:uproperty public var WetLevel : unreal.Float32;
  
  /**
    The output volume of the submix. Applied after submix effects and analysis are performed.
  **/
  @:uproperty public var OutputVolume : unreal.Float32;
  
  /**
    Whether to treat submix gain levels as linear or decibel values.
  **/
  @:uproperty public var GainMode : unreal.EGainParamMode;
  
  /**
    The release time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this submix.
  **/
  @:uproperty public var EnvelopeFollowerReleaseTime : unreal.Int32;
  
  /**
    The attack time in milliseconds for the envelope follower. Delegate callbacks can be registered to get the envelope value of sounds played with this submix.
  **/
  @:uproperty public var EnvelopeFollowerAttackTime : unreal.Int32;
  
  /**
    Optional settings used by plugins which support ambisonics file playback.
  **/
  @:uproperty public var AmbisonicsPluginSettings : unreal.audioextensions.USoundfieldEncodingSettingsBase;
  @:uproperty public var SubmixEffectChain : unreal.TArray<unreal.USoundEffectSubmixPreset>;
  
  /**
    Mute this submix when the application is muted or in the background. Used to prevent submix effect tails from continuing when tabbing out of application or if application is muted.
  **/
  @:uproperty public var bMuteWhenBackgrounded : Bool;
  
  /**
    Start recording the audio from this submix.
  **/
  @:ufunction(BlueprintCallable) @:final public function StartRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExpectedDuration : unreal.Float32) : Void;
  
  /**
    Finish recording the audio from this submix and export it as a wav file or a USoundWave.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExportType : unreal.EAudioRecordingExportType, Name : unreal.FString, Path : unreal.FString, @:opt("None") ExistingSoundWaveToOverwrite : unreal.USoundWave) : Void;
  
  /**
    Start envelope following the submix output. Register with OnSubmixEnvelope to receive envelope follower data in BP.
  **/
  @:ufunction(BlueprintCallable) @:final public function StartEnvelopeFollowing(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Start envelope following the submix output. Register with OnSubmixEnvelope to receive envelope follower data in BP.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopEnvelopeFollowing(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Adds an envelope follower delegate to the submix when envelope following is enabled on this submix.
    @param  OnSubmixEnvelopeBP      Event to fire when new envelope data is available.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddEnvelopeFollowerDelegate(WorldContextObject : unreal.Const<unreal.UObject>, OnSubmixEnvelopeBP : unreal.Const<unreal.PRef<unreal.FOnSubmixEnvelopeBP>>) : Void;
  
  /**
    Adds a spectral analysis delegate to receive notifications when this submix has spectrum analysis enabled.
    @param  InBandsettings                                  The frequency bands to analyze and their envelope-following settings.
    @param  OnSubmixSpectralAnalysisBP          Event to fire when new spectral data is available.
    @param  UpdateRate                                              How often to retrieve the data from the spectral analyzer and broadcast the event. Max is 30 times per second.
    @param  InterpMethod                    Method to used for band peak calculation.
    @param  SpectrumType                    Metric to use when returning spectrum values.
    @param  DecibelNoiseFloor               Decibel Noise Floor to consider as silence silence when using a Decibel Spectrum Type.
    @param  bDoNormalize                    If true, output band values will be normalized between zero and one.
    @param  bDoAutoRange                    If true, output band values will have their ranges automatically adjusted to the minimum and maximum values in the audio. Output band values will be normalized between zero and one.
    @param  AutoRangeAttackTime             The time (in seconds) it takes for the range to expand to 90% of a larger range.
    @param  AutoRangeReleaseTime            The time (in seconds) it takes for the range to shrink to 90% of a smaller range.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddSpectralAnalysisDelegate(WorldContextObject : unreal.Const<unreal.UObject>, InBandSettings : unreal.Const<unreal.PRef<unreal.TArray<unreal.FSoundSubmixSpectralAnalysisBandSettings>>>, OnSubmixSpectralAnalysisBP : unreal.Const<unreal.PRef<unreal.FOnSubmixSpectralAnalysisBP>>, UpdateRate : unreal.Float32 = 10.000000, DecibelNoiseFloor : unreal.Float32 = -40.000000, bDoNormalize : Bool = true, bDoAutoRange : Bool = false, AutoRangeAttackTime : unreal.Float32 = 0.100000, AutoRangeReleaseTime : unreal.Float32 = 60.000000) : Void;
  
  /**
    Remove a spectral analysis delegate.
    @param  OnSubmixSpectralAnalysisBP          The event delegate to remove.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveSpectralAnalysisDelegate(WorldContextObject : unreal.Const<unreal.UObject>, OnSubmixSpectralAnalysisBP : unreal.Const<unreal.PRef<unreal.FOnSubmixSpectralAnalysisBP>>) : Void;
  
  /**
    Start spectrum analysis of the audio output.
  **/
  @:ufunction(BlueprintCallable) @:final public function StartSpectralAnalysis(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("DefaultSize") FFTSize : unreal.EFFTSize, @:opt("Linear") InterpolationMethod : unreal.EFFTPeakInterpolationMethod, @:opt("Hann") WindowType : unreal.EFFTWindowType, HopSize : unreal.Float32 = 0.000000, @:opt("MagnitudeSpectrum") SpectrumType : unreal.EAudioSpectrumType) : Void;
  
  /**
    Start spectrum analysis of the audio output.
  **/
  @:ufunction(BlueprintCallable) @:final public function StopSpectralAnalysis(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Sets the output volume of the submix. This dynamic volume acts as a multiplier on the OutputVolume property of this submix.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSubmixOutputVolume(WorldContextObject : unreal.Const<unreal.UObject>, InOutputVolume : unreal.Float32) : Void;
  
}
