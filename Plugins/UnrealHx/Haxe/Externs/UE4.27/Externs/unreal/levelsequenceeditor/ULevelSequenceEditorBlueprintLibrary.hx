/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.levelsequenceeditor;

@:umodule("LevelSequenceEditor")
@:glueCppIncludes("LevelSequenceEditorBlueprintLibrary.h")
@:uextern @:uclass extern class ULevelSequenceEditorBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    * Open a level sequence asset
  **/
  @:ufunction(BlueprintCallable) static public function OpenLevelSequence(LevelSequence : unreal.levelsequence.ULevelSequence) : Bool;
  
  /**
    * Get the currently opened root/master level sequence asset
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentLevelSequence() : unreal.levelsequence.ULevelSequence;
  
  /**
    * Get the currently focused/viewed level sequence asset if there is a hierarchy of sequences.
  **/
  @:ufunction(BlueprintCallable) static public function GetFocusedLevelSequence() : unreal.levelsequence.ULevelSequence;
  
  /**
    * Close
  **/
  @:ufunction(BlueprintCallable) static public function CloseLevelSequence() : Void;
  
  /**
    Play the current level sequence
  **/
  @:ufunction(BlueprintCallable) static public function Play() : Void;
  
  /**
    Pause the current level sequence
  **/
  @:ufunction(BlueprintCallable) static public function Pause() : Void;
  
  /**
    Set global playback position for the current level sequence in frames
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentTime(NewFrame : unreal.Int32) : Void;
  
  /**
    Get the current global playback position in frames
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentTime() : unreal.Int32;
  
  /**
    Set local playback position for the current level sequence in frames
  **/
  @:ufunction(BlueprintCallable) static public function SetCurrentLocalTime(NewFrame : unreal.Int32) : Void;
  
  /**
    Get the current local playback position in frames
  **/
  @:ufunction(BlueprintCallable) static public function GetCurrentLocalTime() : unreal.Int32;
  
  /**
    Play from the current time to the requested time in frames
  **/
  @:ufunction(BlueprintCallable) static public function PlayTo(PlaybackParams : unreal.moviescene.FMovieSceneSequencePlaybackParams) : Void;
  
  /**
    Check whether the sequence is actively playing.
  **/
  @:ufunction(BlueprintCallable) static public function IsPlaying() : Bool;
  
  /**
    Gets the currently selected tracks.
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedTracks() : unreal.TArray<unreal.moviescene.UMovieSceneTrack>;
  
  /**
    Gets the currently selected sections.
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedSections() : unreal.TArray<unreal.moviescene.UMovieSceneSection>;
  
  /**
    Gets the currently selected channels.
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedChannels() : unreal.TArray<unreal.levelsequenceeditor.FSequencerChannelProxy>;
  
  /**
    Gets the currently selected folders.
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedFolders() : unreal.TArray<unreal.moviescene.UMovieSceneFolder>;
  
  /**
    Gets the currently selected Object Guids
  **/
  @:ufunction(BlueprintCallable) static public function GetSelectedObjects() : unreal.TArray<unreal.FGuid>;
  
  /**
    Select tracks
  **/
  @:ufunction(BlueprintCallable) static public function SelectTracks(Tracks : unreal.Const<unreal.PRef<unreal.TArray<unreal.moviescene.UMovieSceneTrack>>>) : Void;
  
  /**
    Select sections
  **/
  @:ufunction(BlueprintCallable) static public function SelectSections(Sections : unreal.Const<unreal.PRef<unreal.TArray<unreal.moviescene.UMovieSceneSection>>>) : Void;
  
  /**
    Select channels
  **/
  @:ufunction(BlueprintCallable) static public function SelectChannels(Channels : unreal.Const<unreal.PRef<unreal.TArray<unreal.levelsequenceeditor.FSequencerChannelProxy>>>) : Void;
  
  /**
    Select folders
  **/
  @:ufunction(BlueprintCallable) static public function SelectFolders(Folders : unreal.Const<unreal.PRef<unreal.TArray<unreal.moviescene.UMovieSceneFolder>>>) : Void;
  
  /**
    Select objects by GUID
  **/
  @:ufunction(BlueprintCallable) static public function SelectObjects(ObjectBinding : unreal.TArray<unreal.FGuid>) : Void;
  
  /**
    Empties the current selection.
  **/
  @:ufunction(BlueprintCallable) static public function EmptySelection() : Void;
  
  /**
    Refresh Sequencer UI.
  **/
  @:ufunction(BlueprintCallable) static public function RefreshCurrentLevelSequence() : Void;
  
  /**
    Get the object bound to the given binding ID with the current level sequence editor
  **/
  @:ufunction(BlueprintCallable) static public function GetBoundObjects(ObjectBinding : unreal.moviescene.FMovieSceneObjectBindingID) : unreal.TArray<unreal.UObject>;
  
  /**
    Check whether the current level sequence and its descendants are locked for editing.
  **/
  @:ufunction(BlueprintCallable) static public function IsLevelSequenceLocked() : Bool;
  
  /**
    Sets the lock for the current level sequence and its descendants for editing.
  **/
  @:ufunction(BlueprintCallable) static public function SetLockLevelSequence(bLock : Bool) : Void;
  
}
