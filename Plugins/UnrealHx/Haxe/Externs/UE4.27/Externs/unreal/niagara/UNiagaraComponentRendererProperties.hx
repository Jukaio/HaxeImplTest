/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:umodule("Niagara")
@:glueCppIncludes("NiagaraComponentRendererProperties.h")
@:uextern @:uclass extern class UNiagaraComponentRendererProperties extends unreal.niagara.UNiagaraRendererProperties {
  @:uproperty public var PropertyBindings : unreal.TArray<unreal.niagara.FNiagaraComponentPropertyBinding>;
  
  /**
    The object template used to create new components at runtime.
  **/
  @:uproperty public var TemplateComponent : unreal.USceneComponent;
  
  /**
    If a render visibility tag is present, particles whose tag matches this value will be visible in this renderer.
  **/
  @:uproperty public var RendererVisibility : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    If true then the editor visualization is enabled for the component; has no effect in-game.
  **/
  @:uproperty public var bVisualizeComponents : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    If true then new components can only be created on newly spawned particles. If a particle is not able to create a component on it's first frame (e.g. because the component
    limit was reached) then it will be blocked from spawning a component on subsequent frames.
  **/
  @:uproperty public var bOnlyCreateComponentsOnParticleSpawn : Bool;
  
  /**
    If true then components will not be automatically assigned to the first particle available, but try to stick to the same particle based on its unique id.
    Disabling this option is faster, but a particle can get a different component each tick, which can lead to problems with for example motion blur.
  **/
  @:uproperty public var bAssignComponentsOnParticleID : Bool;
  
  /**
    Which attribute should we use to check if component rendering should be enabled for a particle? This can be used to control the spawn-rate on a per-particle basis.
  **/
  @:uproperty public var RendererVisibilityTagBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    Which attribute should we use to check if component rendering should be enabled for a particle? This can be used to control the spawn-rate on a per-particle basis.
  **/
  @:uproperty public var EnabledBinding : unreal.niagara.FNiagaraVariableAttributeBinding;
  
  /**
    The max number of components that this emitter will spawn or update each frame.
  **/
  @:uproperty public var ComponentCountLimit : unreal.FakeUInt32;
  
  /**
    The scene component class to instantiate
  **/
  @:uproperty public var ComponentType : unreal.TSubclassOf<unreal.USceneComponent>;
  
}
