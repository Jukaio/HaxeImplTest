/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.iosruntimesettings;

/**
  Implements the settings for the iOS target platform.
**/
@:umodule("IOSRuntimeSettings")
@:glueCppIncludes("IOSRuntimeSettings.h")
@:uextern @:uclass extern class UIOSRuntimeSettings extends unreal.UObject {
  
  /**
    Whether to enable LOD streaming for landscape visual meshes. Requires Metal support.
  **/
  @:uproperty public var bStreamLandscapeMeshLODs : Bool;
  
  /**
    When set to anything beyond 0, this will ensure any SoundWaves longer than this value, in seconds, to stream directly off of the disk.
  **/
  @:uproperty public var AutoStreamingThreshold : unreal.Float32;
  
  /**
    Scales all compression qualities when cooking to this platform. For example, 0.5 will halve all compression qualities, and 1.0 will leave them unchanged.
  **/
  @:uproperty public var CompressionQualityModifier : unreal.Float32;
  @:uproperty public var MinSampleRate : unreal.Float32;
  @:uproperty public var LowSampleRate : unreal.Float32;
  @:uproperty public var MedSampleRate : unreal.Float32;
  @:uproperty public var HighSampleRate : unreal.Float32;
  
  /**
    Mapping of which sample rates are used for each sample rate quality for a specific platform.
  **/
  @:uproperty public var MaxSampleRate : unreal.Float32;
  
  /**
    Quality Level to COOK SoundCues at (if set, all other levels will be stripped by the cooker).
  **/
  @:uproperty public var SoundCueCookQualityIndex : unreal.Int32;
  @:uproperty public var bResampleForDevice : Bool;
  
  /**
    This overrides the default max chunk size used when chunking audio for stream caching (ignored if < 0)
  **/
  @:uproperty public var MaxChunkSizeOverrideKB : unreal.Int32;
  
  /**
    This determines the max amount of memory that should be used for the cache at any given time. If set low (<= 8 MB), it lowers the size of individual chunks of audio during cook.
  **/
  @:uproperty public var CacheSizeKB : unreal.Int32;
  
  /**
    When this is enabled, Actual compressed data will be separated from the USoundWave, and loaded into a cache.
  **/
  @:uproperty public var bUseAudioStreamCaching : Bool;
  
  /**
    Various overrides for how this platform should handle compression and decompression
  **/
  @:uproperty public var CompressionOverrides : unreal.audioplatformconfiguration.FPlatformRuntimeAudioCompressionOverrides;
  
  /**
    Which of the currently enabled occlusion plugins to use on Windows.
  **/
  @:uproperty public var OcclusionPlugin : unreal.FString;
  
  /**
    Which of the currently enabled reverb plugins to use on Windows.
  **/
  @:uproperty public var ReverbPlugin : unreal.FString;
  
  /**
    Which of the currently enabled spatialization plugins to use on Windows.
  **/
  @:uproperty public var SpatializationPlugin : unreal.FString;
  
  /**
    The number of workers to use to compute source audio. Will only use up to the max number of sources. Will evenly divide sources to each source worker.
  **/
  @:uproperty public var AudioNumSourceWorkers : unreal.Int32;
  
  /**
    The max number of channels (voices) to limit for this platform. The max channels used will be the minimum of this value and the global audio quality settings. A value of 0 will not apply a platform channel count max.
  **/
  @:uproperty public var AudioMaxChannels : unreal.Int32;
  
  /**
    The number of buffers to keep enqueued. More buffers increases latency, but can compensate for variable compute availability in audio callbacks on some platforms.
  **/
  @:uproperty public var AudioNumBuffersToEnqueue : unreal.Int32;
  
  /**
    The amount of audio to compute each callback block. Lower values decrease latency but may increase CPU cost.
  **/
  @:uproperty public var AudioCallbackBufferFrameSize : unreal.Int32;
  
  /**
    Sample rate to run the audio mixer with.
  **/
  @:uproperty public var AudioSampleRate : unreal.Int32;
  
  /**
    Whether or not the keyboard should be usable on it's own without a UITextField
  **/
  @:uproperty public var bUseIntegratedKeyboard : Bool;
  
  /**
    Whether to compile shaders using a tier Indirect Argument Buffers.
  **/
  @:uproperty public var IndirectArgumentTier : unreal.Int32;
  
  /**
    Whether to use of Metal shader-compiler's -ffast-math optimisations.
    Fast-Math performs algebraic-equivalent & reassociative optimisations not permitted by the floating point arithmetic standard (IEEE-754).
    These can improve shader performance at some cost to precision and can lead to NaN/INF propagation as they rely on
    shader inputs or variables not containing NaN/INF values. By default fast-math is enabled for performance.
  **/
  @:uproperty public var EnableMathOptimisations : Bool;
  
  /**
    Whether to force Metal shaders to use 32bit floating point precision even when the shader uses half floats.
    Half floats are much more efficient when they are availble but have less accuracy over large ranges,
    as such some projects may need to use 32bit floats to ensure correct rendering.
  **/
  @:uproperty public var ForceFloats : Bool;
  
  /**
    Whether to use the Metal shading language's "fast" intrinsics.
    Fast intrinsics assume that no NaN or INF value will be provided as input,
    so are more efficient. However, they will produce undefined results if NaN/INF
    is present in the argument/s.
  **/
  @:uproperty public var UseFastIntrinsics : Bool;
  
  /**
    The maximum supported Metal shader langauge version.
    This defines what features may be used and OS versions supported.
  **/
  @:uproperty public var MaxShaderLanguageVersion : unreal.UInt8;
  
  /**
    Whether the app supports HTTPS
  **/
  @:uproperty public var bDisableHTTPS : Bool;
  
  /**
    The team ID of the apple developer account to be used to autmatically sign IOS builds
  **/
  @:uproperty public var IOSTeamID : unreal.FString;
  
  /**
    Whether to use automatic signing through Xcode
  **/
  @:uproperty public var bAutomaticSigning : Bool;
  
  /**
    Signing certificate to utilize when signing
  **/
  @:uproperty public var SigningCertificate : unreal.FString;
  
  /**
    Mobile provision to utilize when signing
  **/
  @:uproperty public var MobileProvision : unreal.FString;
  
  /**
    Facebook App ID obtained from Facebook's Developer Centre
  **/
  @:uproperty public var FacebookAppID : unreal.FString;
  
  /**
    Whether the app supports Facebook
  **/
  @:uproperty public var bEnableFacebookSupport : Bool;
  
  /**
    Choose whether to use a custom LaunchScreen.Storyboard as a Launchscreen. To use this option, create a storyboard in Xcode and
    copy it named LaunchScreen.storyboard in Build/IOS/Resources/Interface under your Project folder. This will be compiled and
    copied to the bundle app and the Launch screen image above will not be included in the app.
    When using assets in your custom LaunchScreen.storyboard, add them in Build/IOS/Resources/Interface/Assets and they will be included.
  **/
  @:uproperty public var bCustomLaunchscreenStoryboard : Bool;
  
  /**
    Any additional plist key/value data utilizing \n for a new line
  **/
  @:uproperty public var AdditionalPlistData : unreal.FString;
  
  /**
    Whether or not to add support for iPhone devices
  **/
  @:uproperty public var bSupportsIPhone : Bool;
  
  /**
    Whether or not to add support for iPad devices
  **/
  @:uproperty public var bSupportsIPad : Bool;
  
  /**
    Minimum iOS version this game supports
  **/
  @:uproperty public var MinimumiOSVersion : unreal.iosruntimesettings.EIOSVersion;
  
  /**
    Whether or not to allow taking the MaxRefreshRate from the device instead of a constant (60fps) in IOSPlatformFramePacer
  **/
  @:uproperty public var bEnableDynamicMaxFPS : Bool;
  
  /**
    Set the maximum frame rate to save on power consumption
  **/
  @:uproperty public var FrameRateLock : unreal.iosruntimesettings.EPowerUsageFrameRateLock;
  
  /**
    Specifies the version for the application.
  **/
  @:uproperty public var VersionInfo : unreal.FString;
  
  /**
    Specifies the bundle identifier for the application.
  **/
  @:uproperty public var BundleIdentifier : unreal.FString;
  
  /**
    Specifies the the name of the application bundle. This is the short name for the application bundle.
  **/
  @:uproperty public var BundleName : unreal.FString;
  
  /**
    Specifies the the display name for the application. This will be displayed under the icon on the device.
  **/
  @:uproperty public var BundleDisplayName : unreal.FString;
  
  /**
    The Preferred Orientation will be used as the initial orientation at launch when both Landscape Left and Landscape Right orientations are to be supported.
  **/
  @:uproperty public var PreferredLandscapeOrientation : unreal.iosruntimesettings.EIOSLandscapeOrientation;
  
  /**
    Whether files created by the app will be accessible from within the device's Files app (requires iTunes File Sharing)
  **/
  @:uproperty public var bSupportsFilesApp : Bool;
  
  /**
    Whether files created by the app will be accessible from the iTunes File Sharing feature
  **/
  @:uproperty public var bSupportsITunesFileSharing : Bool;
  
  /**
    Supports right landscape orientation. Portrait will not be supported.
  **/
  @:uproperty public var bSupportsLandscapeRightOrientation : Bool;
  
  /**
    Supports left landscape orientation. Portrait will not be supported.
  **/
  @:uproperty public var bSupportsLandscapeLeftOrientation : Bool;
  
  /**
    Supports upside down portrait orientation. Landscape will not be supported.
  **/
  @:uproperty public var bSupportsUpsideDownOrientation : Bool;
  
  /**
    Supports default portrait orientation. Landscape will not be supported.
  **/
  @:uproperty public var bSupportsPortraitOrientation : Bool;
  
  /**
    Disables usage of device motion data. If application does not use motion data disabling it will improve battery life
  **/
  @:uproperty public var bDisableMotionData : Bool;
  
  /**
    Block force feedback on the device when controllers are attached.
  **/
  @:uproperty public var bControllersBlockDeviceFeedback : Bool;
  
  /**
    If checked, Bluetooth connected controllers will send input
  **/
  @:uproperty public var bAllowControllers : Bool;
  
  /**
    If checked, the center of the trackpad is 0,0 (center) for the virtual joystick. If unchecked, the location the user taps becomes 0,0
  **/
  @:uproperty public var bUseRemoteAbsoluteDpadValues : Bool;
  
  /**
    If checked, the trackpad is a virtual joystick (acts like the left stick of a controller). If unchecked, the trackpad will send touch events
  **/
  @:deprecated @:uproperty public var bUseRemoteAsVirtualJoystick_DEPRECATED : Bool;
  
  /**
    If checked, the Siri Remote can be rotated to landscape view
  **/
  @:uproperty public var bAllowRemoteRotation : Bool;
  
  /**
    If checked, the game will be able to handle multiple gamepads at the same time (the Siri Remote is a gamepad)
  **/
  @:uproperty public var bGameSupportsMultipleActiveControllers : Bool;
  
  /**
    Should the app be compatible with Multi-User feature on tvOS ?　If checked, the game will will shutdown with the typical exit flow.
  **/
  @:uproperty public var bRunAsCurrentUser : Bool;
  
  /**
    The path of the ssh permissions key to be used when connecting to the remote server.
  **/
  @:uproperty public var SSHPrivateKeyOverridePath : unreal.iosruntimesettings.FIOSBuildResourceFilePath;
  
  /**
    The existing location of an SSH Key found by UE4.
  **/
  @:uproperty public var SSHPrivateKeyLocation : unreal.FString;
  
  /**
    The install directory of cwrsync.
  **/
  @:uproperty public var CwRsyncInstallPath : unreal.iosruntimesettings.FIOSBuildResourceDirectory;
  
  /**
    Optional path on the remote mac where the build files will be copied. If blank, ~/UE4/Builds will be used.
  **/
  @:uproperty public var RemoteServerOverrideBuildPath : unreal.FString;
  
  /**
    The mac users name which matches the SSH Private Key, for remote builds using RSync.
  **/
  @:uproperty public var RSyncUsername : unreal.FString;
  
  /**
    Enable the use of RSync for remote builds on a mac
  **/
  @:uproperty public var bUseRSync : Bool;
  
  /**
    The name or ip address of the remote mac which will be used to build IOS
  **/
  @:uproperty public var RemoteServerName : unreal.FString;
  
  /**
    Any additional linker flags to pass to the linker in shipping builds
  **/
  @:uproperty public var AdditionalShippingLinkerFlags : unreal.FString;
  
  /**
    Any additional linker flags to pass to the linker in non-shipping builds
  **/
  @:uproperty public var AdditionalLinkerFlags : unreal.FString;
  
  /**
    Enable Advertising Identified
  **/
  @:uproperty public var bEnableAdvertisingIdentifier : Bool;
  
  /**
    Enable bitcode compiling?
  **/
  @:uproperty public var bShipForBitcode : Bool;
  
  /**
    Enable generation of xcode archive package
  **/
  @:uproperty public var bGenerateXCArchive : Bool;
  
  /**
    Enable generation of a .udebugsymbols file, which allows offline, platform-independent symbolication for the Malloc Profiler or external crash reporting tools. Requires a dSYM file or bundle.
  **/
  @:uproperty public var bGenerateCrashReportSymbols : Bool;
  
  /**
    Enable generation of dSYM bundle
  **/
  @:uproperty public var bGeneratedSYMBundle : Bool;
  
  /**
    Enable generation of dSYM file
  **/
  @:uproperty public var bGeneratedSYMFile : Bool;
  @:uproperty public var WindowsMetalToolchainOverride : unreal.iosruntimesettings.FIOSBuildResourceDirectory;
  
  /**
    Whether to build the iOS project as a framework.
  **/
  @:uproperty public var bBuildAsFramework : Bool;
  
  /**
    Whether or not to add support for ASTC textures
  **/
  @:uproperty public var bCookASTCTextures : Bool;
  
  /**
    Whether or not to add support for PVRTC textures
  **/
  @:uproperty public var bCookPVRTCTextures : Bool;
  
  /**
    Whether or not to compile iOS Metal shaders for the desktop renderer (requires iOS 10+ and an A10 processor)
  **/
  @:uproperty public var bSupportsMetalMRT : Bool;
  
  /**
    Whether or not to compile iOS Metal shaders for the Mobile renderer (requires iOS 8+ and an A7 processor).
  **/
  @:uproperty public var bSupportsMetal : Bool;
  
  /**
    Should background fetch support be enabled?
  **/
  @:uproperty public var bEnableBackgroundFetch : Bool;
  
  /**
    Should push/remote notifications support (iOS Online Subsystem) be enabled?
  **/
  @:uproperty public var bEnableRemoteNotificationsSupport : Bool;
  
  /**
    iCloud Read stategy
  **/
  @:uproperty public var IOSCloudKitSyncStrategy : unreal.iosruntimesettings.EIOSCloudKitSyncStrategy;
  
  /**
    Should Cloud Kit support (iOS Online Subsystem) be enabled?
  **/
  @:uproperty public var bEnableCloudKitSupport : Bool;
  
  /**
    Should Game Center support (iOS Online Subsystem) be enabled?
  **/
  @:uproperty public var bEnableGameCenterSupport : Bool;
  
}
