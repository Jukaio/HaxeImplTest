/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplaycameras;

/**
  Legacy camera shake which can do either oscillation or run camera anims.
**/
@:umodule("GameplayCameras")
@:glueCppIncludes("MatineeCameraShake.h")
@:uextern @:uclass extern class UMatineeCameraShake extends unreal.UCameraShakeBase {
  
  /**
    Sequence shake pattern for when using a sequence instead of a camera anim
  **/
  @:uproperty private var SequenceShakePattern : unreal.templatesequence.USequenceCameraShakePattern;
  
  /**
    The playing instance of the CameraAnim-based shake, if any.
  **/
  @:uproperty public var AnimInst : unreal.UCameraAnimInst;
  
  /**
    Time remaining for oscillation shakes. Less than 0.f means shake infinitely.
  **/
  @:uproperty public var OscillatorTimeRemaining : unreal.Float32;
  
  /**
    If true, play a random snippet of the animation of length Duration.  Implies bLoop and bRandomStartTime = true for the CameraAnim.
    If false, play the full anim once, non-looped. Useful for getting variety out of a single looped CameraAnim asset.
  **/
  @:uproperty public var bRandomAnimSegment : Bool;
  
  /**
    Source camera animation sequence to play. Can be null, but can't have both Anim and AnimSequence.
  **/
  @:uproperty public var AnimSequence : unreal.templatesequence.UCameraAnimationSequence;
  
  /**
    Source camera animation to play. Can be null.
  **/
  @:uproperty public var Anim : unreal.UCameraAnim;
  
  /**
    When bRandomAnimSegment is true, this defines how long the anim should play.
  **/
  @:uproperty public var RandomAnimSegmentDuration : unreal.Float32;
  
  /**
    Linear blend-out time.
  **/
  @:uproperty public var AnimBlendOutTime : unreal.Float32;
  
  /**
    Linear blend-in time.
  **/
  @:uproperty public var AnimBlendInTime : unreal.Float32;
  
  /**
    Scalar defining how "intense" to play the anim.
  **/
  @:uproperty public var AnimScale : unreal.Float32;
  
  /**
    Scalar defining how fast to play the anim.
  **/
  @:uproperty public var AnimPlayRate : unreal.Float32;
  
  /**
    FOV oscillation
  **/
  @:uproperty public var FOVOscillation : unreal.gameplaycameras.FFOscillator;
  
  /**
    Positional oscillation
  **/
  @:uproperty public var LocOscillation : unreal.gameplaycameras.FVOscillator;
  
  /**
    Rotational oscillation
  **/
  @:uproperty public var RotOscillation : unreal.gameplaycameras.FROscillator;
  
  /**
    Duration of the blend-out, where the oscillation scales from 1 to 0.
  **/
  @:uproperty public var OscillationBlendOutTime : unreal.Float32;
  
  /**
    Duration of the blend-in, where the oscillation scales from 0 to 1.
  **/
  @:uproperty public var OscillationBlendInTime : unreal.Float32;
  
  /**
    Duration in seconds of current screen shake. Less than 0 means indefinite, 0 means no oscillation.
  **/
  @:uproperty public var OscillationDuration : unreal.Float32;
  
  /**
    Called when the shake starts playing
  **/
  @:ufunction(BlueprintImplementableEvent) public function ReceivePlayShake(Scale : unreal.Float32) : Void;
  
  /**
    Called every tick to let the shake modify the point of view
  **/
  @:ufunction(BlueprintImplementableEvent) public function BlueprintUpdateCameraShake(DeltaTime : unreal.Float32, Alpha : unreal.Float32, POV : unreal.Const<unreal.PRef<unreal.FMinimalViewInfo>>, ModifiedPOV : unreal.PRef<unreal.FMinimalViewInfo>) : Void;
  
  /**
    Called to allow a shake to decide when it's finished playing.
  **/
  @:ufunction(BlueprintNativeEvent) @:thisConst public function ReceiveIsFinished() : Bool;
  
  /**
    Called when the shake is explicitly stopped.
    @param bImmediatly           If true, shake stops right away regardless of blend out settings. If false, shake may blend out according to its settings.
  **/
  @:ufunction(BlueprintImplementableEvent) public function ReceiveStopShake(bImmediately : Bool) : Void;
  
  /**
    Backwards compatible method used by core BP redirectors. This is needed because the return value is specifically a Matinee camera shake,
    which some BP logic often uses directly to set oscillator/anim properties.
  **/
  @:ufunction(BlueprintCallable) static public function StartMatineeCameraShake(PlayerCameraManager : unreal.APlayerCameraManager, ShakeClass : unreal.TSubclassOf<unreal.gameplaycameras.UMatineeCameraShake>, Scale : unreal.Float32 = 1.000000, @:opt("CameraLocal") PlaySpace : unreal.ECameraShakePlaySpace, UserPlaySpaceRot : unreal.FRotator) : unreal.gameplaycameras.UMatineeCameraShake;
  
  /**
    Backwards compatible method used by core BP redirectors. This is needed because the return value is specifically a Matinee camera shake,
    which some BP logic often uses directly to set oscillator/anim properties.
  **/
  @:ufunction(BlueprintCallable) static public function StartMatineeCameraShakeFromSource(PlayerCameraManager : unreal.APlayerCameraManager, ShakeClass : unreal.TSubclassOf<unreal.gameplaycameras.UMatineeCameraShake>, SourceComponent : unreal.UCameraShakeSourceComponent, Scale : unreal.Float32 = 1.000000, @:opt("CameraLocal") PlaySpace : unreal.ECameraShakePlaySpace, UserPlaySpaceRot : unreal.FRotator) : unreal.gameplaycameras.UMatineeCameraShake;
  
}
