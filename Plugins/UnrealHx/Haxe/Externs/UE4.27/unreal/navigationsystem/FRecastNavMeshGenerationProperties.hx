/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.navigationsystem;

@:umodule("NavigationSystem")
@:glueCppIncludes("Public/NavMesh/RecastNavMesh.h")
@:uextern @:ustruct extern class FRecastNavMeshGenerationProperties {
  
  /**
    if true, the NavMesh will allocate fixed size pool for tiles, should be enabled to support streaming
  **/
  @:uproperty public var bFixedTilePoolSize : Bool;
  
  /**
    if set, only low height spans with corresponding area modifier will be stored in tile cache (reduces memory, can't modify without full tile rebuild)
  **/
  @:uproperty public var bFilterLowSpanFromTileCache : Bool;
  
  /**
    if set, only single low height span will be allowed under valid one
  **/
  @:uproperty public var bFilterLowSpanSequences : Bool;
  
  /**
    Expand the top of the area nav modifier's bounds by one cell height when applying to the navmesh.
              If unset, navmesh on top of surfaces might not be marked by marking bounds flush with top surfaces (since navmesh is generated slightly above collision, depending on cell height).
  **/
  @:uproperty public var bUseExtraTopCellWhenMarkingAreas : Bool;
  
  /**
    mark areas with insufficient free height above instead of cutting them out (accessible only for area modifiers using replace mode)
  **/
  @:uproperty public var bMarkLowHeightAreas : Bool;
  
  /**
    controls whether voxel filtering will be applied (via FRecastTileGenerator::ApplyVoxelFilter).
        Results in generated navmesh better fitting navigation bounds, but hits (a bit) generation performance
  **/
  @:uproperty public var bPerformVoxelFiltering : Bool;
  
  /**
    Controls whether Navigation Areas will be sorted by cost before application
        to navmesh during navmesh generation. This is relevant when there are
        areas overlapping and we want to have area cost express area relevancy
        as well. Setting it to true will result in having area sorted by cost,
        but it will also increase navmesh generation cost a bit
  **/
  @:uproperty public var bSortNavigationAreasByCost : Bool;
  
  /**
    number of chunk splits (along single axis) used for layer's partitioning: ChunkyMonotone
  **/
  @:uproperty public var LayerChunkSplits : unreal.Int32;
  
  /**
    number of chunk splits (along single axis) used for region's partitioning: ChunkyMonotone
  **/
  @:uproperty public var RegionChunkSplits : unreal.Int32;
  
  /**
    partitioning method for creating tile layers
  **/
  @:uproperty public var LayerPartitioning : unreal.navigationsystem.ERecastPartitioning;
  
  /**
    partitioning method for creating navmesh polys
  **/
  @:uproperty public var RegionPartitioning : unreal.navigationsystem.ERecastPartitioning;
  
  /**
    Absolute hard limit to number of navmesh tiles. Be very, very careful while modifying it while
         having big maps with navmesh. A single, empty tile takes 176 bytes and empty tiles are
         allocated up front (subject to change, but that's where it's at now)
         @note TileNumberHardLimit is always rounded up to the closest power of 2
  **/
  @:uproperty public var TileNumberHardLimit : unreal.Int32;
  
  /**
    How much navigable shapes can get simplified - the higher the value the more freedom
  **/
  @:uproperty public var MaxSimplificationError : unreal.Float32;
  
  /**
    The size limit of regions to be merged with bigger regions (watershed partitioning only)
  **/
  @:uproperty public var MergeRegionSize : unreal.Float32;
  
  /**
    The minimum dimension of area. Areas smaller than this will be discarded
  **/
  @:uproperty public var MinRegionArea : unreal.Float32;
  
  /**
    Largest vertical step the agent can perform
  **/
  @:uproperty public var AgentMaxStepHeight : unreal.Float32;
  
  /**
    The maximum slope (angle) that the agent can move on.
  **/
  @:uproperty public var AgentMaxSlope : unreal.Float32;
  
  /**
    Size of the tallest agent that will path with this navmesh.
  **/
  @:uproperty public var AgentHeight : unreal.Float32;
  
  /**
    Radius of largest agent that can freely traverse the generated navmesh
  **/
  @:uproperty public var AgentRadius : unreal.Float32;
  
  /**
    vertical size of voxelization cell
  **/
  @:uproperty public var CellHeight : unreal.Float32;
  
  /**
    horizontal size of voxelization cell
  **/
  @:uproperty public var CellSize : unreal.Float32;
  
  /**
    size of single tile, expressed in uu
  **/
  @:uproperty public var TileSizeUU : unreal.Float32;
  
  /**
    maximum number of tiles NavMesh can hold
  **/
  @:uproperty public var TilePoolSize : unreal.Int32;
  
}
