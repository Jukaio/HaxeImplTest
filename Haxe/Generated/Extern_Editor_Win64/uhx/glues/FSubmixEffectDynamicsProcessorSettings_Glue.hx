// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/audiomixer/fsubmixeffectdynamicsprocessorsettings.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class FSubmixEffectDynamicsProcessorSettings_Glue {
public static function get_KeyLowshelf(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_KeyLowshelf(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_KeyHighshelf(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_KeyHighshelf(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OutputGainDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_OutputGainDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_KeyGainDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_KeyGainDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bKeyAudition(self:unreal.VariantPtr):Bool;
public static function set_bKeyAudition(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bBypass(self:unreal.VariantPtr):Bool;
public static function set_bBypass(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bAnalogMode(self:unreal.VariantPtr):Bool;
public static function set_bAnalogMode(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bChannelLinked_DEPRECATED(self:unreal.VariantPtr):Bool;
public static function set_bChannelLinked_DEPRECATED(self:unreal.VariantPtr, value:Bool):Void;
public static function get_ExternalSubmix(self:unreal.VariantPtr):unreal.UIntPtr;
public static function set_ExternalSubmix(self:unreal.VariantPtr, value:unreal.UIntPtr):Void;
public static function get_ExternalAudioBus(self:unreal.VariantPtr):unreal.UIntPtr;
public static function set_ExternalAudioBus(self:unreal.VariantPtr, value:unreal.UIntPtr):Void;
public static function get_KeySource(self:unreal.VariantPtr):Int;
public static function set_KeySource(self:unreal.VariantPtr, value:Int):Void;
public static function get_ReleaseTimeMsec(self:unreal.VariantPtr):cpp.Float32;
public static function set_ReleaseTimeMsec(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_AttackTimeMsec(self:unreal.VariantPtr):cpp.Float32;
public static function set_AttackTimeMsec(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LookAheadMsec(self:unreal.VariantPtr):cpp.Float32;
public static function set_LookAheadMsec(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_KneeBandwidthDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_KneeBandwidthDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Ratio(self:unreal.VariantPtr):cpp.Float32;
public static function set_Ratio(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ThresholdDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_ThresholdDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_InputGainDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_InputGainDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LinkMode(self:unreal.VariantPtr):Int;
public static function set_LinkMode(self:unreal.VariantPtr, value:Int):Void;
public static function get_PeakMode(self:unreal.VariantPtr):Int;
public static function set_PeakMode(self:unreal.VariantPtr, value:Int):Void;
public static function get_DynamicsProcessorType(self:unreal.VariantPtr):Int;
public static function set_DynamicsProcessorType(self:unreal.VariantPtr, value:Int):Void;
public static function copyNew(self:unreal.VariantPtr):unreal.VariantPtr;
public static function copy(self:unreal.VariantPtr):unreal.VariantPtr;
public static function assign(self:unreal.VariantPtr, val:unreal.VariantPtr):Void;
public static function equals(self:unreal.VariantPtr, other:unreal.VariantPtr):Bool;
}