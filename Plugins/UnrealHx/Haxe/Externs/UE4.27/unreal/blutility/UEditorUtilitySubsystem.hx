/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.blutility;

@:umodule("Blutility")
@:glueCppIncludes("EditorUtilitySubsystem.h")
@:uextern @:uclass extern class UEditorUtilitySubsystem extends unreal.editorsubsystem.UEditorSubsystem {
  @:uproperty public var StartupObjects : unreal.TArray<unreal.FSoftObjectPath>;
  @:uproperty public var LoadedUIs : unreal.TArray<unreal.FSoftObjectPath>;
  
  /**
    Allow startup object to be garbage collected
  **/
  @:ufunction(BlueprintCallable) @:final public function ReleaseInstanceOfAsset(Asset : unreal.UObject) : Void;
  @:ufunction(BlueprintCallable) @:final public function TryRun(Asset : unreal.UObject) : Bool;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function CanRun(Asset : unreal.UObject) : Bool;
  @:ufunction(BlueprintCallable) @:final public function SpawnAndRegisterTabAndGetID(InBlueprint : unreal.blutility.UEditorUtilityWidgetBlueprint, NewTabID : unreal.PRef<unreal.FName>) : unreal.blutility.UEditorUtilityWidget;
  @:ufunction(BlueprintCallable) @:final public function SpawnAndRegisterTab(InBlueprint : unreal.blutility.UEditorUtilityWidgetBlueprint) : unreal.blutility.UEditorUtilityWidget;
  @:ufunction(BlueprintCallable) @:final public function RegisterTabAndGetID(InBlueprint : unreal.blutility.UEditorUtilityWidgetBlueprint, NewTabID : unreal.PRef<unreal.FName>) : Void;
  
  /**
    Given an ID for a tab, try to find a tab spawner that matches, and then spawn a tab. Returns true if it was able to find a matching tab spawner
  **/
  @:ufunction(BlueprintCallable) @:final public function SpawnRegisteredTabByID(NewTabID : unreal.FName) : Bool;
  
  /**
    Given an ID for a tab, try to find an existing tab. Returns true if it found a tab.
  **/
  @:ufunction(BlueprintCallable) @:final public function DoesTabExist(NewTabID : unreal.FName) : Bool;
  
  /**
    Given an ID for a tab, try to find and close an existing tab. Returns true if it found a tab to close.
  **/
  @:ufunction(BlueprintCallable) @:final public function CloseTabByID(NewTabID : unreal.FName) : Bool;
  
  /**
    Given an editor utility widget blueprint, get the widget it creates. This will return a null pointer if the widget is not currently in a tab.
  **/
  @:ufunction(BlueprintCallable) @:final public function FindUtilityWidgetFromBlueprint(InBlueprint : unreal.blutility.UEditorUtilityWidgetBlueprint) : unreal.blutility.UEditorUtilityWidget;
  @:ufunction(BlueprintCallable) @:final public function RegisterAndExecuteTask(NewTask : unreal.blutility.UEditorUtilityTask) : Void;
  
}
