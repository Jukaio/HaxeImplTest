/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

@:umodule("UnrealEd")
@:glueCppIncludes("Factories/TextureFactory.h")
@:uextern @:uclass extern class UTextureFactory extends unreal.editor.UFactory {
  
  /**
    Mode for how to determine the color space of the source image. Auto will let the factory decide based on header metadata or bit depth. Linear or SRGB will force the color space on the resulting texture.
  **/
  @:uproperty public var ColorSpaceMode : unreal.editor.ETextureSourceColorSpace;
  
  /**
    The pattern to use to match UDIM files to indices. Defaults to match a filename that ends with either .1001 or _1001
    This 1st and 3rd (optional) capture groups are used as the texture name. The 2nd capture group is considered to be the UDIM index.
    ie: (Capture Group 1)(\d{4})( Capture Group 3)
  **/
  @:uproperty public var UdimRegexPattern : unreal.FString;
  
  /**
    If enabled, we are using the texture content hash as the guid.
  **/
  @:uproperty public var bUseHashAsGuid : Bool;
  
  /**
    If enabled, we are using the existing settings for a texture that already existed.
  **/
  @:uproperty public var bUsingExistingSettings : Bool;
  
  /**
    If enabled, the texture's green channel will be inverted. This is useful for some normal maps
  **/
  @:uproperty public var bFlipNormalMapGreenChannel : Bool;
  
  /**
    If enabled, preserve the value of border pixels when creating mip-maps
  **/
  @:uproperty public var bPreserveBorder : Bool;
  
  /**
    Channel values to compare to when preserving alpha coverage from a mask for mips
  **/
  @:uproperty public var AlphaCoverageThresholds : unreal.FVector4;
  
  /**
    If enabled, mip-map alpha values will be dithered for smooth transitions
  **/
  @:uproperty public var bDitherMipMapAlpha : Bool;
  
  /**
    The group the texture belongs to
  **/
  @:uproperty public var LODGroup : unreal.TextureGroup;
  
  /**
    The mip-map generation settings for the texture; Allows customization of the content of the mip-map chain
  **/
  @:uproperty public var MipGenSettings : unreal.TextureMipGenSettings;
  
  /**
    The shading model of the created material
  **/
  @:uproperty public var ShadingModel : unreal.EMaterialShadingModel;
  
  /**
    The blend mode of the created material
  **/
  @:uproperty public var Blending : unreal.EBlendMode;
  
  /**
    If enabled, the created material will be two-sided
  **/
  @:uproperty public var bTwoSided : Bool;
  
  /**
    If enabled, link the texture's alpha to the created material's opacity mask
  **/
  @:uproperty public var bAlphaToOpacityMask : Bool;
  
  /**
    If enabled, link the texture's alpha to the created material's opacity
  **/
  @:uproperty public var bAlphaToOpacity : Bool;
  
  /**
    If enabled, link the texture's alpha to the created material's emissive color
  **/
  @:uproperty public var bAlphaToEmissive : Bool;
  
  /**
    If enabled, link the texture's alpha to the created material's roughness
  **/
  @:uproperty public var bAlphaToRoughness : Bool;
  
  /**
    If enabled, link the texture to the created material's emissive color
  **/
  @:uproperty public var bRGBToEmissive : Bool;
  
  /**
    If enabled, link the texture to the created material's base color
  **/
  @:uproperty public var bRGBToBaseColor : Bool;
  
  /**
    If enabled, a material will automatically be created for the texture
  **/
  @:uproperty public var bCreateMaterial : Bool;
  
  /**
    Compression settings for the texture
  **/
  @:uproperty public var CompressionSettings : unreal.TextureCompressionSettings;
  
  /**
    If enabled, compression is deferred until the texture is saved
  **/
  @:uproperty public var bDeferCompression : Bool;
  
  /**
    If enabled, the texture's alpha channel will be discarded during compression
  **/
  @:uproperty public var NoAlpha : Bool;
  @:uproperty public var NoCompression : Bool;
  
}
