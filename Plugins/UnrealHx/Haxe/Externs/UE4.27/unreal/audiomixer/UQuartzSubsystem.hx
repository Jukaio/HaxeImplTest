/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

@:umodule("AudioMixer")
@:glueCppIncludes("Quartz/QuartzSubsystem.h")
@:uextern @:uclass extern class UQuartzSubsystem extends unreal.UTickableWorldSubsystem {
  @:ufunction(BlueprintCallable) @:final public function IsQuartzEnabled() : Bool;
  
  /**
    Clock Creation
    create a new clock (or return handle if clock already exists)
  **/
  @:ufunction(BlueprintCallable) @:final public function CreateNewClock(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName, InSettings : unreal.FQuartzClockSettings, bOverrideSettingsIfClockExists : Bool = false, bUseAudioEngineClockManager : Bool = true) : unreal.audiomixer.UQuartzClockHandle;
  
  /**
    delete an existing clock given its name
  **/
  @:ufunction(BlueprintCallable) @:final public function DeleteClockByName(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName) : Void;
  
  /**
    get handle for existing clock
  **/
  @:ufunction(BlueprintCallable) @:final public function GetHandleForClock(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName) : unreal.audiomixer.UQuartzClockHandle;
  
  /**
    returns true if the clock exists
  **/
  @:ufunction(BlueprintCallable) @:final public function DoesClockExist(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName) : Bool;
  
  /**
    returns true if the clock is running
  **/
  @:ufunction(BlueprintCallable) @:final public function IsClockRunning(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName) : Bool;
  
  /**
    Returns the duration in seconds of the given Quantization Type
    
    @param The Quantization type to measure
    @param The quantity of the Quantization Type to calculate the time of
    @return The duration, in seconds, of a multiplier amount of the Quantization Type, or -1 in the case the clock is invalid
  **/
  @:ufunction(BlueprintCallable) @:final public function GetDurationOfQuantizationTypeInSeconds(WorldContextObject : unreal.Const<unreal.UObject>, ClockName : unreal.FName, QuantizationType : unreal.Const<unreal.Ref<unreal.EQuartzCommandQuantization>>, Multiplier : unreal.Float32 = 1.000000) : unreal.Float32;
  
  /**
    Retrieves a timestamp for the clock
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentClockTimestamp(WorldContextObject : unreal.Const<unreal.UObject>, InClockName : unreal.Const<unreal.PRef<unreal.FName>>) : unreal.FQuartzTransportTimeStamp;
  
  /**
    Returns the amount of time, in seconds, the clock has been running. Caution: due to latency, this will not be perfectly accurate
  **/
  @:ufunction(BlueprintCallable) @:final public function GetEstimatedClockRunTime(WorldContextObject : unreal.Const<unreal.UObject>, InClockName : unreal.Const<unreal.PRef<unreal.FName>>) : unreal.Float32;
  
  /**
    latency data (Game thread -> Audio Render Thread)
  **/
  @:ufunction(BlueprintCallable) @:final public function GetGameThreadToAudioRenderThreadAverageLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetGameThreadToAudioRenderThreadMinLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetGameThreadToAudioRenderThreadMaxLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  
  /**
    latency data (Audio Render Thread -> Game thread)
  **/
  @:ufunction(BlueprintCallable) @:final public function GetAudioRenderThreadToGameThreadAverageLatency() : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetAudioRenderThreadToGameThreadMinLatency() : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetAudioRenderThreadToGameThreadMaxLatency() : unreal.Float32;
  
  /**
    latency data (Round trip)
  **/
  @:ufunction(BlueprintCallable) @:final public function GetRoundTripAverageLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetRoundTripMinLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function GetRoundTripMaxLatency(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  
}
