/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  A component that represents a participating media material around a planet, e.g. clouds.
**/
@:glueCppIncludes("Components/VolumetricCloudComponent.h")
@:uextern @:uclass extern class UVolumetricCloudComponent extends unreal.USceneComponent {
  
  /**
    When the mean transmittance is below this threashold, we stop tracing. This is an good way to reduce the ray marched sample count, and thus to increase performance.
  **/
  @:uproperty public var StopTracingTransmittanceThreshold : unreal.Float32;
  
  /**
    The shadow tracing distance in kilometers, only used with Advanced Output ray marched shadows.
  **/
  @:uproperty public var ShadowTracingDistance : unreal.Float32;
  
  /**
    Scale the shadow tracing sample count in reflection views, only used with Advanced Output ray marched shadows. Quality level scalability CVARs affect the maximum range.
    The sample count resolution is still clamped according to scalability setting to 'r.VolumetricCloud.Shadow.ReflectionRaySampleMaxCount'.
  **/
  @:uproperty public var ShadowReflectionSampleCountScale : unreal.Float32;
  
  /**
    Scale the shadow tracing sample count in primary views, only used with Advanced Output ray marched shadows. Quality level scalability CVARs affect the maximum range.
    The sample count resolution is still clamped according to scalability setting to 'r.VolumetricCloud.Shadow.ViewRaySampleMaxCount'.
  **/
  @:uproperty public var ShadowViewSampleCountScale : unreal.Float32;
  
  /**
    Scale the tracing sample count in reflection views. Quality level scalability CVARs affect the maximum range.
    The sample count resolution is still clamped according to scalability setting to 'r.VolumetricCloud.ReflectionRaySampleMaxCount'.
  **/
  @:uproperty public var ReflectionSampleCountScale : unreal.Float32;
  
  /**
    Scale the tracing sample count in primary views. Quality level scalability CVARs affect the maximum range.
    The sample count resolution is still clamped according to scalability setting to 'r.VolumetricCloud.ViewRaySampleCountMax'.
  **/
  @:uproperty public var ViewSampleCountScale : unreal.Float32;
  
  /**
    Occlude the sky light contribution at the bottom of the cloud layer. This is a fast approximation to sky lighting being occluded by cloud without having to trace rays or sample AO texture. Ignored if the cloud material explicitely sets the ambient occlusion value.
  **/
  @:uproperty public var SkyLightCloudBottomOcclusion : unreal.Float32;
  
  /**
    Whether to apply atmosphere transmittance per sample, instead of using the light global transmittance.
  **/
  @:uproperty public var bUsePerSampleAtmosphericLightTransmittance : Bool;
  
  /**
    The material describing the cloud volume. It must be a Volume domain material.
  **/
  @:uproperty public var Material : unreal.UMaterialInterface;
  
  /**
    The ground albedo used to light the cloud from below with respect to the sun light and sky atmosphere.
    This is only used by the cloud material when the 'Volumetric Advanced' node have GroundContribution enabled.
  **/
  @:uproperty public var GroundAlbedo : unreal.FColor;
  
  /**
    The planet radius used when there is not SkyAtmosphere component present in the scene.
  **/
  @:uproperty public var PlanetRadius : unreal.Float32;
  
  /**
    The maximum distance that will be traced inside the cloud layer. (kilometers)
  **/
  @:uproperty public var TracingMaxDistance : unreal.Float32;
  
  /**
    The maximum distance of the volumetric surface before which we will accept to start tracing. (kilometers)
  **/
  @:uproperty public var TracingStartMaxDistance : unreal.Float32;
  
  /**
    The altitude at which the cloud layer ends. (kilometers above the ground)
  **/
  @:uproperty public var LayerHeight : unreal.Float32;
  
  /**
    The altitude at which the cloud layer starts. (kilometers above the ground)
  **/
  @:uproperty public var LayerBottomAltitude : unreal.Float32;
  @:ufunction(BlueprintCallable) @:final public function SetLayerBottomAltitude(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetLayerHeight(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetTracingStartMaxDistance(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetTracingMaxDistance(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetPlanetRadius(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetGroundAlbedo(NewValue : unreal.FColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetbUsePerSampleAtmosphericLightTransmittance(NewValue : Bool) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSkyLightCloudBottomOcclusion(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetViewSampleCountScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetReflectionSampleCountScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetShadowViewSampleCountScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetShadowReflectionSampleCountScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetShadowTracingDistance(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetStopTracingTransmittanceThreshold(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMaterial(NewValue : unreal.UMaterialInterface) : Void;
  
}
