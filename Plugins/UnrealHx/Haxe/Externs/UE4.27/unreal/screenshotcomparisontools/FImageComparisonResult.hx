/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.screenshotcomparisontools;

/**
  This struct holds the results of comparing an incoming image from a platform with an approved image that exists under the
  project hierarchy.
  
  All paths in this structure should be portable. Test results (including this struct) result can be serialized to
  JSON and stored on the network as during automation runs then opened in the editor to commit / approve changes
  to the local project.
**/
@:umodule("ScreenShotComparisonTools")
@:glueCppIncludes("Public/ImageComparer.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FImageComparisonResult {
  
  /**
    Error message that can be set during a comparison
  **/
  @:uproperty public var Version : unreal.Int32;
  
  /**
    Error message that can be set during a comparison
  **/
  @:uproperty public var ErrorMessage : unreal.FText;
  
  /**
    Tolerance values for comparison
  **/
  @:uproperty public var Tolerance : unreal.screenshotcomparisontools.FImageTolerance;
  
  /**
    Global difference found during comparison
  **/
  @:uproperty public var GlobalDifference : unreal.Float64;
  
  /**
    Largest local difference found during comparison
  **/
  @:uproperty public var MaxLocalDifference : unreal.Float64;
  
  /**
    Name of the delta image saved for the report.  Path is relative to the location of the metadata for the report
  **/
  @:uproperty public var ReportComparisonFilePath : unreal.FString;
  
  /**
    name of the incoming file saved for the report.  Path is relative to the location of the metadata for the report
  **/
  @:uproperty public var ReportIncomingFilePath : unreal.FString;
  
  /**
    Name of the approved file saved for the report. Path is relative to the location of the metadata for the report
  **/
  @:uproperty public var ReportApprovedFilePath : unreal.FString;
  
  /**
    Path to the delta image between the ground-truth and the incoming file. Relative to the project directory, only valid when a test is run locally
  **/
  @:uproperty public var ComparisonFilePath : unreal.FString;
  
  /**
    Path to the file that was generated in the test. Relative to the project directory, only valid when a test is run locally
  **/
  @:uproperty public var IncomingFilePath : unreal.FString;
  
  /**
    Path to the file that was considered as the ground-truth. Relative to the project directory
  **/
  @:uproperty public var ApprovedFilePath : unreal.FString;
  
  /**
    Path to a folder where the idealized ground-truth for this comparison would be. Relative to the project directory.
    Note: This path may not exist a fallback is being used for approval, or if there is no approved
    image at all. Comparing this value with the FPaths::GetPath(ApprovedFilePath) can be used to determine that.
    (the IsIdeal() function performs that check).
  **/
  @:uproperty public var IdealApprovedFolderPath : unreal.FString;
  
  /**
    RHI that the incoming image was generated with
  **/
  @:uproperty public var SourceRHI : unreal.FString;
  
  /**
    Platform that the incoming image was generated on
  **/
  @:uproperty public var SourcePlatform : unreal.FString;
  
  /**
    Time that the comparison was performed
  **/
  @:uproperty public var CreationTime : unreal.FDateTime;
  
}
