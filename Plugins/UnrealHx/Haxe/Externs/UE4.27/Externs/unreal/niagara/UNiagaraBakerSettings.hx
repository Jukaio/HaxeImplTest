/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

@:umodule("Niagara")
@:glueCppIncludes("NiagaraBakerSettings.h")
@:uextern @:uclass extern class UNiagaraBakerSettings extends unreal.UObject {
  
  /**
    Should we render just the component or the whole scene.
  **/
  @:uproperty public var bRenderComponentOnly : Bool;
  
  /**
    Custom aspect ratio to use rather than using the width & height to automatically calculate.
  **/
  @:uproperty public var CameraAspectRatio : unreal.Float32;
  @:uproperty public var bUseCameraAspectRatio : Bool;
  
  /**
    Camera Orthographic width to use with in orthographic mode.
  **/
  @:uproperty public var CameraOrthoWidth : unreal.Float32;
  
  /**
    Camera FOV to use when in perspective mode.
  **/
  @:uproperty public var CameraFOV : unreal.Float32;
  
  /**
    Perspective camera orbit distance.
  **/
  @:uproperty public var CameraOrbitDistance : unreal.Float32;
  
  /**
    Current active viewport we will render from.
  **/
  @:uproperty public var CameraViewportMode : unreal.niagara.ENiagaraBakerViewMode;
  
  /**
    List of output textures we will generated.
  **/
  @:uproperty public var OutputTextures : unreal.TArray<unreal.niagara.FNiagaraBakerTextureSettings>;
  
  /**
    Number of frames in each dimension.
  **/
  @:uproperty public var FramesPerDimension : unreal.FIntPoint;
  
  /**
    Should the preview playback as looping or not.
  **/
  @:uproperty public var bPreviewLooping : Bool;
  
  /**
    The frame rate to run the simulation at during capturing.
    This is only used for the preview view and calculating the number of ticks to execute
    as we capture the generated texture.
  **/
  @:uproperty public var FramesPerSecond : unreal.Int32;
  
  /**
    Duration in seconds to take the capture over.
  **/
  @:uproperty public var DurationSeconds : unreal.Float32;
  
  /**
    This is the start time of the simultion where we being the capture.
    I.e. 2.0 would mean the simulation warms up by 2 seconds before we begin capturing.
  **/
  @:uproperty public var StartSeconds : unreal.Float32;
  
}
