// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/synthesis/fmodularsynthpreset.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class FModularSynthPreset_Glue {
public static function get_Patches(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_Patches(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ChorusFrequency(self:unreal.VariantPtr):cpp.Float32;
public static function set_ChorusFrequency(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ChorusFeedback(self:unreal.VariantPtr):cpp.Float32;
public static function set_ChorusFeedback(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ChorusDepth(self:unreal.VariantPtr):cpp.Float32;
public static function set_ChorusDepth(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bChorusEnabled(self:unreal.VariantPtr):Bool;
public static function set_bChorusEnabled(self:unreal.VariantPtr, value:Bool):Void;
public static function get_StereoDelayRatio(self:unreal.VariantPtr):cpp.Float32;
public static function set_StereoDelayRatio(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_StereoDelayWetlevel(self:unreal.VariantPtr):cpp.Float32;
public static function set_StereoDelayWetlevel(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_StereoDelayFeedback(self:unreal.VariantPtr):cpp.Float32;
public static function set_StereoDelayFeedback(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_StereoDelayTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_StereoDelayTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_StereoDelayMode(self:unreal.VariantPtr):Int;
public static function set_StereoDelayMode(self:unreal.VariantPtr, value:Int):Void;
public static function get_bStereoDelayEnabled(self:unreal.VariantPtr):Bool;
public static function set_bStereoDelayEnabled(self:unreal.VariantPtr, value:Bool):Void;
public static function get_FilterAlgorithm(self:unreal.VariantPtr):Int;
public static function set_FilterAlgorithm(self:unreal.VariantPtr, value:Int):Void;
public static function get_FilterType(self:unreal.VariantPtr):Int;
public static function set_FilterType(self:unreal.VariantPtr, value:Int):Void;
public static function get_FilterQ(self:unreal.VariantPtr):cpp.Float32;
public static function set_FilterQ(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_FilterFrequency(self:unreal.VariantPtr):cpp.Float32;
public static function set_FilterFrequency(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bRetrigger(self:unreal.VariantPtr):Bool;
public static function set_bRetrigger(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bLegato(self:unreal.VariantPtr):Bool;
public static function set_bLegato(self:unreal.VariantPtr, value:Bool):Void;
public static function get_ModulationEnvelopeReleaseTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_ModulationEnvelopeReleaseTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ModulationEnvelopeSustainGain(self:unreal.VariantPtr):cpp.Float32;
public static function set_ModulationEnvelopeSustainGain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ModulationEnvelopeDecayTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_ModulationEnvelopeDecayTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ModulationEnvelopeAttackTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_ModulationEnvelopeAttackTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ModulationEnvelopeDepth(self:unreal.VariantPtr):cpp.Float32;
public static function set_ModulationEnvelopeDepth(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bInvertModulationEnvelopeBias(self:unreal.VariantPtr):Bool;
public static function set_bInvertModulationEnvelopeBias(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bInvertModulationEnvelope(self:unreal.VariantPtr):Bool;
public static function set_bInvertModulationEnvelope(self:unreal.VariantPtr, value:Bool):Void;
public static function get_ModEnvBiasPatchType(self:unreal.VariantPtr):Int;
public static function set_ModEnvBiasPatchType(self:unreal.VariantPtr, value:Int):Void;
public static function get_ModEnvPatchType(self:unreal.VariantPtr):Int;
public static function set_ModEnvPatchType(self:unreal.VariantPtr, value:Int):Void;
public static function get_ReleaseTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_ReleaseTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_SustainGain(self:unreal.VariantPtr):cpp.Float32;
public static function set_SustainGain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_DecayTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_DecayTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_AttackTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_AttackTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_GainDb(self:unreal.VariantPtr):cpp.Float32;
public static function set_GainDb(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LFO2PatchType(self:unreal.VariantPtr):Int;
public static function set_LFO2PatchType(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO2Mode(self:unreal.VariantPtr):Int;
public static function set_LFO2Mode(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO2Type(self:unreal.VariantPtr):Int;
public static function set_LFO2Type(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO2Gain(self:unreal.VariantPtr):cpp.Float32;
public static function set_LFO2Gain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LFO2Frequency(self:unreal.VariantPtr):cpp.Float32;
public static function set_LFO2Frequency(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LFO1PatchType(self:unreal.VariantPtr):Int;
public static function set_LFO1PatchType(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO1Mode(self:unreal.VariantPtr):Int;
public static function set_LFO1Mode(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO1Type(self:unreal.VariantPtr):Int;
public static function set_LFO1Type(self:unreal.VariantPtr, value:Int):Void;
public static function get_LFO1Gain(self:unreal.VariantPtr):cpp.Float32;
public static function set_LFO1Gain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_LFO1Frequency(self:unreal.VariantPtr):cpp.Float32;
public static function set_LFO1Frequency(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Pan(self:unreal.VariantPtr):cpp.Float32;
public static function set_Pan(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Spread(self:unreal.VariantPtr):cpp.Float32;
public static function set_Spread(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bEnableOscillatorSync(self:unreal.VariantPtr):Bool;
public static function set_bEnableOscillatorSync(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bEnableUnison(self:unreal.VariantPtr):Bool;
public static function set_bEnableUnison(self:unreal.VariantPtr, value:Bool):Void;
public static function get_Portamento(self:unreal.VariantPtr):cpp.Float32;
public static function set_Portamento(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2PulseWidth(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc2PulseWidth(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2Cents(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc2Cents(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2Semitones(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc2Semitones(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2Octave(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc2Octave(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2Gain(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc2Gain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc2Type(self:unreal.VariantPtr):Int;
public static function set_Osc2Type(self:unreal.VariantPtr, value:Int):Void;
public static function get_Osc1PulseWidth(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc1PulseWidth(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc1Cents(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc1Cents(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc1Semitones(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc1Semitones(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc1Octave(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc1Octave(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc1Gain(self:unreal.VariantPtr):cpp.Float32;
public static function set_Osc1Gain(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_Osc1Type(self:unreal.VariantPtr):Int;
public static function set_Osc1Type(self:unreal.VariantPtr, value:Int):Void;
public static function get_bEnablePolyphony(self:unreal.VariantPtr):Bool;
public static function set_bEnablePolyphony(self:unreal.VariantPtr, value:Bool):Void;
public static function copyNew(self:unreal.VariantPtr):unreal.VariantPtr;
public static function copy(self:unreal.VariantPtr):unreal.VariantPtr;
public static function assign(self:unreal.VariantPtr, val:unreal.VariantPtr):Void;
public static function equals(self:unreal.VariantPtr, other:unreal.VariantPtr):Bool;
}