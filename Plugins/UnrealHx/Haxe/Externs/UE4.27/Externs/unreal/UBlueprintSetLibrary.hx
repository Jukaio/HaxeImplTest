/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Kismet/BlueprintSetLibrary.h")
@:uextern @:uclass extern class UBlueprintSetLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Adds item to set
    
    @param       TargetSet               The set to add item to
    @param       NewItem                 The item to add to the set
  **/
  @:ufunction(BlueprintCallable) static public function Set_Add(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, NewItem : unreal.Int32) : Void;
  
  /**
    Adds all elements from an Array to a Set
    
    @param       TargetSet               The set to search for the item
    @param       NewItems                The items to add to the set
  **/
  @:ufunction(BlueprintCallable) static public function Set_AddItems(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, NewItems : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    Remove item from set. Output value indicates if something was actually removed. False
    indicates no equivalent item was found.
    
    @param       TargetSet               The set to remove from
    @param       Item                    The item to remove from the set
    @return      True if an item was removed (False indicates no equivalent item was present)
  **/
  @:ufunction(BlueprintCallable) static public function Set_Remove(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Item : unreal.Int32) : Bool;
  
  /**
    Removes all elements in an Array from a set.
    
    @param       TargetSet               The set to remove from
    @param       Items                   The items to remove from the set
  **/
  @:ufunction(BlueprintCallable) static public function Set_RemoveItems(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Items : unreal.Const<unreal.PRef<unreal.TArray<unreal.Int32>>>) : Void;
  
  /**
    Outputs an Array containing copies of the entries of a Set.
    
    @param               A               Set
    @param               Result  Array
  **/
  @:ufunction(BlueprintCallable) static public function Set_ToArray(A : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Result : unreal.PRef<unreal.TArray<unreal.Int32>>) : Void;
  
  /**
    Clear a set, removes all content.
    
    @param       TargetSet               The set to clear
  **/
  @:ufunction(BlueprintCallable) static public function Set_Clear(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>) : Void;
  
  /**
    Get the number of items in a set.
    
    @param       TargetSet               The set to get the length of
    @return      The length of the set
  **/
  @:ufunction(BlueprintCallable) static public function Set_Length(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>) : unreal.Int32;
  
  /**
    Returns true if the set contains the given item.
    
    @param       TargetSet               The set to search for the item
    @param       ItemToFind              The item to look for
    @return      True if the item was found within the set
  **/
  @:ufunction(BlueprintCallable) static public function Set_Contains(TargetSet : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, ItemToFind : unreal.Int32) : Bool;
  
  /**
    Assigns Result to the intersection of Set A and Set B. That is, Result will contain
    all elements that are in both Set A and Set B. To intersect with the empty set use
    Clear.
    
    @param               A               One set to intersect
    @param               B               Another set to intersect
    @param               Result  Set to store results in
  **/
  @:ufunction(BlueprintCallable) static public function Set_Intersection(A : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, B : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Result : unreal.PRef<unreal.TSet<unreal.Int32>>) : Void;
  
  /**
    Assigns Result to the union of two sets, A and B. That is, Result will contain
    all elements that are in Set A and in addition all elements in Set B. Note that
    a Set is a collection of unique elements, so duplicates will be eliminated.
    
    @param               A               One set to union
    @param               B               Another set to union
    @param               Result  Set to store results in
  **/
  @:ufunction(BlueprintCallable) static public function Set_Union(A : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, B : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Result : unreal.PRef<unreal.TSet<unreal.Int32>>) : Void;
  
  /**
    Assigns Result to the relative difference of two sets, A and B. That is, Result will
    contain  all elements that are in Set A but are not found in Set B. Note that the
    difference between two sets  is not commutative. The Set whose elements you wish to
    preserve should be the first (top) parameter. Also called the relative complement.
    
    @param               A               Starting set
    @param               B               Set of elements to remove from set A
    @param               Result  Set containing all elements in A that are not found in B
  **/
  @:ufunction(BlueprintCallable) static public function Set_Difference(A : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, B : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>, Result : unreal.PRef<unreal.TSet<unreal.Int32>>) : Void;
  
  /**
    Not exposed to users. Supports setting a set property on an object by name.
  **/
  @:ufunction(BlueprintCallable) static public function SetSetPropertyByName(Object : unreal.UObject, PropertyName : unreal.FName, Value : unreal.Const<unreal.PRef<unreal.TSet<unreal.Int32>>>) : Void;
  
}
