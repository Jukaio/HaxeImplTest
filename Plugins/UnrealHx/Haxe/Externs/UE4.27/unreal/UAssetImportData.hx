/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  todo: Make this class better suited to multiple import paths - maybe have FAssetImportInfo use a map rather than array?
**/
@:glueCppIncludes("EditorFramework/AssetImportData.h")
@:uextern @:uclass extern class UAssetImportData extends unreal.UObject {
  #if WITH_EDITORONLY_DATA
  
  /**
    Source file data describing the files that were used to import this asset.
  **/
  @:uproperty public var SourceData : unreal.FAssetImportInfo;
  
  /**
    Date/Time-stamp of the file from the last import
  **/
  @:deprecated @:uproperty public var SourceFileTimestamp_DEPRECATED : unreal.FString;
  
  /**
    Path to the resource used to construct this static mesh. Relative to the object's package, BaseDir() or absolute
  **/
  @:deprecated @:uproperty public var SourceFilePath_DEPRECATED : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  #if WITH_EDITOR
  
  /**
    Add or update a filename at the specified index. If the index is greater then the number of source file,
    it will add empty filenames to fill up to the specified index. The timespan and MD5 will be computed.
    
    @Param InPath: The filename we want to set at the specified index.
    @Param Index: This specify the source file index in case you have many source file for an imported asset
    @Param SourceFileLabel: Optional, can be empty string, the label we want to see in the UI when displaying the source file. (useful for multi source)
  **/
  @:ufunction(BlueprintCallable) @:final public function ScriptedAddFilename(InPath : unreal.FString, Index : unreal.Int32, SourceFileLabel : unreal.FString) : Void;
  
  /**
    Helper function to return the first filename stored in this data. The resulting filename will be absolute (ie, not relative to the asset).
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function K2_GetFirstFilename() : unreal.FString;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function K2_ExtractFilenames() : unreal.TArray<unreal.FString>;
  #end // WITH_EDITOR
  
}
