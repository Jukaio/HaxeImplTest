// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/alodactor.hx
package unreal;
/**
  
  LODActor is an instance of an autogenerated StaticMesh Actors by Hierarchical LOD System
  This is essentially just StaticMeshActor that you can't move or edit, but it contains multiple actors reference
  
  @see https://docs.unrealengine.com/latest/INT/Engine/Actors/LODActor/
  @see UStaticMesh
  
**/

@:umodule("Unreal")
@:glueCppIncludes("Engine/LODActor.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.ALODActor_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.ALODActor")) #end
class ALODActor #if !macro extends unreal.AActor #end {
  #if !macro 
  /**
    
    Override screen size value used in mesh reduction, when creating the proxy mesh
    
  **/
  
  @:uproperty
  public var ScreenSize(get,set):Int;
  /**
    
    Flag whether or not to use the override ScreenSize when creating the proxy mesh
    
  **/
  
  @:uproperty
  public var bOverrideScreenSize(get,set):Bool;
  /**
    
    Override transition screen size value, determines the screen size at which the proxy is visible
    The screen size is based around the projected diameter of the bounding
    sphere of the model. i.e. 0.5 means half the screen's maximum dimension.
    
  **/
  
  @:uproperty
  public var TransitionScreenSize(get,set):cpp.Float32;
  /**
    
    Flag whether or not to use the override TransitionScreenSize for this proxy mesh
    
  **/
  
  @:uproperty
  public var bOverrideTransitionScreenSize(get,set):Bool;
  /**
    
    Override Material Settings, used when creating the proxy mesh
    
  **/
  
  @:uproperty
  public var MaterialSettings(get,set):unreal.PPtr<unreal.FMaterialProxySettings>;
  /**
    
    Flag whether or not to use the override MaterialSettings when creating the proxy mesh
    
  **/
  
  @:uproperty
  public var bOverrideMaterialMergeSettings(get,set):Bool;
  /**
    
    Cached number of triangles contained in the SubActors
    
  **/
  
  @:uproperty
  public var NumTrianglesInMergedMesh(get,set):unreal.FakeUInt32;
  /**
    
    Cached number of triangles contained in the SubActors
    
  **/
  
  @:uproperty
  public var NumTrianglesInSubActors(get,set):unreal.FakeUInt32;
  @:uproperty
  public var CachedNumHLODLevels(get,set):cpp.UInt8;
  @:uproperty
  public var SubActors(get,set):unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.AActor>>>;
  /**
    
    The hierarchy level of this actor; the first tier of HLOD is level 1, the second tier is level 2 and so on.
    
  **/
  
  @:uproperty
  public var LODLevel(get,set):Int;
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.ALODActor_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("LODActor", "unreal.ALODActor");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.ALODActor(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.ALODActor {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_ScreenSize(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::ALODActor_Glue_obj::get_ScreenSize(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->ScreenSize;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ScreenSize() : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ScreenSize");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ScreenSize");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_ScreenSize(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_ScreenSize(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_ScreenSize(unreal::UIntPtr self, int value) {\n\t( (ALODActor *) self )->ScreenSize = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ScreenSize(value : Int) : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ScreenSize");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ScreenSize", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = value;
    uhx.glues.ALODActor_Glue.set_ScreenSize(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bOverrideScreenSize(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::ALODActor_Glue_obj::get_bOverrideScreenSize(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->bOverrideScreenSize;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bOverrideScreenSize() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bOverrideScreenSize");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bOverrideScreenSize");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_bOverrideScreenSize(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bOverrideScreenSize(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_bOverrideScreenSize(unreal::UIntPtr self, bool value) {\n\t( (ALODActor *) self )->bOverrideScreenSize = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bOverrideScreenSize(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bOverrideScreenSize");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bOverrideScreenSize", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.ALODActor_Glue.set_bOverrideScreenSize(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_TransitionScreenSize(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::ALODActor_Glue_obj::get_TransitionScreenSize(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->TransitionScreenSize;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_TransitionScreenSize() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_TransitionScreenSize");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "TransitionScreenSize");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_TransitionScreenSize(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_TransitionScreenSize(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_TransitionScreenSize(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (ALODActor *) self )->TransitionScreenSize = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_TransitionScreenSize(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_TransitionScreenSize");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "TransitionScreenSize", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.ALODActor_Glue.set_TransitionScreenSize(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bOverrideTransitionScreenSize(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::ALODActor_Glue_obj::get_bOverrideTransitionScreenSize(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->bOverrideTransitionScreenSize;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bOverrideTransitionScreenSize() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bOverrideTransitionScreenSize");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bOverrideTransitionScreenSize");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_bOverrideTransitionScreenSize(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bOverrideTransitionScreenSize(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_bOverrideTransitionScreenSize(unreal::UIntPtr self, bool value) {\n\t( (ALODActor *) self )->bOverrideTransitionScreenSize = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bOverrideTransitionScreenSize(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bOverrideTransitionScreenSize");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bOverrideTransitionScreenSize", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.ALODActor_Glue.set_bOverrideTransitionScreenSize(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h", "uhx/Wrapper.h", "Classes/Engine/MaterialMerging.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_MaterialSettings(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::ALODActor_Glue_obj::get_MaterialSettings(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (ALODActor *) self )->MaterialSettings)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_MaterialSettings() : unreal.PPtr<unreal.FMaterialProxySettings> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_MaterialSettings");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "MaterialSettings");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FMaterialProxySettings.fromPointer( uhx.glues.ALODActor_Glue.get_MaterialSettings(uhx_arg_0) ) : unreal.PPtr<unreal.FMaterialProxySettings> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h", "uhx/Wrapper.h", "Classes/Engine/MaterialMerging.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_MaterialSettings(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_MaterialSettings(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (ALODActor *) self )->MaterialSettings = *::uhx::StructHelper< FMaterialProxySettings >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_MaterialSettings(value : unreal.FMaterialProxySettings) : unreal.FMaterialProxySettings {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_MaterialSettings");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "MaterialSettings", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.ALODActor_Glue.set_MaterialSettings(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bOverrideMaterialMergeSettings(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::ALODActor_Glue_obj::get_bOverrideMaterialMergeSettings(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->bOverrideMaterialMergeSettings;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bOverrideMaterialMergeSettings() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bOverrideMaterialMergeSettings");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bOverrideMaterialMergeSettings");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_bOverrideMaterialMergeSettings(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bOverrideMaterialMergeSettings(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_bOverrideMaterialMergeSettings(unreal::UIntPtr self, bool value) {\n\t( (ALODActor *) self )->bOverrideMaterialMergeSettings = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bOverrideMaterialMergeSettings(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bOverrideMaterialMergeSettings");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bOverrideMaterialMergeSettings", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.ALODActor_Glue.set_bOverrideMaterialMergeSettings(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::UInt32 get_NumTrianglesInMergedMesh(unreal::UIntPtr self);")
  @:glueCppCode("cpp::UInt32 uhx::glues::ALODActor_Glue_obj::get_NumTrianglesInMergedMesh(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->NumTrianglesInMergedMesh;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_NumTrianglesInMergedMesh() : unreal.FakeUInt32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_NumTrianglesInMergedMesh");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "NumTrianglesInMergedMesh");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return (cast (uhx.glues.ALODActor_Glue.get_NumTrianglesInMergedMesh(uhx_arg_0)) : unreal.FakeUInt32);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_NumTrianglesInMergedMesh(unreal::UIntPtr self, cpp::UInt32 value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_NumTrianglesInMergedMesh(unreal::UIntPtr self, cpp::UInt32 value) {\n\t( (ALODActor *) self )->NumTrianglesInMergedMesh = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_NumTrianglesInMergedMesh(value : unreal.FakeUInt32) : unreal.FakeUInt32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_NumTrianglesInMergedMesh");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "NumTrianglesInMergedMesh", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.UInt32 = (cast (value) : cpp.UInt32);
    uhx.glues.ALODActor_Glue.set_NumTrianglesInMergedMesh(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::UInt32 get_NumTrianglesInSubActors(unreal::UIntPtr self);")
  @:glueCppCode("cpp::UInt32 uhx::glues::ALODActor_Glue_obj::get_NumTrianglesInSubActors(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->NumTrianglesInSubActors;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_NumTrianglesInSubActors() : unreal.FakeUInt32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_NumTrianglesInSubActors");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "NumTrianglesInSubActors");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return (cast (uhx.glues.ALODActor_Glue.get_NumTrianglesInSubActors(uhx_arg_0)) : unreal.FakeUInt32);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_NumTrianglesInSubActors(unreal::UIntPtr self, cpp::UInt32 value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_NumTrianglesInSubActors(unreal::UIntPtr self, cpp::UInt32 value) {\n\t( (ALODActor *) self )->NumTrianglesInSubActors = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_NumTrianglesInSubActors(value : unreal.FakeUInt32) : unreal.FakeUInt32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_NumTrianglesInSubActors");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "NumTrianglesInSubActors", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.UInt32 = (cast (value) : cpp.UInt32);
    uhx.glues.ALODActor_Glue.set_NumTrianglesInSubActors(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::UInt8 get_CachedNumHLODLevels(unreal::UIntPtr self);")
  @:glueCppCode("cpp::UInt8 uhx::glues::ALODActor_Glue_obj::get_CachedNumHLODLevels(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->CachedNumHLODLevels;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CachedNumHLODLevels() : cpp.UInt8 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CachedNumHLODLevels");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CachedNumHLODLevels");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_CachedNumHLODLevels(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_CachedNumHLODLevels(unreal::UIntPtr self, cpp::UInt8 value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_CachedNumHLODLevels(unreal::UIntPtr self, cpp::UInt8 value) {\n\t( (ALODActor *) self )->CachedNumHLODLevels = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CachedNumHLODLevels(value : cpp.UInt8) : cpp.UInt8 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CachedNumHLODLevels");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CachedNumHLODLevels", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.UInt8 = value;
    uhx.glues.ALODActor_Glue.set_CachedNumHLODLevels(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h", "uhx/Wrapper.h", "Containers/Array.h", "GameFramework/Actor.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_SubActors(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::ALODActor_Glue_obj::get_SubActors(unreal::UIntPtr self) {\n\treturn ::uhx::TemplateHelper<TArray<AActor *>>::fromPointer( (&(( (ALODActor *) self )->SubActors)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_SubActors() : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.AActor>>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_SubActors");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "SubActors");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.TArrayImpl.fromPointer( uhx.glues.ALODActor_Glue.get_SubActors(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.AActor>>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h", "uhx/Wrapper.h", "Containers/Array.h", "GameFramework/Actor.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_SubActors(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_SubActors(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (ALODActor *) self )->SubActors = *::uhx::TemplateHelper< TArray<AActor *> >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_SubActors(value : unreal.TArray<unreal.AActor>) : unreal.TArray<unreal.AActor> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_SubActors");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "SubActors", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.ALODActor_Glue.set_SubActors(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_LODLevel(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::ALODActor_Glue_obj::get_LODLevel(unreal::UIntPtr self) {\n\treturn ( (ALODActor *) self )->LODLevel;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_LODLevel() : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_LODLevel");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "LODLevel");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.ALODActor_Glue.get_LODLevel(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/LODActor.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_LODLevel(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::ALODActor_Glue_obj::set_LODLevel(unreal::UIntPtr self, int value) {\n\t( (ALODActor *) self )->LODLevel = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_LODLevel(value : Int) : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_LODLevel");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "LODLevel", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = value;
    uhx.glues.ALODActor_Glue.set_LODLevel(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::ALODActor_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (ALODActor::StaticClass()) );\n}")
  @:ifFeature("unreal.ALODActor.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("LODActor");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.ALODActor_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
