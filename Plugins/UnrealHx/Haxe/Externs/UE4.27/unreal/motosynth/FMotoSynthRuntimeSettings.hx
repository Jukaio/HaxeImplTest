/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.motosynth;

@:umodule("MotoSynth")
@:glueCppIncludes("Public/MotoSynthPreset.h")
@:uextern @:ustruct extern class FMotoSynthRuntimeSettings {
  
  /**
    Delay ratio of left/right channels for stereo widener effect
  **/
  @:uproperty public var StereoWidenerFilterQ : unreal.Float32;
  
  /**
    Delay ratio of left/right channels for stereo widener effect
  **/
  @:uproperty public var StereoWidenerFilterFrequency : unreal.Float32;
  
  /**
    Delay ratio of left/right channels for stereo widener effect
  **/
  @:uproperty public var bStereoWidenerFilterEnabled : Bool;
  
  /**
    Delay ratio of left/right channels for stereo widener effect
  **/
  @:uproperty public var StereoWidenerDelayRatio : unreal.Float32;
  
  /**
    Dry level of stereo delay used for stereo widener
  **/
  @:uproperty public var StereoWidenerDryLevel : unreal.Float32;
  
  /**
    Wet level of stereo delay used for stereo widener
  **/
  @:uproperty public var StereoWidenerWetlevel : unreal.Float32;
  
  /**
    Amount of feedback for stereo widener
  **/
  @:uproperty public var StereoFeedback : unreal.Float32;
  
  /**
    If the stereo widener is enabled
  **/
  @:uproperty public var StereoDelayMsec : unreal.Float32;
  
  /**
    If the stereo widener is enabled
  **/
  @:uproperty public var bStereoWidenerEnabled : Bool;
  
  /**
    Motosynth source to use for granular engine deceleration
  **/
  @:uproperty public var DecelerationSource : unreal.motosynth.UMotoSynthSource;
  
  /**
    Motosynth source to use for granular engine acceleration
  **/
  @:uproperty public var AccelerationSource : unreal.motosynth.UMotoSynthSource;
  
  /**
    Number of samples to cross fade grains when on a constant-RPM state. More crossfaded samples can reduce the robotic sound.
  **/
  @:uproperty public var GrainCrossfadeSamplesForConstantRPMs : unreal.Int32;
  
  /**
    Random grain table offset for cases where RPM is constant. Allows random shuffling of grains to avoid a robotic sound.
  **/
  @:uproperty public var GrainTableRandomOffsetForConstantRPMs : unreal.Int32;
  
  /**
    How many grain-table entries to use per runtime grain
  **/
  @:uproperty public var NumGrainTableEntriesPerGrain : unreal.Int32;
  
  /**
    The volume of the granular engine
  **/
  @:uproperty public var NumSamplesToCrossfadeBetweenGrains : unreal.Int32;
  
  /**
    The pitch scale of the granular engine
  **/
  @:uproperty public var GranularEnginePitchScale : unreal.Float32;
  
  /**
    The volume of the granular engine
  **/
  @:uproperty public var GranularEngineVolume : unreal.Float32;
  
  /**
    If the granular engine is enabled
  **/
  @:uproperty public var bGranularEngineEnabled : Bool;
  
  /**
    Octave shift of the synth
  **/
  @:uproperty public var SynthOctaveShift : unreal.Int32;
  
  /**
    The filter frequency of the synth tone
  **/
  @:uproperty public var SynthToneFilterFrequency : unreal.Float32;
  
  /**
    The volume of the synth tone
  **/
  @:uproperty public var SynthToneVolume : unreal.Float32;
  
  /**
    If the synth tone is enabled
  **/
  @:uproperty public var bSynthToneEnabled : Bool;
  
}
