// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/alevelscriptactor.hx
package unreal;
/**
  
  ALevelScriptActor is the base class for classes generated by
  ULevelScriptBlueprints. ALevelScriptActor instances are hidden actors that
  exist within a level, and can execute level-wide logic (operating on specific
  actor instances within the level). The level-script's functionality is defined
  inside the ULevelScriptBlueprint itself (using the blueprint's node-based
  interface).
  
  @see AActor
  @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/Types/LevelBlueprint/index.html
  @see ULevelScriptBlueprint
  @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/index.html
  @see UBlueprint
  
**/

@:umodule("Unreal")
@:glueCppIncludes("Engine/LevelScriptActor.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.ALevelScriptActor_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.ALevelScriptActor")) #end
class ALevelScriptActor #if !macro extends unreal.AActor #end {
  #if !macro 
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.ALevelScriptActor_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("LevelScriptActor", "unreal.ALevelScriptActor");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.ALevelScriptActor(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.ALevelScriptActor {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  /**
    
    Tries to find an event named "EventName" on all other levels, and calls it
    
  **/
  
  @:glueCppIncludes("Engine/LevelScriptActor.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static bool RemoteEvent(unreal::UIntPtr self, unreal::VariantPtr EventName);")
  @:glueCppCode("bool uhx::glues::ALevelScriptActor_Glue_obj::RemoteEvent(unreal::UIntPtr self, unreal::VariantPtr EventName) {\n\treturn ( (ALevelScriptActor *) self )->RemoteEvent(*::uhx::StructHelper< FName >::getPointer(EventName));\n}")
  @:ufunction(BlueprintCallable)
  public function RemoteEvent(EventName : unreal.FName) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "RemoteEvent");
    #end
    #if cppia
    return unreal.ReflectAPI.callMethod(this, "RemoteEvent", [EventName]);
    
    #else
    if (EventName == null) uhx.internal.HaxeHelpers.nullDeref("EventName");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = EventName;
    return uhx.glues.ALevelScriptActor_Glue.RemoteEvent(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  /**
    
    Sets the cinematic mode on all PlayerControllers
    
    @param       bInCinematicMode        specify true if the player is entering cinematic mode; false if the player is leaving cinematic mode.
    @param       bHidePlayer                     specify true to hide the player's pawn (only relevant if bInCinematicMode is true)
    @param       bAffectsHUD                     specify true if we should show/hide the HUD to match the value of bCinematicMode
    @param       bAffectsMovement        specify true to disable movement in cinematic mode, enable it when leaving
    @param       bAffectsTurning         specify true to disable turning in cinematic mode or enable it when leaving
    
  **/
  
  @:glueCppIncludes("Engine/LevelScriptActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void SetCinematicMode(unreal::UIntPtr self, bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);")
  @:glueCppCode("void uhx::glues::ALevelScriptActor_Glue_obj::SetCinematicMode(unreal::UIntPtr self, bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning) {\n\t( (ALevelScriptActor *) self )->SetCinematicMode(bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning);\n}")
  @:value({ bAffectsTurning : false, bAffectsMovement : false, bAffectsHUD : true, bHidePlayer : true })
  @:ufunction(BlueprintCallable)
  public function SetCinematicMode(bCinematicMode : Bool, ?bHidePlayer : Bool, ?bAffectsHUD : Bool, ?bAffectsMovement : Bool, ?bAffectsTurning : Bool) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "SetCinematicMode");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "SetCinematicMode", [bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = bCinematicMode;
    var uhx_arg_2:Bool = bHidePlayer != null ? (bHidePlayer) : ((true : Bool));
    var uhx_arg_3:Bool = bAffectsHUD != null ? (bAffectsHUD) : ((true : Bool));
    var uhx_arg_4:Bool = bAffectsMovement != null ? (bAffectsMovement) : ((false : Bool));
    var uhx_arg_5:Bool = bAffectsTurning != null ? (bAffectsTurning) : ((false : Bool));
    uhx.glues.ALevelScriptActor_Glue.SetCinematicMode(uhx_arg_0, uhx_arg_1, uhx_arg_2, uhx_arg_3, uhx_arg_4, uhx_arg_5);
    
    #end
    
  }
  /**
    
    @todo document
    
  **/
  
  @:glueCppIncludes("Engine/LevelScriptActor.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void LevelReset(unreal::UIntPtr self);")
  @:glueCppCode("void uhx::glues::ALevelScriptActor_Glue_obj::LevelReset(unreal::UIntPtr self) {\n\t( (ALevelScriptActor *) self )->LevelReset();\n}")
  @:ufunction(BlueprintImplementableEvent)
  public function LevelReset() : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "LevelReset");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "LevelReset", null);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    uhx.glues.ALevelScriptActor_Glue.LevelReset(uhx_arg_0);
    
    #end
    
  }
  /**
    
    Event called on world origin location changes
    
    @param       OldOriginLocation       Previous world origin location
    @param       NewOriginLocation       New world origin location
    
  **/
  
  @:glueCppIncludes("Engine/LevelScriptActor.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void WorldOriginLocationChanged(unreal::UIntPtr self, unreal::VariantPtr OldOriginLocation, unreal::VariantPtr NewOriginLocation);")
  @:glueCppCode("void uhx::glues::ALevelScriptActor_Glue_obj::WorldOriginLocationChanged(unreal::UIntPtr self, unreal::VariantPtr OldOriginLocation, unreal::VariantPtr NewOriginLocation) {\n\t( (ALevelScriptActor *) self )->WorldOriginLocationChanged(*::uhx::StructHelper< FIntVector >::getPointer(OldOriginLocation), *::uhx::StructHelper< FIntVector >::getPointer(NewOriginLocation));\n}")
  @:ufunction(BlueprintImplementableEvent)
  public function WorldOriginLocationChanged(OldOriginLocation : unreal.FIntVector, NewOriginLocation : unreal.FIntVector) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "WorldOriginLocationChanged");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "WorldOriginLocationChanged", [OldOriginLocation, NewOriginLocation]);
    
    #else
    if (OldOriginLocation == null) uhx.internal.HaxeHelpers.nullDeref("OldOriginLocation");
    if (NewOriginLocation == null) uhx.internal.HaxeHelpers.nullDeref("NewOriginLocation");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = OldOriginLocation;
    var uhx_arg_2:unreal.VariantPtr = NewOriginLocation;
    uhx.glues.ALevelScriptActor_Glue.WorldOriginLocationChanged(uhx_arg_0, uhx_arg_1, uhx_arg_2);
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::ALevelScriptActor_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (ALevelScriptActor::StaticClass()) );\n}")
  @:ifFeature("unreal.ALevelScriptActor.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("LevelScriptActor");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.ALevelScriptActor_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
