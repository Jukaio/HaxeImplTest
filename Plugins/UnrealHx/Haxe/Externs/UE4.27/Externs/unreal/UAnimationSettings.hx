/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Default animation settings.
**/
@:glueCppIncludes("Animation/AnimationSettings.h")
@:uextern @:uclass extern class UAnimationSettings extends unreal.developersettings.UDeveloperSettings {
  
  /**
    Default Custom Attribute blend type
  **/
  @:uproperty public var DefaultAttributeBlendMode : unreal.ECustomAttributeBlendType;
  
  /**
    Custom Attribute specific blend types (by name)
  **/
  @:uproperty public var AttributeBlendModes : unreal.TMap<unreal.FName, unreal.ECustomAttributeBlendType>;
  
  /**
    List of bone names for which all custom attributes are directly imported on the bone.
  **/
  @:uproperty public var BoneNamesWithCustomAttributes : unreal.TArray<unreal.FString>;
  
  /**
    List of custom attribute to import directly on their corresponding bone. The meaning field allows to contextualize the attribute name and customize tooling for it.
  **/
  @:uproperty public var BoneCustomAttributesNames : unreal.TArray<unreal.FCustomAttributeSetting>;
  
  /**
    If true, pre-4.19 behavior of zero-ticking animations during skeletal mesh init
  **/
  @:uproperty public var bTickAnimationOnSkeletalMeshInit : Bool;
  
  /**
    If true, animation track data will be stripped from dedicated server cooked data
  **/
  @:uproperty public var bStripAnimationDataOnDedicatedServer : Bool;
  
  /**
    If true, recompression will log performance information
  **/
  @:uproperty public var bEnablePerformanceLog : Bool;
  
  /**
    If true and the existing compression error is greater than Alternative Compression Threshold, then Alternative Compression Threshold will be effectively raised to the existing error level
  **/
  @:uproperty public var bRaiseMaxErrorToExisting : Bool;
  
  /**
    If true, then the animation will be first recompressed with it's current compressor if non-NULL, or with the global default compressor (specified in the engine ini)
    Also known as "Run Current Default Compressor"
  **/
  @:uproperty public var bFirstRecompressUsingCurrentOrDefault : Bool;
  
  /**
    If true and the existing compression error is greater than Alternative Compression Threshold, then any compression technique (even one that increases the size) with a lower error will be used until it falls below the threshold
  **/
  @:uproperty public var bForceBelowThreshold : Bool;
  
  /**
    If true, this will forcibly recompress every animation, this should not be checked in enabled
  **/
  @:uproperty public var ForceRecompression : Bool;
  
  /**
    List of bone names to treat with higher precision, in addition to any bones with sockets
  **/
  @:uproperty public var KeyEndEffectorsMatchNameArray : unreal.TArray<unreal.FString>;
  
  /**
    Compression version for recompress commandlet, bump this to trigger full recompressed, otherwise only new imported animations will be recompressed
  **/
  @:uproperty public var CompressCommandletVersion : unreal.Int32;
  
}
