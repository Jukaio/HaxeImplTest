/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.windowstargetplatform;

/**
  Implements the settings for the Windows target platform. The first instance of this class is initialized in
  WindowsTargetPlatform, really early during the startup sequence before the CDO has been constructed, so its config
  settings are read manually from there.
**/
@:umodule("WindowsTargetPlatform")
@:glueCppIncludes("WindowsTargetSettings.h")
@:uextern @:uclass extern class UWindowsTargetSettings extends unreal.UObject {
  
  /**
    Quality Level to COOK SoundCues at (if set, all other levels will be stripped by the cooker).
  **/
  @:uproperty public var SoundCueCookQualityIndex : unreal.Int32;
  
  /**
    When set to anything beyond 0, this will ensure any SoundWaves longer than this value, in seconds, to stream directly off of the disk.
  **/
  @:uproperty public var AutoStreamingThreshold : unreal.Float32;
  
  /**
    Scales all compression qualities when cooking to this platform. For example, 0.5 will halve all compression qualities, and 1.0 will leave them unchanged.
  **/
  @:uproperty public var CompressionQualityModifier : unreal.Float32;
  @:uproperty public var MinSampleRate : unreal.Float32;
  @:uproperty public var LowSampleRate : unreal.Float32;
  @:uproperty public var MedSampleRate : unreal.Float32;
  @:uproperty public var HighSampleRate : unreal.Float32;
  
  /**
    Mapping of which sample rates are used for each sample rate quality for a specific platform.
  **/
  @:uproperty public var MaxSampleRate : unreal.Float32;
  @:uproperty public var bResampleForDevice : Bool;
  
  /**
    This overrides the default max chunk size used when chunking audio for stream caching (ignored if < 0)
  **/
  @:uproperty public var MaxChunkSizeOverrideKB : unreal.Int32;
  
  /**
    This determines the max amount of memory that should be used for the cache at any given time. If set low (<= 8 MB), it lowers the size of individual chunks of audio during cook.
  **/
  @:uproperty public var CacheSizeKB : unreal.Int32;
  
  /**
    When this is enabled, Actual compressed data will be separated from the USoundWave, and loaded into a cache.
  **/
  @:uproperty public var bUseAudioStreamCaching : Bool;
  
  /**
    Various overrides for how this platform should handle compression and decompression
  **/
  @:uproperty public var CompressionOverrides : unreal.audioplatformconfiguration.FPlatformRuntimeAudioCompressionOverrides;
  
  /**
    Which of the currently enabled occlusion plugins to use on Windows.
  **/
  @:uproperty public var OcclusionPlugin : unreal.FString;
  
  /**
    Which of the currently enabled reverb plugins to use on Windows.
  **/
  @:uproperty public var ReverbPlugin : unreal.FString;
  
  /**
    Which of the currently enabled spatialization plugins to use on Windows.
  **/
  @:uproperty public var SpatializationPlugin : unreal.FString;
  
  /**
    The number of workers to use to compute source audio. Will only use up to the max number of sources. Will evenly divide sources to each source worker.
  **/
  @:uproperty public var AudioNumSourceWorkers : unreal.Int32;
  
  /**
    The max number of channels (voices) to limit for this platform. The max channels used will be the minimum of this value and the global audio quality settings. A value of 0 will not apply a platform channel count max.
  **/
  @:uproperty public var AudioMaxChannels : unreal.Int32;
  
  /**
    The number of buffers to keep enqueued. More buffers increases latency, but can compensate for variable compute availability in audio callbacks on some platforms.
  **/
  @:uproperty public var AudioNumBuffersToEnqueue : unreal.Int32;
  
  /**
    The amount of audio to compute each callback block. Lower values decrease latency but may increase CPU cost.
  **/
  @:uproperty public var AudioCallbackBufferFrameSize : unreal.Int32;
  
  /**
    Sample rate to run the audio mixer with.
  **/
  @:uproperty public var AudioSampleRate : unreal.Int32;
  
  /**
    Determine the minimum supported
  **/
  @:uproperty public var MinimumOSVersion : unreal.windowstargetplatform.EMinimumSupportedOS;
  
  /**
    Default Graphics RHI. Select which RHIto use. Make sure its also selected as a Targeted RHI
    Requires Editor restart
  **/
  @:uproperty public var DefaultGraphicsRHI : unreal.windowstargetplatform.EDefaultGraphicsRHI;
  
  /**
    The collection of RHI's we want to support on this platform.
    This is not always the full list of RHI we can support.
  **/
  @:uproperty public var TargetedRHIs : unreal.TArray<unreal.FString>;
  
  /**
    The compiler version to use for this project. May be different to the chosen IDE.
  **/
  @:uproperty public var Compiler : unreal.windowstargetplatform.ECompilerVersion;
  
}
