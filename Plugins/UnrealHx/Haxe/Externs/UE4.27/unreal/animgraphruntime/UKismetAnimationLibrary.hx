/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animgraphruntime;

/**
  A library of the most common animation blueprint functions.
**/
@:umodule("AnimGraphRuntime")
@:glueCppIncludes("KismetAnimationLibrary.h")
@:uextern @:uclass extern class UKismetAnimationLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Computes the transform for two bones using inverse kinematics.
    
    @param RootPos The input root position of the two bone chain
    @param JointPos The input center (elbow) position of the two bone chain
    @param EndPos The input end (wrist) position of the two bone chain
    @param JointTarget The IK target for the write to reach
    @param Effector The position of the target effector for the IK Chain.
    @param OutJointPos The resulting position for the center (elbow)
    @param OutEndPos The resulting position for the end (wrist)
    @param bAllowStretching If set to true the bones are allowed to stretch
    @param StartStretchRatio The ratio at which the bones should start to stretch. The higher the value, the later the stretching wil start.
    @param MaxStretchScale The maximum multiplier for the stretch to reach.
  **/
  @:ufunction(BlueprintCallable) static public function K2_TwoBoneIK(RootPos : unreal.Const<unreal.PRef<unreal.FVector>>, JointPos : unreal.Const<unreal.PRef<unreal.FVector>>, EndPos : unreal.Const<unreal.PRef<unreal.FVector>>, JointTarget : unreal.Const<unreal.PRef<unreal.FVector>>, Effector : unreal.Const<unreal.PRef<unreal.FVector>>, OutJointPos : unreal.PRef<unreal.FVector>, OutEndPos : unreal.PRef<unreal.FVector>, @:bpopt("false") bAllowStretching : Bool, @:bpopt("1.0") StartStretchRatio : unreal.Float32, @:bpopt("1.2") MaxStretchScale : unreal.Float32) : Void;
  
  /**
    Computes the transform which is "looking" at target position with a local axis.
    
    @param CurrentTransform The input transform to modify
    @param TargetPosition The position this transform should look at
    @param LookAtVector The local vector to align with the target
    @param bUseUpVector If set to true the lookat will also perform a twist rotation
    @param UpVector The position to use for the upvector target (only used is bUseUpVector is turned on)
    @param ClampConeInDegree A limit for only allowing the lookat to rotate as much as defined by the float value
  **/
  @:ufunction(BlueprintCallable) static public function K2_LookAt(CurrentTransform : unreal.Const<unreal.PRef<unreal.FTransform>>, TargetPosition : unreal.Const<unreal.PRef<unreal.FVector>>, LookAtVector : unreal.FVector, @:bpopt("false") bUseUpVector : Bool, UpVector : unreal.FVector, ClampConeInDegree : unreal.Float32) : unreal.FTransform;
  
  /**
    Computes the distance between two bones / sockets and can remap the range.
    
    @param Component The skeletal component to look for the sockets / bones within
    @param SocketOrBoneNameA The name of the first socket / bone
    @param SocketSpaceA The space for the first socket / bone
    @param SocketOrBoneNameB The name of the second socket / bone
    @param SocketSpaceB The space for the second socket / bone
    @param bRemapRange If set to true, the distance will be remapped using the range parameters
    @param InRangeMin The minimum for the input range (commonly == 0.0)
    @param InRangeMax The maximum for the input range (the max expected distance)
    @param OutRangeMin The minimum for the output range (commonly == 0.0)
    @param OutRangeMax The maximum for the output range (commonly == 1.0)
  **/
  @:ufunction(BlueprintCallable) static public function K2_DistanceBetweenTwoSocketsAndMapRange(Component : unreal.Const<unreal.USkeletalMeshComponent>, SocketOrBoneNameA : unreal.Const<unreal.FName>, SocketSpaceA : unreal.ERelativeTransformSpace, SocketOrBoneNameB : unreal.Const<unreal.FName>, SocketSpaceB : unreal.ERelativeTransformSpace, @:bpopt("false") bRemapRange : Bool, InRangeMin : unreal.Float32, InRangeMax : unreal.Float32, OutRangeMin : unreal.Float32, OutRangeMax : unreal.Float32) : unreal.Float32;
  
  /**
    Computes the direction between two bones / sockets.
    
    @param Component The skeletal component to look for the sockets / bones within
    @param SocketOrBoneNameFrom The name of the first socket / bone
    @param SocketOrBoneNameTo The name of the second socket / bone
  **/
  @:ufunction(BlueprintCallable) static public function K2_DirectionBetweenSockets(Component : unreal.Const<unreal.USkeletalMeshComponent>, SocketOrBoneNameFrom : unreal.Const<unreal.FName>, SocketOrBoneNameTo : unreal.Const<unreal.FName>) : unreal.FVector;
  
  /**
    This function creates perlin noise from input X, Y, Z, and then range map to RangeOut, and out put to OutX, OutY, OutZ
    
    @param X The x component for the input position of the noise
    @param Y The y component for the input position of the noise
    @param Z The z component for the input position of the noise
    @param RangeOutMinX The minimum for the output range for the x component
    @param RangeOutMaxX The maximum for the output range for the x component
    @param RangeOutMinY The minimum for the output range for the y component
    @param RangeOutMaxY The maximum for the output range for the y component
    @param RangeOutMinZ The minimum for the output range for the z component
    @param RangeOutMaxZ The maximum for the output range for the z component
  **/
  @:ufunction(BlueprintCallable) static public function K2_MakePerlinNoiseVectorAndRemap(X : unreal.Float32, Y : unreal.Float32, Z : unreal.Float32, @:bpopt("-1.f") RangeOutMinX : unreal.Float32, @:bpopt("1.f") RangeOutMaxX : unreal.Float32, @:bpopt("-1.f") RangeOutMinY : unreal.Float32, @:bpopt("1.f") RangeOutMaxY : unreal.Float32, @:bpopt("-1.f") RangeOutMinZ : unreal.Float32, @:bpopt("1.f") RangeOutMaxZ : unreal.Float32) : unreal.FVector;
  
  /**
    This function creates perlin noise for a single float and then range map to RangeOut
    
    @param Value The input value for the noise function
    @param RangeOutMin The minimum for the output range
    @param RangeOutMax The maximum for the output range
  **/
  @:ufunction(BlueprintCallable) static public function K2_MakePerlinNoiseAndRemap(Value : unreal.Float32, RangeOutMin : unreal.Float32, RangeOutMax : unreal.Float32) : unreal.Float32;
  
  /**
    This function calculates the velocity of a position changing over time.
    You need to hook up a valid PositionHistory variable to this for storage.
    
    @param DeltaSeconds The time passed in seconds
    @param Position The position to track over time.
    @param History The history to use for storage.
    @param NumberOfSamples The number of samples to use for the history. The higher the number of samples - the smoother the velocity changes.
    @param VelocityMin The minimum velocity to use for normalization (if both min and max are set to 0, normalization is turned off)
    @param VelocityMax The maximum velocity to use for normalization (if both min and max are set to 0, normalization is turned off)
  **/
  @:ufunction(BlueprintCallable) static public function K2_CalculateVelocityFromPositionHistory(DeltaSeconds : unreal.Float32, Position : unreal.FVector, History : unreal.PRef<unreal.animgraphruntime.FPositionHistory>, @:bpopt("16") NumberOfSamples : unreal.Int32, @:bpopt("0.f") VelocityMin : unreal.Float32, @:bpopt("128.f") VelocityMax : unreal.Float32) : unreal.Float32;
  
  /**
    This function calculates the velocity of an offset position on a bone / socket over time.
    The bone's / socket's motion can be expressed within a reference frame (another bone / socket).
    You need to hook up a valid PositionHistory variable to this for storage.
    
    @param DeltaSeconds The time passed in seconds
    @param Component The skeletal component to look for the bones / sockets
    @param SocketOrBoneName The name of the bone / socket to track.
    @param ReferenceSocketOrBone The name of the bone / socket to use as a frame of reference (or None if no frame of reference == world space).
    @param SocketSpace The space to use for the two sockets / bones
    @param OffsetInBoneSpace The relative position in the space of the bone / socket to track over time.
    @param History The history to use for storage.
    @param NumberOfSamples The number of samples to use for the history. The higher the number of samples - the smoother the velocity changes.
    @param VelocityMin The minimum velocity to use for normalization (if both min and max are set to 0, normalization is turned off)
    @param VelocityMax The maximum velocity to use for normalization (if both min and max are set to 0, normalization is turned off)
    @param EasingType The easing function to use
    @param CustomCurve The curve to use if the easing type is "Custom"
  **/
  @:ufunction(BlueprintCallable) static public function K2_CalculateVelocityFromSockets(DeltaSeconds : unreal.Float32, Component : unreal.USkeletalMeshComponent, SocketOrBoneName : unreal.Const<unreal.FName>, ReferenceSocketOrBone : unreal.Const<unreal.FName>, SocketSpace : unreal.ERelativeTransformSpace, OffsetInBoneSpace : unreal.FVector, History : unreal.PRef<unreal.animgraphruntime.FPositionHistory>, @:bpopt("16") NumberOfSamples : unreal.Int32, @:bpopt("0.f") VelocityMin : unreal.Float32, @:bpopt("128.f") VelocityMax : unreal.Float32, EasingType : unreal.animgraphruntime.EEasingFuncType, CustomCurve : unreal.Const<unreal.PRef<unreal.FRuntimeFloatCurve>>) : unreal.Float32;
  
  /**
    This function starts measuring the time for a profiling bracket
  **/
  @:ufunction(BlueprintCallable) static public function K2_StartProfilingTimer() : Void;
  
  /**
    This function ends measuring a profiling bracket and optionally logs the result
    
    @param bLog If set to true the result is logged to the OutputLog
    @param LogPrefix A prefix to use for the log
    @result The time spent in milliseconds
  **/
  @:ufunction(BlueprintCallable) static public function K2_EndProfilingTimer(bLog : Bool = true, LogPrefix : unreal.FString) : unreal.Float32;
  
}
