/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Kismet/BlueprintMapLibrary.h")
@:uextern @:uclass extern class UBlueprintMapLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Adds a key and value to the map. If something already uses the provided key it will be overwritten with the new value.
    After calling Key is guaranteed to be associated with Value until a subsequent mutation of the Map.
    
    @param       TargetMap               The map to add the key and value to
    @param       Key                             The key that will be used to look the value up
    @param       Value                   The value to be retrieved later
  **/
  @:ufunction(BlueprintCallable) static public function Map_Add(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Key : unreal.Int32, Value : unreal.Int32) : Void;
  
  /**
    Removes a key and its associated value from the map.
    
    @param       TargetMap               The map to remove the key and its associated value from
    @param       Key                             The key that will be used to look the value up
    @return      True if an item was removed (False indicates nothing in the map uses the provided key)
  **/
  @:ufunction(BlueprintCallable) static public function Map_Remove(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Key : unreal.Int32) : Bool;
  
  /**
    Finds the value associated with the provided Key
    
    @param       TargetMap               The map to perform the lookup on
    @param       Key                             The key that will be used to look the value up
    @param       Value                   The value associated with the key, default constructed if key was not found
    @return      True if an item was found (False indicates nothing in the map uses the provided key)
  **/
  @:ufunction(BlueprintCallable) static public function Map_Find(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Key : unreal.Int32, Value : unreal.Int32) : Bool;
  
  /**
    Checks whether key is in a provided Map
    
    @param       TargetMap               The map to perform the lookup on
    @param       Key                             The key that will be used to lookup
    @return      True if an item was found (False indicates nothing in the map uses the provided key)
  **/
  @:ufunction(BlueprintCallable) static public function Map_Contains(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Key : unreal.Int32) : Bool;
  
  /**
    Outputs an array of all keys present in the map
    
    @param       TargetMap               The map to get the list of keys from
    @param       Keys                    All keys present in the map
  **/
  @:ufunction(BlueprintCallable) static public function Map_Keys(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Keys : unreal.PRef<unreal.TArray<unreal.Int32>>) : Void;
  
  /**
    Outputs an array of all values present in the map
    
    @param       TargetMap               The map to get the list of values from
    @param       Values                  All values present in the map
  **/
  @:ufunction(BlueprintCallable) static public function Map_Values(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>, Values : unreal.PRef<unreal.TArray<unreal.Int32>>) : Void;
  
  /**
    Determines the number of entries in a provided Map
    
    @param       TargetMap               The map in question
    @return      The number of entries in the map
  **/
  @:ufunction(BlueprintCallable) static public function Map_Length(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>) : unreal.Int32;
  
  /**
    Clears a map of all entries, resetting it to empty
    
    @param       TargetMap               The map to clear
  **/
  @:ufunction(BlueprintCallable) static public function Map_Clear(TargetMap : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>) : Void;
  
  /**
    Not exposed to users. Supports setting a map property on an object by name.
  **/
  @:ufunction(BlueprintCallable) static public function SetMapPropertyByName(Object : unreal.UObject, PropertyName : unreal.FName, Value : unreal.Const<unreal.PRef<unreal.TMap<unreal.Int32, unreal.Int32>>>) : Void;
  
}
