/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/SkeletalMeshSimulationComponent.h")
@:uextern @:uclass extern class USkeletalMeshSimulationComponent extends unreal.UActorComponent implements unreal.chaossolverengine.IChaosNotifyHandlerInterface {
  @:uproperty public var OnChaosPhysicsCollision : unreal.chaossolverengine.FOnChaosPhysicsCollision;
  
  /**
    Initial angular velocity.
  **/
  @:uproperty public var InitialAngularVelocity : unreal.FVector;
  
  /**
    Initial linear velocity.
  **/
  @:uproperty public var InitialLinearVelocity : unreal.FVector;
  
  /**
    Where to pull initial velocity from - user defined or animation.
  **/
  @:uproperty public var InitialVelocityType : unreal.chaos.EInitialVelocityTypeEnum;
  
  /**
    Collision group - 0 = collides with all, -1 = none
  **/
  @:uproperty public var CollisionGroup : unreal.Int32;
  
  /**
    Resolution on the smallest axes for the level set. (def: 10)
  **/
  @:uproperty public var MaxLevelSetResolution : unreal.Int32;
  
  /**
    Resolution on the smallest axes for the level set. (def: 5)
  **/
  @:uproperty public var MinLevelSetResolution : unreal.Int32;
  
  /**
    Maximum number of particles for each implicit shape.
  **/
  @:uproperty public var ImplicitShapeMaxNumParticles : unreal.Int32;
  
  /**
    Minimum number of particles for each implicit shape.
  **/
  @:uproperty public var ImplicitShapeMinNumParticles : unreal.Int32;
  
  /**
    Number of particles to generate per unit area (square cm). 0.1 would generate 1 collision particle per 10 cm^2.
  **/
  @:uproperty public var ImplicitShapeParticlesPerUnitArea : unreal.Float32;
  
  /**
    CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var CollisionType : unreal.chaos.ECollisionTypeEnum;
  @:uproperty public var MaxMass : unreal.Float32;
  @:uproperty public var MinMass : unreal.Float32;
  
  /**
    Density / mass.
    
    Common densities in g/cm^3:
       gold: 19.3
       lead: 11.3
       copper: 8.3 - 9.0
       steel: 8.03
       iron: 7.8
       aluminium: 2.7
       glass: 2.4 - 2.8
       brick: 1.4 - 2.4
       concrete: 0.45 - 2.4
       bone: 1.7 - 2.0
       muscle: 1.06
       water: 1.0
       fat: 0.9196
       gasoline: 0.7
       wood: 0.67
       tree bark: 0.24
       air: 0.001293
  **/
  @:uproperty public var Density : unreal.Float32;
  
  /**
    ObjectType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var ObjectType : unreal.chaos.EObjectStateTypeEnum;
  
  /**
    If true, this component will get collision notification events (@see IChaosNotifyHandlerInterface)
  **/
  @:uproperty public var bNotifyCollisions : Bool;
  
  /**
    When Simulating is enabled the Component will initialize its rigid bodies within the solver.
  **/
  @:uproperty public var bSimulating : Bool;
  @:uproperty public var OverridePhysicsAsset : unreal.UPhysicsAsset;
  
  /**
    Chaos RBD Solver
  **/
  @:uproperty public var ChaosSolverActor : unreal.chaossolverengine.AChaosSolverActor;
  
  /**
    Physical Properties
  **/
  @:uproperty public var PhysicalMaterial : unreal.physicscore.UChaosPhysicalMaterial;
  @:ufunction(BlueprintImplementableEvent) public function ReceivePhysicsCollision(CollisionInfo : unreal.Const<unreal.PRef<unreal.chaossolverengine.FChaosPhysicsCollisionInfo>>) : Void;
  // ChaosNotifyHandlerInterface interface implementation
  
}
