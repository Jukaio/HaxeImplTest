/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.fieldsystemengine;

/**
  FieldSystemComponent
**/
@:umodule("FieldSystemEngine")
@:glueCppIncludes("Field/FieldSystemComponent.h")
@:uextern @:uclass extern class UFieldSystemComponent extends unreal.UPrimitiveComponent {
  
  /**
    List of all the buffer command
  **/
  @:uproperty public var BufferCommands : unreal.fieldsystemengine.FFieldObjectCommands;
  
  /**
    List of all the construction command
  **/
  @:uproperty public var ConstructionCommands : unreal.fieldsystemengine.FFieldObjectCommands;
  
  /**
    If enabled the field will be used by all the chaos solvers
  **/
  @:uproperty public var bIsChaosField : Bool;
  
  /**
    If enabled the field will be pushed to the world fields and will be available to materials and niagara
  **/
  @:uproperty public var bIsWorldField : Bool;
  
  /**
    Field system asset to be used to store the construction fields
  **/
  @:uproperty public var FieldSystem : unreal.fieldsystemengine.UFieldSystem;
  
  /**
    ApplyUniformForce
      This function will dispatch a command to the physics thread to apply
      a uniform linear force on each particle within the simulation.
    
      @param Enabled Is this force enabled for evaluation.
      @param Direction The direction of the linear force
      @param Magnitude The size of the linear force.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyLinearForce(Enabled : Bool, Direction : unreal.FVector, Magnitude : unreal.Float32) : Void;
  
  /**
    SetDynamicState
      This function will dispatch a command to the physics thread to apply
      a kinematic to dynamic state change for the particles within the field.
    
      @param Enabled Is this force enabled for evaluation.
      @param Position The location of the command
      @param Radius Radial influence from the position
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyStayDynamicField(Enabled : Bool, Position : unreal.FVector, Radius : unreal.Float32) : Void;
  
  /**
    ApplyRadialForce
      This function will dispatch a command to the physics thread to apply
      a linear force that points away from a position.
    
      @param Enabled Is this force enabled for evaluation.
      @param Position The origin point of the force
      @param Magnitude The size of the linear force.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyRadialForce(Enabled : Bool, Position : unreal.FVector, Magnitude : unreal.Float32) : Void;
  
  /**
    FalloffRadialForce
      This function will dispatch a command to the physics thread to apply
      a linear force from a position in space. The force vector is weaker as
      it moves away from the center.
    
      @param Enabled Is this force enabled for evaluation.
      @param Position The origin point of the force
      @param Radius Radial influence from the position, positions further away are weaker.
      @param Magnitude The size of the linear force.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyRadialVectorFalloffForce(Enabled : Bool, Position : unreal.FVector, Radius : unreal.Float32, Magnitude : unreal.Float32) : Void;
  
  /**
    FalloffUniformForce
      This function will dispatch a command to the physics thread to apply
      a linear force in a uniform direction. The force vector is weaker as
      it moves away from the center.
    
      @param Enabled Is this force enabled for evaluation.
      @param Position The origin point of the force
      @param Direction The direction of the linear force
      @param Radius Radial influence from the position, positions further away are weaker.
      @param Magnitude The size of the linear force.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyUniformVectorFalloffForce(Enabled : Bool, Position : unreal.FVector, Direction : unreal.FVector, Radius : unreal.Float32, Magnitude : unreal.Float32) : Void;
  
  /**
    ApplyExternalStran
      This function will dispatch a command to the physics thread to apply
      a strain field on a clustered set of geometry. This is used to trigger a
      breaking event within the solver.
    
      @param Enabled Is this force enabled for evaluation.
      @param Position The origin point of the force
      @param Radius Radial influence from the position, positions further away are weaker.
      @param Magnitude The size of the linear force.
      @param Iterations Levels of evaluation into the cluster hierarchy.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyStrainField(Enabled : Bool, Position : unreal.FVector, Radius : unreal.Float32, Magnitude : unreal.Float32, Iterations : unreal.Int32) : Void;
  
  /**
    AddTransientField
      This function will dispatch a command to the physics thread to apply
      a generic evaluation of a user defined transient field network. See documentation,
      for examples of how to recreate variations of the above generic
      fields using field networks
    
      (https://wiki.it.epicgames.net/display/~Brice.Criswell/Fields)
    
      @param Enabled Is this force enabled for evaluation.
      @param Target Type of field supported by the solver.
      @param MetaData Meta data used to assist in evaluation
      @param Field Base evaluation node for the field network.
  **/
  @:ufunction(BlueprintCallable) @:final public function ApplyPhysicsField(Enabled : Bool, Target : unreal.chaos.EFieldPhysicsType, MetaData : unreal.fieldsystemengine.UFieldSystemMetaData, Field : unreal.fieldsystemengine.UFieldNodeBase) : Void;
  
  /**
    AddPersistentField
      This function will dispatch a command to the physics thread to apply
      a generic evaluation of a user defined field network. This command will be persistent in time and will live until
      the component is destroyed or until the RemovePersistenFields function is called. See documentation,
      for examples of how to recreate variations of the above generic
      fields using field networks
    
      (https://wiki.it.epicgames.net/display/~Brice.Criswell/Fields)
    
      @param Enabled Is this force enabled for evaluation.
      @param Target Type of field supported by the solver.
      @param MetaData Meta data used to assist in evaluation
      @param Field Base evaluation node for the field network.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddPersistentField(Enabled : Bool, Target : unreal.chaos.EFieldPhysicsType, MetaData : unreal.fieldsystemengine.UFieldSystemMetaData, Field : unreal.fieldsystemengine.UFieldNodeBase) : Void;
  
  /**
    RemovePersistentFields
      This function will remove all the field component persistent fields from chaos and from the world
  **/
  @:ufunction(BlueprintCallable) @:final public function RemovePersistentFields() : Void;
  
  /**
    AddConstructionField
      This function will dispatch a command to the physics thread to apply
      a generic evaluation of a user defined field network. This command will be used in a
      construction script to setup some particles properties (anchors...). See documentation,
      for examples of how to recreate variations of the above generic
      fields using field networks
    
      (https://wiki.it.epicgames.net/display/~Brice.Criswell/Fields)
    
      @param Enabled Is this force enabled for evaluation.
      @param Target Type of field supported by the solver.
      @param MetaData Meta data used to assist in evaluation
      @param Field Base evaluation node for the field network.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddFieldCommand(Enabled : Bool, Target : unreal.chaos.EFieldPhysicsType, MetaData : unreal.fieldsystemengine.UFieldSystemMetaData, Field : unreal.fieldsystemengine.UFieldNodeBase) : Void;
  
  /**
    RemoveConstructionFields
      This function will remove all the field component construction fields from chaos and from the world
  **/
  @:ufunction(BlueprintCallable) @:final public function ResetFieldSystem() : Void;
  
}
