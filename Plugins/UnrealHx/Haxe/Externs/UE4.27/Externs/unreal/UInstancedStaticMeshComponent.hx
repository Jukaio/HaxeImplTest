/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  A component that efficiently renders multiple instances of the same StaticMesh.
**/
@:glueCppIncludes("Components/InstancedStaticMeshComponent.h")
@:uextern @:uclass extern class UInstancedStaticMeshComponent extends unreal.UStaticMeshComponent {
  
  /**
    The mappings for all the instances of this component.
  **/
  @:uproperty private var CachedMappings : unreal.TArray<unreal.FInstancedStaticMeshMappingInfo>;
  
  /**
    Number of pending lightmaps still to be calculated (Apply()'d).
  **/
  @:uproperty private var NumPendingLightmaps : unreal.Int32;
  
  /**
    Mapping from PerInstanceSMData order to instance render buffer order. If empty, the PerInstanceSMData order is used.
  **/
  @:uproperty public var InstanceReorderTable : unreal.TArray<unreal.Int32>;
  
  /**
    Distance from camera at which each instance completely fades out.
  **/
  @:uproperty public var InstanceEndCullDistance : unreal.Int32;
  
  /**
    Distance from camera at which each instance begins to fade out.
  **/
  @:uproperty public var InstanceStartCullDistance : unreal.Int32;
  
  /**
    Value used to seed the random number stream that generates random numbers for each of this mesh's instances.
          The random number is stored in a buffer accessible to materials through the PerInstanceRandom expression. If
          this is set to zero (default), it will be populated automatically by the editor.
  **/
  @:uproperty public var InstancingRandomSeed : unreal.Int32;
  
  /**
    Array of custom data for instances. This will contains NumCustomDataFloats*InstanceCount entries. The entries are represented sequantially, in instance order. Can be read in a material and manipulated through Blueprints.
        Example: If NumCustomDataFloats is 1, then each entry will belong to an instance. Custom data 0 will belong to Instance 0. Custom data 1 will belong to Instance 1 etc.
        Example: If NumCustomDataFloats is 2, then each pair of sequential entries belong to an instance. Custom data 0 and 1 will belong to Instance 0. Custom data 2 and 3 will belong to Instance 2 etc.
  **/
  @:uproperty public var PerInstanceSMCustomData : unreal.TArray<unreal.Float32>;
  
  /**
    Defines the number of floats that will be available per instance for custom data
  **/
  @:uproperty public var NumCustomDataFloats : unreal.Int32;
  
  /**
    Array of instances, bulk serialized.
  **/
  @:uproperty public var PerInstanceSMData : unreal.TArray<unreal.FInstancedStaticMeshInstanceData>;
  
  /**
    Add an instance to this component. Transform is given in local space of this component.
  **/
  @:ufunction(BlueprintCallable) public function AddInstance(InstanceTransform : unreal.Const<unreal.PRef<unreal.FTransform>>) : unreal.Int32;
  
  /**
    Add multiple instances to this component. Transform is given in local space of this component.
  **/
  @:ufunction(BlueprintCallable) public function AddInstances(InstanceTransforms : unreal.Const<unreal.PRef<unreal.TArray<unreal.FTransform>>>, bShouldReturnIndices : Bool) : unreal.TArray<unreal.Int32>;
  
  /**
    Add an instance to this component. Transform is given in world space.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddInstanceWorldSpace(WorldTransform : unreal.Const<unreal.PRef<unreal.FTransform>>) : unreal.Int32;
  
  /**
    Update custom data for specific instance
  **/
  @:ufunction(BlueprintCallable) public function SetCustomDataValue(InstanceIndex : unreal.Int32, CustomDataIndex : unreal.Int32, CustomDataValue : unreal.Float32, bMarkRenderStateDirty : Bool = false) : Bool;
  
  /**
    Get the transform for the instance specified. Instance is returned in local space of this component unless bWorldSpace is set.  Returns True on success.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetInstanceTransform(InstanceIndex : unreal.Int32, OutInstanceTransform : unreal.PRef<unreal.FTransform>, bWorldSpace : Bool = false) : Bool;
  
  /**
    Update the transform for the instance specified.
    
    @param InstanceIndex                  The index of the instance to update
    @param NewInstanceTransform   The new transform
    @param bWorldSpace                    If true, the new transform is interpreted as a World Space transform, otherwise it is interpreted as Local Space
    @param bMarkRenderStateDirty  If true, the change should be visible immediately. If you are updating many instances you should only set this to true for the last instance.
    @param bTeleport                              Whether or not the instance's physics should be moved normally, or teleported (moved instantly, ignoring velocity).
    @return                                               True on success.
  **/
  @:ufunction(BlueprintCallable) public function UpdateInstanceTransform(InstanceIndex : unreal.Int32, NewInstanceTransform : unreal.Const<unreal.PRef<unreal.FTransform>>, bWorldSpace : Bool = false, bMarkRenderStateDirty : Bool = false, bTeleport : Bool = false) : Bool;
  
  /**
    Update the transform for an array of instances.
    
    @param StartInstanceIndex             The starting index of the instances to update
    @param NewInstancesTransforms The new transforms
    @param bWorldSpace                    If true, the new transforms are interpreted as a World Space transform, otherwise it is interpreted as Local Space
    @param bMarkRenderStateDirty  If true, the change should be visible immediately. If you are updating many instances you should only set this to true for the last instance.
    @param bTeleport                              Whether or not the instances physics should be moved normally, or teleported (moved instantly, ignoring velocity).
    @return                                               True on success.
  **/
  @:ufunction(BlueprintCallable) public function BatchUpdateInstancesTransforms(StartInstanceIndex : unreal.Int32, NewInstancesTransforms : unreal.Const<unreal.PRef<unreal.TArray<unreal.FTransform>>>, bWorldSpace : Bool = false, bMarkRenderStateDirty : Bool = false, bTeleport : Bool = false) : Bool;
  
  /**
    Update the transform for a number of instances.
    
    @param StartInstanceIndex             The starting index of the instances to update
    @param NumInstances                   The number of instances to update
    @param NewInstancesTransform  The new transform
    @param bWorldSpace                    If true, the new transform is interpreted as a World Space transform, otherwise it is interpreted as Local Space
    @param bMarkRenderStateDirty  If true, the change should be visible immediately. If you are updating many instances you should only set this to true for the last instance.
    @param bTeleport                              Whether or not the instances physics should be moved normally, or teleported (moved instantly, ignoring velocity).
    @return                                               True on success.
  **/
  @:ufunction(BlueprintCallable) public function BatchUpdateInstancesTransform(StartInstanceIndex : unreal.Int32, NumInstances : unreal.Int32, NewInstancesTransform : unreal.Const<unreal.PRef<unreal.FTransform>>, bWorldSpace : Bool = false, bMarkRenderStateDirty : Bool = false, bTeleport : Bool = false) : Bool;
  
  /**
    Remove the instance specified. Returns True on success. Note that this will leave the array in order, but may shrink it.
  **/
  @:ufunction(BlueprintCallable) public function RemoveInstance(InstanceIndex : unreal.Int32) : Bool;
  
  /**
    Clear all instances being rendered by this component.
  **/
  @:ufunction(BlueprintCallable) public function ClearInstances() : Void;
  
  /**
    Get the number of instances in this component.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetInstanceCount() : unreal.Int32;
  
  /**
    Sets the fading start and culling end distances for this component.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCullDistances(StartCullDistance : unreal.Int32, EndCullDistance : unreal.Int32) : Void;
  
  /**
    Returns the instances with instance bounds overlapping the specified sphere. The return value is an array of instance indices.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetInstancesOverlappingSphere(Center : unreal.Const<unreal.PRef<unreal.FVector>>, Radius : unreal.Float32, bSphereInWorldSpace : Bool = true) : unreal.TArray<unreal.Int32>;
  
  /**
    Returns the instances with instance bounds overlapping the specified box. The return value is an array of instance indices.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetInstancesOverlappingBox(Box : unreal.Const<unreal.PRef<unreal.FBox>>, bBoxInWorldSpace : Bool = true) : unreal.TArray<unreal.Int32>;
  
}
