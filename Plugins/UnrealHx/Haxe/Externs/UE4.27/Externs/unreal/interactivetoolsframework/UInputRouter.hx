/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.interactivetoolsframework;

/**
  UInputRouter mediates between a higher-level input event source (eg like an FEdMode)
  and a set of InputBehaviors that respond to those events. Sets of InputBehaviors are
  registered, and then PostInputEvent() is called for each event.
  
  Internally one of the active Behaviors may "capture" the event stream.
  Separate "Left" and "Right" captures are supported, which means that (eg)
  an independent capture can be tracked for each VR controller.
  
  If the input device supports "hover",  PostHoverInputEvent() will forward
  hover events to InputBehaviors that also support it.
**/
@:umodule("InteractiveToolsFramework")
@:glueCppIncludes("InputRouter.h")
@:uextern @:uclass extern class UInputRouter extends unreal.UObject {
  @:uproperty private var ActiveInputBehaviors : unreal.interactivetoolsframework.UInputBehaviorSet;
  
  /**
    If true, then we post an Invalidation (ie redraw) request on every captured input event (default false)
  **/
  @:uproperty public var bAutoInvalidateOnCapture : Bool;
  
  /**
    If true, then we post an Invalidation (ie redraw) request if any active InputBehavior responds to Hover events (default false)
  **/
  @:uproperty public var bAutoInvalidateOnHover : Bool;
  
}
