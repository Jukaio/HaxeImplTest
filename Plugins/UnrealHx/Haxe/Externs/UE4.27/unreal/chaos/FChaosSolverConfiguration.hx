/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.chaos;

@:umodule("Chaos")
@:glueCppIncludes("Public/ChaosSolverConfiguration.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FChaosSolverConfiguration {
  @:uproperty public var bGenerateContactGraph : Bool;
  @:uproperty public var TrailingFilterSettings : unreal.chaos.FSolverTrailingFilterSettings;
  @:uproperty public var bGenerateTrailingData : Bool;
  @:uproperty public var BreakingFilterSettings : unreal.chaos.FSolverBreakingFilterSettings;
  @:uproperty public var bGenerateBreakData : Bool;
  @:uproperty public var CollisionFilterSettings : unreal.chaos.FSolverCollisionFilterSettings;
  @:uproperty public var bGenerateCollisionData : Bool;
  @:uproperty public var ClusterUnionConnectionType : unreal.chaos.EClusterUnionMethod;
  @:uproperty public var ClusterConnectionFactor : unreal.Float32;
  
  /**
    The number of iterations to run during the constraint fixup step for each joint. This applies a post-solve
    correction that can address errors left behind during the main solver iterations.
  **/
  @:uproperty public var JointPushOutPairIterations : unreal.Int32;
  
  /**
    The number of iterations to run on each constraint during the constraint solver step
  **/
  @:uproperty public var JointPairIterations : unreal.Int32;
  
  /**
    During collision detection, if tweo shapes are at least this far apart we do not calculate their nearest features
    during the collision detection step.
  **/
  @:uproperty public var CollisionCullDistance : unreal.Float32;
  
  /**
    An upper limit on the collision margin that will be subtracted from boxes and convex shapes. See CollisionMarginFraction
  **/
  @:uproperty public var CollisionMarginMax : unreal.Float32;
  
  /**
    A collision margin as a fraction of size used by some boxes and convex shapes to improve collision detection results.
    The core geometry of shapes that support a margin are reduced in size by the margin, and the margin
    is added back on during collision detection. The net result is a shape of the same size but with rounded corners.
  **/
  @:uproperty public var CollisionMarginFraction : unreal.Float32;
  
  /**
    During pushout iterations we pushout each constraint in turn. For each constraint
    we run the pushout step CollisionPairIterations times in a row.
  **/
  @:uproperty public var CollisionPushOutPairIterations : unreal.Int32;
  
  /**
    The number of iterations to run during the constraint fixup step. This applies a post-solve
    correction that can address errors left behind during the main solver iterations.
  **/
  @:uproperty public var PushOutIterations : unreal.Int32;
  
  /**
    During solver iterations we solve each constraint in turn. For each constraint
    we run the solve step CollisionPairIterations times in a row.
  **/
  @:uproperty public var CollisionPairIterations : unreal.Int32;
  
  /**
    The number of iterations to run during the constraint solver step
  **/
  @:uproperty public var Iterations : unreal.Int32;
  
}
