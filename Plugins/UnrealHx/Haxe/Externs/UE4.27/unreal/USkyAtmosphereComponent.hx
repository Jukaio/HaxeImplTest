/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  A component that represents a planet atmosphere material and simulates sky and light scattering within it.
  @see https://docs.unrealengine.com/en-US/Engine/Actors/FogEffects/SkyAtmosphere/index.html
**/
@:glueCppIncludes("Components/SkyAtmosphereComponent.h")
@:uextern @:uclass extern class USkyAtmosphereComponent extends unreal.USceneComponent {
  
  /**
    The distance (kilometers) at which we start evaluating the aerial perspective. Having the aerial perspective starts away from the camera can help with performance: pixels not affected by the aerial perspective will have their computation skipped using early depth test.
  **/
  @:uproperty public var AerialPerspectiveStartDepth : unreal.Float32;
  
  /**
    The minimum elevation angle in degree that should be used to evaluate the sun transmittance to the ground. Useful to maintain a visible sun light and shadow on meshes even when the sun has started going below the horizon. This does not affect the aerial perspective.
  **/
  @:uproperty public var TransmittanceMinLightElevationAngle : unreal.Float32;
  
  /**
    Scale the sky and atmosphere lights contribution to the height fog when SupportSkyAtmosphereAffectsHeightFog project setting is true.
  **/
  @:uproperty public var HeightFogContribution : unreal.Float32;
  
  /**
    Makes the aerial perspective look thicker by scaling distances from view to surfaces (opaque and translucent).
  **/
  @:uproperty public var AerialPespectiveViewDistanceScale : unreal.Float32;
  
  /**
    Scales the luminance of pixels representing the sky, i.e. not belonging to any surface.
  **/
  @:uproperty public var SkyLuminanceFactor : unreal.FLinearColor;
  
  /**
    Represents the altitude based tent distribution of absorption particles in the atmosphere.
  **/
  @:uproperty public var OtherTentDistribution : unreal.FTentDistribution;
  
  /**
    Absorption coefficients for another atmosphere layer. Density increase from 0 to 1 between 10 to 25km and decreases from 1 to 0 between 25 to 40km. The default values represents ozone molecules absorption in the Earth atmosphere.
  **/
  @:uproperty public var OtherAbsorption : unreal.FLinearColor;
  
  /**
    Absorption coefficients for another atmosphere layer. Density increase from 0 to 1 between 10 to 25km and decreases from 1 to 0 between 25 to 40km. This approximates ozone molecules distribution in the Earth atmosphere.
  **/
  @:uproperty public var OtherAbsorptionScale : unreal.Float32;
  
  /**
    The altitude in kilometer at which Mie effects are reduced to 40%.
  **/
  @:uproperty public var MieExponentialDistribution : unreal.Float32;
  
  /**
    A value of 0 mean light is uniformly scattered. A value closer to 1 means lights will scatter more forward, resulting in halos around light sources.
  **/
  @:uproperty public var MieAnisotropy : unreal.Float32;
  
  /**
    The Mie absorption coefficients resulting from particles in the air at an altitude of 0 kilometer. As it becomes higher, light will be absorbed more.
  **/
  @:uproperty public var MieAbsorption : unreal.FLinearColor;
  
  /**
    Mie absorption coefficient scale.
  **/
  @:uproperty public var MieAbsorptionScale : unreal.Float32;
  
  /**
    The Mie scattering coefficients resulting from particles in the air at an altitude of 0 kilometer. As it becomes higher, light will be scattered more.
  **/
  @:uproperty public var MieScattering : unreal.FLinearColor;
  
  /**
    Mie scattering coefficient scale.
  **/
  @:uproperty public var MieScatteringScale : unreal.Float32;
  
  /**
    The altitude in kilometer at which Rayleigh scattering effect is reduced to 40%.
  **/
  @:uproperty public var RayleighExponentialDistribution : unreal.Float32;
  
  /**
    The Rayleigh scattering coefficients resulting from molecules in the air at an altitude of 0 kilometer.
  **/
  @:uproperty public var RayleighScattering : unreal.FLinearColor;
  
  /**
    Rayleigh scattering coefficient scale.
  **/
  @:uproperty public var RayleighScatteringScale : unreal.Float32;
  
  /**
    Scale the atmosphere tracing sample count. Quality level scalability
    The sample count is still clamped according to scalability setting to 'r.SkyAtmosphere.SampleCountMax' when 'r.SkyAtmosphere.FastSkyLUT' is 0.
    The sample count is still clamped according to scalability setting to 'r.SkyAtmosphere.FastSkyLUT.SampleCountMax' when 'r.SkyAtmosphere.FastSkyLUT' is 1.
    The sample count is still clamped for aerial perspective according to  'r.SkyAtmosphere.AerialPerspectiveLUT.SampleCountMaxPerSlice'.
  **/
  @:uproperty public var TraceSampleCountScale : unreal.Float32;
  
  /**
    Render multi scattering as if sun light would bounce around in the atmosphere. This is achieved using a dual scattering approach.
  **/
  @:uproperty public var MultiScatteringFactor : unreal.Float32;
  
  /**
    The height of the atmosphere layer above the ground in kilometers.
  **/
  @:uproperty public var AtmosphereHeight : unreal.Float32;
  
  /**
    The ground albedo that will tint the atmosphere when the sun light will bounce on it. Only taken into account when MultiScattering>0.0.
  **/
  @:uproperty public var GroundAlbedo : unreal.FColor;
  
  /**
    The radius in kilometers from the center of the planet to the ground level.
  **/
  @:uproperty public var BottomRadius : unreal.Float32;
  
  /**
    The ground albedo that will tint the atmosphere when the sun light will bounce on it. Only taken into account when MultiScattering>0.0.
  **/
  @:uproperty public var TransformMode : unreal.ESkyAtmosphereTransformMode;
  @:ufunction(BlueprintCallable) @:final public function OverrideAtmosphereLightDirection(AtmosphereLightIndex : unreal.Int32, LightDirection : unreal.Const<unreal.PRef<unreal.FVector>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetAtmosphereHeight(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMultiScatteringFactor(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetRayleighScatteringScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetRayleighScattering(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetRayleighExponentialDistribution(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieScatteringScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieScattering(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieAbsorptionScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieAbsorption(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieAnisotropy(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetMieExponentialDistribution(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOtherAbsorptionScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetOtherAbsorption(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetSkyLuminanceFactor(NewValue : unreal.FLinearColor) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetAerialPespectiveViewDistanceScale(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetHeightFogContribution(NewValue : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function GetAtmosphereTransmitanceOnGroundAtPlanetTop(DirectionalLight : unreal.UDirectionalLightComponent) : unreal.FLinearColor;
  
}
