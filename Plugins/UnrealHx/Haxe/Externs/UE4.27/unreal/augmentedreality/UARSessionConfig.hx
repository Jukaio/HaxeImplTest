/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.augmentedreality;

/**
  An Unreal Data Asset that defines what features are used in the AR session.
**/
@:umodule("AugmentedReality")
@:glueCppIncludes("ARSessionConfig.h")
@:uextern @:uclass extern class UARSessionConfig extends unreal.UDataAsset {
  
  /**
    The default mesh material used by the wireframe setting of the generated mesh component.  Note: It is recommended to ignore this wireframe feature and use a wireframe material for the DefaultMeshMaterial instead.
  **/
  @:uproperty private var DefaultWireframeMeshMaterial : unreal.UMaterialInterface;
  
  /**
    The default mesh material used by the generated mesh component.
  **/
  @:uproperty private var DefaultMeshMaterial : unreal.UMaterialInterface;
  
  /**
    @see UARGeoAnchorComponent
  **/
  @:uproperty private var GeoAnchorComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARGeoAnchorComponent>;
  
  /**
    @see UARMeshComponent
  **/
  @:uproperty private var MeshComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARMeshComponent>;
  
  /**
    @see UARObjectComponent
  **/
  @:uproperty private var ObjectComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARObjectComponent>;
  
  /**
    @see UAREnvironmentProbeComponent
  **/
  @:uproperty private var EnvironmentProbeComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UAREnvironmentProbeComponent>;
  
  /**
    @see UARPoseComponent
  **/
  @:uproperty private var PoseComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARPoseComponent>;
  
  /**
    @see UARQRCodeComponent
  **/
  @:uproperty private var QRCodeComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARQRCodeComponent>;
  
  /**
    @see UARImageComponent
  **/
  @:uproperty private var ImageComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARImageComponent>;
  
  /**
    @see UARFaceComponent
  **/
  @:uproperty private var FaceComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARFaceComponent>;
  
  /**
    @see UARPointComponent
  **/
  @:uproperty private var PointComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARPointComponent>;
  
  /**
    @see UARPlaneComponent
  **/
  @:uproperty private var PlaneComponentClass : unreal.TSubclassOf<unreal.augmentedreality.UARPlaneComponent>;
  
  /**
    @see EARSceneReconstruction
  **/
  @:uproperty private var SceneReconstructionMethod : unreal.augmentedreality.EARSceneReconstruction;
  
  /**
    @see EARSessionTrackingFeature
  **/
  @:uproperty private var EnabledSessionTrackingFeature : unreal.augmentedreality.EARSessionTrackingFeature;
  
  /**
    Data array for storing the cooked image database. This feature is used by ARCore.
  **/
  @:uproperty private var SerializedARCandidateImageDatabase : unreal.TArray<unreal.UInt8>;
  
  /**
    The maximum number of faces to track simultaneously. This feature is used by ARKit.
  **/
  @:uproperty private var MaxNumberOfTrackedFaces : unreal.Int32;
  
  /**
    @see EARFaceTrackingUpdate
  **/
  @:uproperty private var FaceTrackingUpdate : unreal.augmentedreality.EARFaceTrackingUpdate;
  
  /**
    @see EARFaceTrackingDirection
  **/
  @:uproperty private var FaceTrackingDirection : unreal.augmentedreality.EARFaceTrackingDirection;
  
  /**
    The desired video format (or the default, if not supported) that this session should use if the camera is enabled.
    Use GetSupportedVideoFormats to get a list of device-supported formats.
  **/
  @:uproperty private var DesiredVideoFormat : unreal.augmentedreality.FARVideoFormat;
  
  /**
    The list of candidate objects to search for in the scene. This feature is used by ARKit.
  **/
  @:uproperty private var CandidateObjects : unreal.TArray<unreal.augmentedreality.UARCandidateObject>;
  
  /**
    A previously saved world that will be loaded when the session starts. This feature is used by ARKit.
  **/
  @:uproperty private var WorldMapData : unreal.TArray<unreal.UInt8>;
  
  /**
    @see EAREnvironmentCaptureProbeType
  **/
  @:uproperty private var EnvironmentCaptureProbeType : unreal.augmentedreality.EAREnvironmentCaptureProbeType;
  
  /**
    The maximum number of images to track at the same time. Defaults to 1. This feature is used by ARKit.
  **/
  @:uproperty private var MaxNumSimultaneousImagesTracked : unreal.Int32;
  
  /**
    The list of candidate images to detect within the AR camera view. This feature is used by ARKit.
  **/
  @:uproperty private var CandidateImages : unreal.TArray<unreal.augmentedreality.UARCandidateImage>;
  
  /**
    @see EARFrameSyncMode
  **/
  @:uproperty private var FrameSyncMode : unreal.augmentedreality.EARFrameSyncMode;
  
  /**
    @see EARLightEstimationMode
  **/
  @:uproperty private var LightEstimationMode : unreal.augmentedreality.EARLightEstimationMode;
  
  /**
    @see EARPlaneDetectionMode
  **/
  @:deprecated @:uproperty private var PlaneDetectionMode_DEPRECATED : unreal.augmentedreality.EARPlaneDetectionMode;
  
  /**
    @see EARSessionType
  **/
  @:uproperty private var SessionType : unreal.augmentedreality.EARSessionType;
  
  /**
    @see EARWorldAlignment
  **/
  @:uproperty private var WorldAlignment : unreal.augmentedreality.EARWorldAlignment;
  
  /**
    Boolean to determine whether to use the standard onboarding UX, if the system supports it. This feature is used by ARKit.
  **/
  @:uproperty public var bUseStandardOnboardingUX : Bool;
  
  /**
    Boolean to determine whether to automatically estimate and set the scale of a detected, or tracked, image. This feature is used by ARKit.
  **/
  @:uproperty public var bUseAutomaticImageScaleEstimation : Bool;
  
  /**
    Boolean to determine whether to use the scene depth information for occluding virtual content. This feature is used by ARCore and ARKit.
  **/
  @:uproperty public var bUseSceneDepthForOcclusion : Bool;
  
  /**
    Boolean to determine whether to use the person segmentation results for occluding virtual content. This feature is used by ARKit.
  **/
  @:uproperty public var bUsePersonSegmentationForOcclusion : Bool;
  
  /**
    Boolean to determine whether the AR system should track scene objects: @see EARObjectClassification::SceneObject.
  **/
  @:uproperty public var bTrackSceneObjects : Bool;
  
  /**
    Boolean to determine whether the AR system should render the mesh data as wireframe.  It is reccomended to simply set the DefaultMeshMaterial to whatever is desired, including a wireframe material and ignore this setting (there is no good reason for this to exist as a special case).
  **/
  @:uproperty public var bRenderMeshDataInWireframe : Bool;
  
  /**
    Boolean to determine whether the AR system should render the mesh data as occlusion meshes.
  **/
  @:uproperty public var bUseMeshDataForOcclusion : Bool;
  
  /**
    Boolean to determine whether the AR system should generate collision data from the mesh data.
  **/
  @:uproperty public var bGenerateNavMeshForMeshData : Bool;
  
  /**
    Boolean to determine whether the AR system should generate collision data from the mesh data.
  **/
  @:uproperty public var bGenerateCollisionForMeshData : Bool;
  
  /**
    Boolean to determine whether the AR system should generate mesh data that can be used for rendering, collision, NavMesh, and more. This feature is used by OpenXR, Windows Mixed Reality, and Magic Leap.
  **/
  @:uproperty public var bGenerateMeshDataFromTrackedGeometry : Bool;
  
  /**
    @see EARWorldAlignment
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldAlignment() : unreal.augmentedreality.EARWorldAlignment;
  
  /**
    @see SessionType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSessionType() : unreal.augmentedreality.EARSessionType;
  
  /**
    @see PlaneDetectionMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPlaneDetectionMode() : unreal.augmentedreality.EARPlaneDetectionMode;
  
  /**
    @see LightEstimationMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLightEstimationMode() : unreal.augmentedreality.EARLightEstimationMode;
  
  /**
    @see FrameSyncMode
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFrameSyncMode() : unreal.augmentedreality.EARFrameSyncMode;
  
  /**
    @see bEnableAutomaticCameraOverlay
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldRenderCameraOverlay() : Bool;
  
  /**
    @see bEnableAutomaticCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldEnableCameraTracking() : Bool;
  
  /**
    @see bEnableAutoFocus
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldEnableAutoFocus() : Bool;
  
  /**
    @see bEnableAutoFocus
  **/
  @:ufunction(BlueprintCallable) @:final public function SetEnableAutoFocus(bNewValue : Bool) : Void;
  
  /**
    @see bResetCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldResetCameraTracking() : Bool;
  
  /**
    @see bResetCameraTracking
  **/
  @:ufunction(BlueprintCallable) @:final public function SetResetCameraTracking(bNewValue : Bool) : Void;
  
  /**
    @see bResetTrackedObjects
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function ShouldResetTrackedObjects() : Bool;
  
  /**
    @see bResetTrackedObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function SetResetTrackedObjects(bNewValue : Bool) : Void;
  
  /**
    @see CandidateImages
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCandidateImageList() : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateImage>>>;
  
  /**
    Add a new CandidateImage to the ARSessionConfig.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddCandidateImage(NewCandidateImage : unreal.augmentedreality.UARCandidateImage) : Void;
  
  /**
    @see MaxNumSimultaneousImagesTracked
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMaxNumSimultaneousImagesTracked() : unreal.Int32;
  
  /**
    @see EnvironmentCaptureProbeType
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetEnvironmentCaptureProbeType() : unreal.augmentedreality.EAREnvironmentCaptureProbeType;
  
  /**
    @see WorldMapData
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorldMapData() : unreal.Const<unreal.PRef<unreal.TArray<unreal.UInt8>>>;
  
  /**
    @see WorldMapData
  **/
  @:ufunction(BlueprintCallable) @:final public function SetWorldMapData(WorldMapData : unreal.TArray<unreal.UInt8>) : Void;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetCandidateObjectList() : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateObject>>>;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCandidateObjectList(InCandidateObjects : unreal.Const<unreal.PRef<unreal.TArray<unreal.augmentedreality.UARCandidateObject>>>) : Void;
  
  /**
    @see CandidateObjects
  **/
  @:ufunction(BlueprintCallable) @:final public function AddCandidateObject(CandidateObject : unreal.augmentedreality.UARCandidateObject) : Void;
  
  /**
    @see DesiredVideoFormat
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDesiredVideoFormat() : unreal.augmentedreality.FARVideoFormat;
  
  /**
    @see DesiredVideoFormat
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDesiredVideoFormat(NewFormat : unreal.augmentedreality.FARVideoFormat) : Void;
  
  /**
    @see FaceTrackingDirection
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFaceTrackingDirection() : unreal.augmentedreality.EARFaceTrackingDirection;
  
  /**
    @see FaceTrackingDirection
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFaceTrackingDirection(InDirection : unreal.augmentedreality.EARFaceTrackingDirection) : Void;
  
  /**
    @see FaceTrackingUpdate
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFaceTrackingUpdate() : unreal.augmentedreality.EARFaceTrackingUpdate;
  
  /**
    @see FaceTrackingUpdate
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFaceTrackingUpdate(InUpdate : unreal.augmentedreality.EARFaceTrackingUpdate) : Void;
  
  /**
    @see EnabledSessionTrackingFeatures
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetEnabledSessionTrackingFeature() : unreal.augmentedreality.EARSessionTrackingFeature;
  
  /**
    @see SceneReconstructionMethod
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSceneReconstructionMethod() : unreal.augmentedreality.EARSceneReconstruction;
  
  /**
    @see EnabledSessionTrackingFeatures
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSessionTrackingFeatureToEnable(InSessionTrackingFeature : unreal.augmentedreality.EARSessionTrackingFeature) : Void;
  
  /**
    @see SceneReconstructionMethod
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSceneReconstructionMethod(InSceneReconstructionMethod : unreal.augmentedreality.EARSceneReconstruction) : Void;
  
}
