// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/uforcefeedbackcomponent.hx
package unreal;
/**
  
  ForceFeedbackComponent allows placing a rumble effect in to the world and having it apply to player characters who come near it
  
**/

@:umodule("Unreal")
@:glueCppIncludes("Components/ForceFeedbackComponent.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.UForceFeedbackComponent_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.UForceFeedbackComponent")) #end
class UForceFeedbackComponent #if !macro extends unreal.USceneComponent #end {
  #if !macro 
  /**
    
    called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early
    
  **/
  
  @:uproperty
  public var OnForceFeedbackFinished(get,set):unreal.PPtr<unreal.FOnForceFeedbackFinished>;
  /**
    
    If bOverrideSettings is true, the attenuation properties to use for effects generated by this component
    
  **/
  
  @:uproperty
  public var AttenuationOverrides(get,set):unreal.PPtr<unreal.FForceFeedbackAttenuationSettings>;
  /**
    
    If bOverrideSettings is false, the asset to use to determine attenuation properties for effects generated by this component
    
  **/
  
  @:uproperty
  public var AttenuationSettings(get,set):unreal.UForceFeedbackAttenuation;
  /**
    
    The intensity multiplier to apply to effects generated by this component
    
  **/
  
  @:uproperty
  public var IntensityMultiplier(get,set):cpp.Float32;
  /**
    
    Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties
    
  **/
  
  @:uproperty
  public var bOverrideAttenuation(get,set):Bool;
  /**
    
    Should the playback of the forcefeedback pattern ignore time dilation and use the app's delta time
    
  **/
  
  @:uproperty
  public var bIgnoreTimeDilation(get,set):Bool;
  @:uproperty
  public var bLooping(get,set):Bool;
  /**
    
    Stop effect when owner is destroyed
    
  **/
  
  @:uproperty
  public var bStopWhenOwnerDestroyed(get,set):Bool;
  /**
    
    Auto destroy this component on completion
    
  **/
  
  @:uproperty
  public var bAutoDestroy(get,set):Bool;
  /**
    
    The feedback effect to be played
    
  **/
  
  @:uproperty
  public var ForceFeedbackEffect(get,set):unreal.UForceFeedbackEffect;
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.UForceFeedbackComponent_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("ForceFeedbackComponent", "unreal.UForceFeedbackComponent");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.UForceFeedbackComponent(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.UForceFeedbackComponent {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_OnForceFeedbackFinished(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UForceFeedbackComponent_Glue_obj::get_OnForceFeedbackFinished(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UForceFeedbackComponent *) self )->OnForceFeedbackFinished)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_OnForceFeedbackFinished() : unreal.PPtr<unreal.FOnForceFeedbackFinished> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_OnForceFeedbackFinished");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "OnForceFeedbackFinished");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FOnForceFeedbackFinished.fromPointer( uhx.glues.UForceFeedbackComponent_Glue.get_OnForceFeedbackFinished(uhx_arg_0) ) : unreal.PPtr<unreal.FOnForceFeedbackFinished> );
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_OnForceFeedbackFinished(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_OnForceFeedbackFinished(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UForceFeedbackComponent *) self )->OnForceFeedbackFinished = *::uhx::StructHelper< FOnForceFeedbackFinished >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_OnForceFeedbackFinished(value : unreal.FOnForceFeedbackFinished) : unreal.FOnForceFeedbackFinished {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_OnForceFeedbackFinished");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "OnForceFeedbackFinished", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_OnForceFeedbackFinished(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_AttenuationOverrides(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UForceFeedbackComponent_Glue_obj::get_AttenuationOverrides(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UForceFeedbackComponent *) self )->AttenuationOverrides)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_AttenuationOverrides() : unreal.PPtr<unreal.FForceFeedbackAttenuationSettings> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_AttenuationOverrides");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "AttenuationOverrides");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FForceFeedbackAttenuationSettings.fromPointer( uhx.glues.UForceFeedbackComponent_Glue.get_AttenuationOverrides(uhx_arg_0) ) : unreal.PPtr<unreal.FForceFeedbackAttenuationSettings> );
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_AttenuationOverrides(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_AttenuationOverrides(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UForceFeedbackComponent *) self )->AttenuationOverrides = *::uhx::StructHelper< FForceFeedbackAttenuationSettings >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_AttenuationOverrides(value : unreal.FForceFeedbackAttenuationSettings) : unreal.FForceFeedbackAttenuationSettings {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_AttenuationOverrides");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "AttenuationOverrides", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_AttenuationOverrides(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_AttenuationSettings(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UForceFeedbackComponent_Glue_obj::get_AttenuationSettings(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UForceFeedbackAttenuation * >( ( (UForceFeedbackComponent *) self )->AttenuationSettings )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_AttenuationSettings() : unreal.UForceFeedbackAttenuation {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_AttenuationSettings");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "AttenuationSettings");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.UForceFeedbackComponent_Glue.get_AttenuationSettings(uhx_arg_0)) : unreal.UForceFeedbackAttenuation );
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_AttenuationSettings(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_AttenuationSettings(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (UForceFeedbackComponent *) self )->AttenuationSettings = ( (UForceFeedbackAttenuation *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_AttenuationSettings(value : unreal.UForceFeedbackAttenuation) : unreal.UForceFeedbackAttenuation {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_AttenuationSettings");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "AttenuationSettings", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.UForceFeedbackComponent_Glue.set_AttenuationSettings(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_IntensityMultiplier(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::UForceFeedbackComponent_Glue_obj::get_IntensityMultiplier(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->IntensityMultiplier;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_IntensityMultiplier() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_IntensityMultiplier");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "IntensityMultiplier");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_IntensityMultiplier(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_IntensityMultiplier(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_IntensityMultiplier(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (UForceFeedbackComponent *) self )->IntensityMultiplier = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_IntensityMultiplier(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_IntensityMultiplier");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "IntensityMultiplier", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_IntensityMultiplier(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bOverrideAttenuation(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::get_bOverrideAttenuation(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->bOverrideAttenuation;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bOverrideAttenuation() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bOverrideAttenuation");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bOverrideAttenuation");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_bOverrideAttenuation(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bOverrideAttenuation(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_bOverrideAttenuation(unreal::UIntPtr self, bool value) {\n\t( (UForceFeedbackComponent *) self )->bOverrideAttenuation = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bOverrideAttenuation(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bOverrideAttenuation");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bOverrideAttenuation", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_bOverrideAttenuation(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bIgnoreTimeDilation(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::get_bIgnoreTimeDilation(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->bIgnoreTimeDilation;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bIgnoreTimeDilation() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bIgnoreTimeDilation");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bIgnoreTimeDilation");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_bIgnoreTimeDilation(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bIgnoreTimeDilation(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_bIgnoreTimeDilation(unreal::UIntPtr self, bool value) {\n\t( (UForceFeedbackComponent *) self )->bIgnoreTimeDilation = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bIgnoreTimeDilation(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bIgnoreTimeDilation");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bIgnoreTimeDilation", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_bIgnoreTimeDilation(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bLooping(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::get_bLooping(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->bLooping;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bLooping() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bLooping");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bLooping");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_bLooping(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bLooping(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_bLooping(unreal::UIntPtr self, bool value) {\n\t( (UForceFeedbackComponent *) self )->bLooping = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bLooping(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bLooping");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bLooping", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_bLooping(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bStopWhenOwnerDestroyed(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::get_bStopWhenOwnerDestroyed(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->bStopWhenOwnerDestroyed;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bStopWhenOwnerDestroyed() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bStopWhenOwnerDestroyed");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bStopWhenOwnerDestroyed");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_bStopWhenOwnerDestroyed(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bStopWhenOwnerDestroyed(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_bStopWhenOwnerDestroyed(unreal::UIntPtr self, bool value) {\n\t( (UForceFeedbackComponent *) self )->bStopWhenOwnerDestroyed = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bStopWhenOwnerDestroyed(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bStopWhenOwnerDestroyed");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bStopWhenOwnerDestroyed", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_bStopWhenOwnerDestroyed(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bAutoDestroy(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::get_bAutoDestroy(unreal::UIntPtr self) {\n\treturn ( (UForceFeedbackComponent *) self )->bAutoDestroy;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bAutoDestroy() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bAutoDestroy");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bAutoDestroy");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UForceFeedbackComponent_Glue.get_bAutoDestroy(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bAutoDestroy(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_bAutoDestroy(unreal::UIntPtr self, bool value) {\n\t( (UForceFeedbackComponent *) self )->bAutoDestroy = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bAutoDestroy(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bAutoDestroy");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bAutoDestroy", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UForceFeedbackComponent_Glue.set_bAutoDestroy(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "GameFramework/ForceFeedbackEffect.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_ForceFeedbackEffect(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UForceFeedbackComponent_Glue_obj::get_ForceFeedbackEffect(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UForceFeedbackEffect * >( ( (UForceFeedbackComponent *) self )->ForceFeedbackEffect )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ForceFeedbackEffect() : unreal.UForceFeedbackEffect {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ForceFeedbackEffect");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ForceFeedbackEffect");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.UForceFeedbackComponent_Glue.get_ForceFeedbackEffect(uhx_arg_0)) : unreal.UForceFeedbackEffect );
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "GameFramework/ForceFeedbackEffect.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_ForceFeedbackEffect(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::set_ForceFeedbackEffect(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (UForceFeedbackComponent *) self )->ForceFeedbackEffect = ( (UForceFeedbackEffect *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ForceFeedbackEffect(value : unreal.UForceFeedbackEffect) : unreal.UForceFeedbackEffect {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ForceFeedbackEffect");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ForceFeedbackEffect", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.UForceFeedbackComponent_Glue.set_ForceFeedbackEffect(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  /**
    
    Set what force feedback effect is played by this component
    
  **/
  
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "GameFramework/ForceFeedbackEffect.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void SetForceFeedbackEffect(unreal::UIntPtr self, unreal::UIntPtr NewForceFeedbackEffect);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::SetForceFeedbackEffect(unreal::UIntPtr self, unreal::UIntPtr NewForceFeedbackEffect) {\n\t( (UForceFeedbackComponent *) self )->SetForceFeedbackEffect(( (UForceFeedbackEffect *) NewForceFeedbackEffect ));\n}")
  @:ufunction(BlueprintCallable)
  @:final @:nonVirtual 
  public function SetForceFeedbackEffect(NewForceFeedbackEffect : unreal.UForceFeedbackEffect) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "SetForceFeedbackEffect");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "SetForceFeedbackEffect", [NewForceFeedbackEffect]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(NewForceFeedbackEffect);
    uhx.glues.UForceFeedbackComponent_Glue.SetForceFeedbackEffect(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  /**
    
    Start a feedback effect playing
    
  **/
  
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void Play(unreal::UIntPtr self, cpp::Float32 StartTime);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::Play(unreal::UIntPtr self, cpp::Float32 StartTime) {\n\t( (UForceFeedbackComponent *) self )->Play(StartTime);\n}")
  @:value({ StartTime : 0.000000 })
  @:ufunction(BlueprintCallable)
  public function Play(?StartTime : cpp.Float32) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "Play");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "Play", [StartTime]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = StartTime != null ? (StartTime) : ((0.000000 : cpp.Float32));
    uhx.glues.UForceFeedbackComponent_Glue.Play(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  /**
    
    Stop playing the feedback effect
    
  **/
  
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void Stop(unreal::UIntPtr self);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::Stop(unreal::UIntPtr self) {\n\t( (UForceFeedbackComponent *) self )->Stop();\n}")
  @:ufunction(BlueprintCallable)
  public function Stop() : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "Stop");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "Stop", null);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    uhx.glues.UForceFeedbackComponent_Glue.Stop(uhx_arg_0);
    
    #end
    
  }
  /**
    
    Set a new intensity multiplier
    
  **/
  
  @:glueCppIncludes("Components/ForceFeedbackComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void SetIntensityMultiplier(unreal::UIntPtr self, cpp::Float32 NewIntensityMultiplier);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::SetIntensityMultiplier(unreal::UIntPtr self, cpp::Float32 NewIntensityMultiplier) {\n\t( (UForceFeedbackComponent *) self )->SetIntensityMultiplier(NewIntensityMultiplier);\n}")
  @:ufunction(BlueprintCallable)
  @:final @:nonVirtual 
  public function SetIntensityMultiplier(NewIntensityMultiplier : cpp.Float32) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "SetIntensityMultiplier");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "SetIntensityMultiplier", [NewIntensityMultiplier]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = NewIntensityMultiplier;
    uhx.glues.UForceFeedbackComponent_Glue.SetIntensityMultiplier(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  /**
    
    Modify the attenuation settings of the component
    
  **/
  
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void AdjustAttenuation(unreal::UIntPtr self, unreal::VariantPtr InAttenuationSettings);")
  @:glueCppCode("void uhx::glues::UForceFeedbackComponent_Glue_obj::AdjustAttenuation(unreal::UIntPtr self, unreal::VariantPtr InAttenuationSettings) {\n\t( (UForceFeedbackComponent *) self )->AdjustAttenuation(*::uhx::StructHelper< FForceFeedbackAttenuationSettings >::getPointer(InAttenuationSettings));\n}")
  @:ufunction(BlueprintCallable)
  @:final @:nonVirtual 
  public function AdjustAttenuation(InAttenuationSettings : unreal.PRef<unreal.Const<unreal.FForceFeedbackAttenuationSettings>>) : Void {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "AdjustAttenuation");
    #end
    #if cppia
    unreal.ReflectAPI.callMethod(this, "AdjustAttenuation", [InAttenuationSettings]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = InAttenuationSettings;
    uhx.glues.UForceFeedbackComponent_Glue.AdjustAttenuation(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  @:glueCppIncludes("Components/ForceFeedbackComponent.h", "uhx/Wrapper.h", "Classes/GameFramework/ForceFeedbackAttenuation.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static bool BP_GetAttenuationSettingsToApply(unreal::UIntPtr self, unreal::VariantPtr OutAttenuationSettings);")
  @:glueCppCode("bool uhx::glues::UForceFeedbackComponent_Glue_obj::BP_GetAttenuationSettingsToApply(unreal::UIntPtr self, unreal::VariantPtr OutAttenuationSettings) {\n\treturn ( (UForceFeedbackComponent *) self )->BP_GetAttenuationSettingsToApply(*::uhx::StructHelper< FForceFeedbackAttenuationSettings >::getPointer(OutAttenuationSettings));\n}")
  @:ufunction(BlueprintCallable)
  @:thisConst
  @:final @:nonVirtual 
  public function BP_GetAttenuationSettingsToApply(OutAttenuationSettings : unreal.PRef<unreal.FForceFeedbackAttenuationSettings>) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "BP_GetAttenuationSettingsToApply");
    #end
    #if cppia
    return unreal.ReflectAPI.callMethod(this, "BP_GetAttenuationSettingsToApply", [OutAttenuationSettings]);
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = OutAttenuationSettings;
    return uhx.glues.UForceFeedbackComponent_Glue.BP_GetAttenuationSettingsToApply(uhx_arg_0, uhx_arg_1);
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UForceFeedbackComponent_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (UForceFeedbackComponent::StaticClass()) );\n}")
  @:ifFeature("unreal.UForceFeedbackComponent.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("ForceFeedbackComponent");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.UForceFeedbackComponent_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
