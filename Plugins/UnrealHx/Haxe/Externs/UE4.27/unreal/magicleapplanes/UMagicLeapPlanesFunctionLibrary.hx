/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleapplanes;

@:umodule("MagicLeapPlanes")
@:glueCppIncludes("MagicLeapPlanesFunctionLibrary.h")
@:uextern @:uclass extern class UMagicLeapPlanesFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Create a planes tracker.
  **/
  @:ufunction(BlueprintCallable) static public function CreateTracker() : Bool;
  
  /**
    Destroy a planes tracker.
  **/
  @:ufunction(BlueprintCallable) static public function DestroyTracker() : Bool;
  
  /**
    Is a planes tracker already created.
  **/
  @:ufunction(BlueprintCallable) static public function IsTrackerValid() : Bool;
  
  /**
    Adds a new plane query.
  **/
  @:ufunction(BlueprintCallable) static public function AddPersistentQuery(PersistentQueryType : unreal.magicleapplanes.EMagicLeapPlaneQueryType) : unreal.FGuid;
  
  /**
    Removes a plane query. Returns a boolean of the operation's success
  **/
  @:ufunction(BlueprintCallable) static public function RemovePersistentQuery(Handle : unreal.FGuid) : Bool;
  
  /**
    Initiates a plane query.
  **/
  @:ufunction(BlueprintCallable) static public function PlanesQueryBeginAsync(Query : unreal.Const<unreal.PRef<unreal.magicleapplanes.FMagicLeapPlanesQuery>>, ResultDelegate : unreal.Const<unreal.PRef<unreal.magicleapplanes.FMagicLeapPlanesResultDelegate>>) : Bool;
  
  /**
    Initiates a persistant plane query.
  **/
  @:ufunction(BlueprintCallable) static public function PlanesPersistentQueryBeginAsync(Query : unreal.Const<unreal.PRef<unreal.magicleapplanes.FMagicLeapPlanesQuery>>, Handle : unreal.Const<unreal.PRef<unreal.FGuid>>, ResultDelegate : unreal.Const<unreal.PRef<unreal.magicleapplanes.FMagicLeapPersistentPlanesResultDelegate>>) : Bool;
  
  /**
    Gets the expected scale of the actor to be placed within the bounds of the given plane.
    Ensure that the actor rotation is 0 (FQuat::Identity) before sending it to this function.
    @param ContentActor Actor for which the scale is to be calculated.
    @param PlaneDimensions Dimensions (in Unreal units) of the plane the actor has to be placed on.
    @return A vector representing the expected scale of the Actor.
  **/
  @:ufunction(BlueprintCallable) static public function GetContentScale(ContentActor : unreal.Const<unreal.AActor>, PlaneResult : unreal.Const<unreal.PRef<unreal.magicleapplanes.FMagicLeapPlaneResult>>) : unreal.FTransform;
  
  /**
    Re-orders an array of plane query flags based on the priority list passed.
    @param InPriority The priority list by which to order the array of plane query flags.
    @param InFlagsToReorder The array of plane query flags to be reordered.
    @param OutReorderedFlags The reordered array of plane query flags.
  **/
  @:ufunction(BlueprintCallable) static public function ReorderPlaneFlags(InPriority : unreal.Const<unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>>, InFlagsToReorder : unreal.Const<unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>>, OutReorderedFlags : unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>) : Void;
  
  /**
    Removes
    @param InPriority The priority list by which to order the array of plane query flags.
    @param InFlagsToReorder The array of plane query flags to be reordered.
    @param OutReorderedFlags The reordered array of plane query flags.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveFlagsNotInQuery(InQueryFlags : unreal.Const<unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>>, InResultFlags : unreal.Const<unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>>, OutFlags : unreal.PRef<unreal.TArray<unreal.magicleapplanes.EMagicLeapPlaneQueryFlags>>) : Void;
  
}
