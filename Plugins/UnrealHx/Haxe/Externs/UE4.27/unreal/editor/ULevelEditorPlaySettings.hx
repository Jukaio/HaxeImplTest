/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

/**
  Implements the Editor's play settings.
**/
@:umodule("UnrealEd")
@:glueCppIncludes("Settings/LevelEditorPlaySettings.h")
@:uextern @:uclass extern class ULevelEditorPlaySettings extends unreal.UObject {
  @:uproperty public var CustomUnsafeZoneDimensions : unreal.TArray<unreal.FVector2D>;
  @:uproperty public var CustomUnsafeZoneStarts : unreal.TArray<unreal.FVector2D>;
  @:uproperty public var PIESafeZoneOverride : unreal.slatecore.FMargin;
  @:uproperty public var DeviceToEmulate : unreal.FString;
  
  /**
    Collection of common screen resolutions on television screens.
  **/
  @:uproperty public var TelevisionScreenResolutions : unreal.TArray<unreal.editor.FPlayScreenResolution>;
  
  /**
    Collection of common screen resolutions on tablet devices.
  **/
  @:uproperty public var TabletScreenResolutions : unreal.TArray<unreal.editor.FPlayScreenResolution>;
  
  /**
    Collection of common screen resolutions on mobile phones.
  **/
  @:uproperty public var PhoneScreenResolutions : unreal.TArray<unreal.editor.FPlayScreenResolution>;
  
  /**
    Collection of common screen resolutions on desktop monitors.
  **/
  @:uproperty public var MonitorScreenResolutions : unreal.TArray<unreal.editor.FPlayScreenResolution>;
  
  /**
    Collection of common screen resolutions on mobile phones.
  **/
  @:uproperty public var LaptopScreenResolutions : unreal.TArray<unreal.editor.FPlayScreenResolution>;
  
  /**
    The name of the last device that the user ran a play session on.
  **/
  @:uproperty public var LastExecutedPIEPreviewDevice : unreal.FString;
  
  /**
    The last type of play session the user ran.
  **/
  @:uproperty public var LastExecutedPlayModeType : unreal.editor.EPlayModeType;
  
  /**
    The last type of play location the user ran.
  **/
  @:uproperty public var LastExecutedPlayModeLocation : unreal.editor.EPlayModeLocations;
  
  /**
    The last type of play-on session the user ran.
  **/
  @:uproperty public var LastExecutedLaunchModeType : unreal.editor.ELaunchModeType;
  
  /**
    The name of the last device that the user ran a play session on.
  **/
  @:uproperty public var LastExecutedLaunchName : unreal.FString;
  
  /**
    The name of the last platform that the user ran a play session on.
  **/
  @:uproperty public var LastExecutedLaunchDevice : unreal.FString;
  
  /**
    The last known screen positions of multiple instance windows (in pixels).
  **/
  @:uproperty public var MultipleInstancePositions : unreal.TArray<unreal.FIntPoint>;
  
  /**
    The last known screen size for the first instance window (in pixels).
  **/
  @:uproperty public var LastSize : unreal.FIntPoint;
  
  /**
    Customizable settings allowing to emulate latency and packetloss for game network transmissions
  **/
  @:uproperty public var NetworkEmulationSettings : unreal.editor.FLevelEditorPlayNetworkEmulationSettings;
  
  /**
    If > 0, Tick clients at a fixed frame rate. Each client instance will map to an element in the list, wrapping around if num clients exceeds size of list. Includes Listen Server. This is the target frame rate, e.g, "20" for 20fps, which will result in 1/20 second tick steps.
  **/
  @:uproperty public var ClientFixedFPS : unreal.TArray<unreal.Int32>;
  
  /**
    If > 0, Tick dedicated server at a fixed frame rate. Does not impact Listen Server (use ClientFixedFPS setting). This is the target frame rate, e.g, "20" for 20fps, which will result in 1/20 second tick steps.
  **/
  @:uproperty public var ServerFixedFPS : unreal.Int32;
  
  /**
    Additional options that will be passed to the server as arguments, for example -debug. Only works with separate process servers.
  **/
  @:uproperty public var AdditionalServerLaunchParameters : unreal.FString;
  
  /**
    This is a rarely used option that will launch a separate server (possibly hidden in-process depending on RunUnderOneProcess)
    even if the net mode does not require a server (such as Standalone). If the net mode requires a server (such as Client) a
    server will be launched for you (regardless of this setting). This allows you to test offline -> server workflows by connecting
    ("open 127.0.0.1:<ServerPort>") from the offline game.
  **/
  @:uproperty public var bLaunchSeparateServer : Bool;
  
  /**
    Whether to automatically recompile dirty Blueprints before launching
  **/
  @:uproperty public var bAutoCompileBlueprintsOnLaunch : Bool;
  
  /**
    Whether to content should be stored in pak files when launching on device. *
  **/
  @:uproperty public var PackFilesForLaunch : unreal.editor.EPlayOnPakFileMode;
  
  /**
    Which build configuration to use when launching on device.
  **/
  @:uproperty public var LaunchConfiguration : unreal.editor.EPlayOnLaunchConfiguration;
  
  /**
    Whether to build the game before launching on device.
  **/
  @:uproperty public var BuildGameBeforeLaunch : unreal.editor.EPlayOnBuildMode;
  
  /**
    Extra parameters to be included as part of the command line for a mobile-on-PC standalone game.
  **/
  @:uproperty public var AdditionalLaunchParametersForMobile : unreal.FString;
  
  /**
    Extra parameters to be include as part of the command line for the standalone game.
  **/
  @:uproperty public var AdditionalLaunchParameters : unreal.FString;
  
  /**
    Whether sound should be disabled when playing standalone games.
  **/
  @:uproperty public var DisableStandaloneSound : Bool;
  
  /**
    Always have the PIE window on top of the parent windows.
  **/
  @:uproperty public var PIEAlwaysOnTop : Bool;
  
  /**
    Whether the new window should be centered on the screen.
  **/
  @:uproperty public var CenterNewWindow : Bool;
  
  /**
    The position of the new view port window on the screen in pixels.
  **/
  @:uproperty public var NewWindowPosition : unreal.FIntPoint;
  
  /**
    The height of the new view port window in pixels (0 = use the desktop's screen resolution).
  **/
  @:uproperty public var NewWindowHeight : unreal.Int32;
  
  /**
    The width of the new view port window in pixels (0 = use the desktop's screen resolution).
  **/
  @:uproperty public var NewWindowWidth : unreal.Int32;
  
  /**
    Prefer to stream sub-levels from the disk instead of duplicating editor sub-levels
  **/
  @:uproperty public var bPreferToStreamLevelsInPIE : Bool;
  
  /**
    True if Play In Editor should only load currently-visible levels in PIE.
  **/
  @:uproperty public var bOnlyLoadVisibleLevelsInPIE : Bool;
  
  /**
    Whether to use a non-realtime audio device during PIE
  **/
  @:uproperty public var bUseNonRealtimeAudioDevice : Bool;
  
  /**
    Which quality level to use when playing in editor
  **/
  @:uproperty public var PlayInEditorSoundQualityLevel : unreal.Int32;
  
  /**
    Whether to play a sound when entering and exiting PIE
  **/
  @:uproperty public var EnablePIEEnterAndExitSounds : Bool;
  
  /**
    Whether to play sounds when in a Play In Editor session
  **/
  @:uproperty public var EnableGameSound : Bool;
  
  /**
    Automatically recompile blueprints used by the current level when initiating a Play In Editor session
  **/
  @:uproperty public var AutoRecompileBlueprints : Bool;
  
  /**
    Whether or not the editor is minimized on VR PIE
  **/
  @:uproperty public var ShouldMinimizeEditorOnVRPIE : Bool;
  
  /**
    Whether or not HMD orientation should be used when playing in viewport
  **/
  @:uproperty public var ViewportGetsHMDControl : Bool;
  
  /**
    Location on screen to anchor the mouse control label when in PIE mode.
  **/
  @:uproperty public var MouseControlLabelPosition : unreal.editor.ELabelAnchorMode;
  
  /**
    Whether to show a label for mouse control gestures in the PIE view.
  **/
  @:uproperty public var ShowMouseControlLabel : Bool;
  
  /**
    While using the game viewport, it sends mouse movement and clicks as touch events, instead of as mouse events.
  **/
  @:uproperty public var UseMouseForTouch : Bool;
  
  /**
    Give the game mouse control when PIE starts or require a click in the viewport first
  **/
  @:uproperty public var GameGetsMouseControl : Bool;
  
  /**
    The PlayerStart class used when spawning the player at the current camera location.
  **/
  @:uproperty public var PlayFromHerePlayerStartClassName : unreal.FString;
  
}
