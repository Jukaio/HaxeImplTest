/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.animgraphruntime;

/**
  The FRotationRetargetingInfo is used to provide all of the
  settings required to perform rotational retargeting on a single
  transform.
**/
@:umodule("AnimGraphRuntime")
@:glueCppIncludes("Public/CommonAnimationTypes.h")
@:noCopy @:noEquals @:uextern @:ustruct extern class FRotationRetargetingInfo {
  
  /**
    If set to true the value for the easing will be clamped between 0.0 and 1.0
  **/
  @:uproperty public var bClamp : Bool;
  
  /**
    The amount of easing to apply (value should be 0.0 to 1.0)
  **/
  @:uproperty public var EasingWeight : unreal.Float32;
  
  /**
    If set to true the interpolation value for the easing will be flipped (1.0 - Value)
  **/
  @:uproperty public var bFlipEasing : Bool;
  
  /**
    Custom curve mapping to apply if bApplyCustomCurve is true
  **/
  @:uproperty public var CustomCurve : unreal.FRuntimeFloatCurve;
  
  /**
    The easing to use - pick linear if you don't want to apply any easing
  **/
  @:uproperty public var EasingType : unreal.animgraphruntime.EEasingFuncType;
  
  /**
    The target value of the target angle in degrees (can be the same as SourceMaximum)
  **/
  @:uproperty public var TargetMaximum : unreal.Float32;
  
  /**
    The minimum value of the target angle in degrees (can be the same as SourceMinimum)
  **/
  @:uproperty public var TargetMinimum : unreal.Float32;
  
  /**
    The maximum value of the source angle in degrees
  **/
  @:uproperty public var SourceMaximum : unreal.Float32;
  
  /**
    The minimum value of the source angle in degrees
  **/
  @:uproperty public var SourceMinimum : unreal.Float32;
  
  /**
    If set to true the angle will be always positive, thus resulting in mirrored rotation both ways
  **/
  @:uproperty public var bUseAbsoluteAngle : Bool;
  
  /**
    In case the rotation component is SwingAngle or TwistAngle this vector is used as the twist axis
  **/
  @:uproperty public var TwistAxis : unreal.FVector;
  
  /**
    The rotation component to perform retargeting with
  **/
  @:uproperty public var RotationComponent : unreal.animgraphruntime.ERotationComponent;
  
  /**
    The target transform to project the rotation. In most cases this is the same as Source
  **/
  @:uproperty public var Target : unreal.FTransform;
  
  /**
    The source transform of the frame of reference. The rotation is made relative to this space
  **/
  @:uproperty public var Source : unreal.FTransform;
  
  /**
    Set to true this enables retargeting
  **/
  @:uproperty public var bEnabled : Bool;
  
}
