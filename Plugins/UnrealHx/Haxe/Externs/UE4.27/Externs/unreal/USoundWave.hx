/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

@:glueCppIncludes("Sound/SoundWave.h")
@:uextern @:uclass extern class USoundWave extends unreal.USoundBase {
  
  /**
    Hold a reference to our internal curve so we can switch back to it if we want to
  **/
  @:uproperty private var InternalCurves : unreal.UCurveTable;
  
  /**
    Curves associated with this sound wave
  **/
  @:uproperty private var Curves : unreal.UCurveTable;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var AssetImportData : unreal.UAssetImportData;
  @:deprecated @:uproperty public var SourceFileTimestamp_DEPRECATED : unreal.FString;
  @:deprecated @:uproperty public var SourceFilePath_DEPRECATED : unreal.FString;
  
  /**
    Provides contextual information for the sound to the translator.
  **/
  @:uproperty public var Comment : unreal.FString;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,
    as the contents of the subtitle is commonly identical to what is spoken.
  **/
  @:uproperty public var Subtitles : unreal.TArray<unreal.FSubtitleCue>;
  
  /**
    Cached sample rate for displaying in the tools
  **/
  @:uproperty private var SampleRate : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    Sizes of the bulk data for the source wav data
  **/
  @:uproperty public var ChannelSizes : unreal.TArray<unreal.Int32>;
  
  /**
    Offsets into the bulk data for the source wav data
  **/
  @:uproperty public var ChannelOffsets : unreal.TArray<unreal.Int32>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Number of channels of multichannel data; 1 or 2 for regular mono and stereo files
  **/
  @:uproperty public var NumChannels : unreal.Int32;
  
  /**
    Playback pitch for sound.
  **/
  @:uproperty public var Pitch : unreal.Float32;
  
  /**
    Playback volume of sound 0 to 1 - Default is 1.0.
  **/
  @:uproperty public var Volume : unreal.Float32;
  
  /**
    The priority of the subtitle.
  **/
  @:uproperty public var SubtitlePriority : unreal.Float32;
  
  /**
    A localized version of the text that is actually spoken phonetically in the audio.
  **/
  @:uproperty public var SpokenText : unreal.FString;
  
  /**
    Use this to override how much audio data is loaded when this USoundWave is loaded.
  **/
  @:uproperty public var InitialChunkSize : unreal.Int32;
  
  /**
    The cooked cooked envelope data.
  **/
  @:uproperty public var CookedEnvelopeTimeData : unreal.TArray<unreal.FSoundWaveEnvelopeTimeData>;
  
  /**
    The cooked spectral time data.
  **/
  @:uproperty public var CookedSpectralTimeData : unreal.TArray<unreal.FSoundWaveSpectralTimeData>;
  
  /**
    The frequencies (in hz) to analyze when doing baked FFT analysis.
  **/
  @:uproperty public var FrequenciesToAnalyze : unreal.TArray<unreal.Float32>;
  
  /**
    Modulation Settings
  **/
  @:uproperty public var ModulationSettings : unreal.FSoundModulationDefaultRoutingSettings;
  #if WITH_EDITORONLY_DATA
  
  /**
    The release time in milliseconds. Describes how quickly the envelope analyzer responds to decreasing amplitudes.
  **/
  @:uproperty public var EnvelopeFollowerReleaseTime : unreal.Int32;
  
  /**
    The attack time in milliseconds. Describes how quickly the envelope analyzer responds to increasing amplitudes.
  **/
  @:uproperty public var EnvelopeFollowerAttackTime : unreal.Int32;
  
  /**
    How many audio frames to average a new envelope value. Larger values use less memory for audio envelope data but will result in lower envelope accuracy.
  **/
  @:uproperty public var EnvelopeFollowerFrameSize : unreal.Int32;
  
  /**
    Release time in milliseconds of the spectral envelope follower.
  **/
  @:uproperty public var FFTAnalysisReleaseTime : unreal.Int32;
  
  /**
    Attack time in milliseconds of the spectral envelope follower.
  **/
  @:uproperty public var FFTAnalysisAttackTime : unreal.Int32;
  
  /**
    How many audio frames analyze at a time.
  **/
  @:uproperty public var FFTAnalysisFrameSize : unreal.Int32;
  
  /**
    The FFT window size to use for fft analysis.
  **/
  @:uproperty public var FFTSize : unreal.ESoundWaveFFTSize;
  
  /**
    Whether or not to enable cook-time amplitude envelope analysis.
  **/
  @:uproperty public var bEnableAmplitudeEnvelopeAnalysis : Bool;
  
  /**
    Whether or not to enable cook-time baked FFT analysis.
  **/
  @:uproperty public var bEnableBakedFFTAnalysis : Bool;
  
  /**
    Whether or not we should treat the sound wave used for analysis (this or the override) as looping while performing analysis.
    A looping sound may include the end of the file for inclusion in analysis for envelope and FFT analysis.
  **/
  @:uproperty public var TreatFileAsLoopingForAnalysis : Bool;
  
  /**
    Specify a sound to use for the baked analysis. Will default to this USoundWave if not set.
  **/
  @:uproperty public var OverrideSoundToUseForAnalysis : unreal.USoundWave;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Whether or not this source is ambisonics file format. If set, sound always uses the
    'Master Ambisonics Submix' as set in the 'Audio' category of Project Settings'
    and ignores submix if provided locally or in the referenced SoundClass.
  **/
  @:uproperty public var bIsAmbisonics : Bool;
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var bVirtualizeWhenSilent_DEPRECATED : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    If set to true the subtitles display as a sequence of single lines as opposed to multiline.
  **/
  @:uproperty public var bSingleLine : Bool;
  
  /**
    If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually.
  **/
  @:uproperty public var bManualWordWrap : Bool;
  
  /**
    If set to true if this sound is considered to contain mature/adult content.
  **/
  @:uproperty public var bMature : Bool;
  
  /**
    Specifies how and when compressed audio data is loaded for asset if stream caching is enabled.
  **/
  @:uproperty public var LoadingBehavior : unreal.ESoundWaveLoadingBehavior;
  
  /**
    Whether this sound supports seeking. This requires recooking with a codec which supports seekability and streaming.
  **/
  @:uproperty public var bSeekableStreaming : Bool;
  
  /**
    Whether this sound can be streamed to avoid increased memory usage. If using Stream Caching, use Loading Behavior instead to control memory usage.
  **/
  @:uproperty public var bStreaming : Bool;
  
  /**
    If set, when played directly (not through a sound cue) the wave will be played looping.
  **/
  @:uproperty public var bLooping : Bool;
  @:uproperty public var SoundGroup : unreal.ESoundGroup;
  
  /**
    Quality of sample rate conversion for platforms that opt into resampling during cook. The sample rate for each enumeration is definable per platform in platform target settings.
  **/
  @:uproperty public var SampleRateQuality : unreal.audioplatformconfiguration.ESoundwaveSampleRateSettings;
  
  /**
    Priority of this sound when streaming (lower priority streams may not always play)
  **/
  @:uproperty public var StreamingPriority : unreal.Int32;
  
  /**
    Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality.
  **/
  @:uproperty public var CompressionQuality : unreal.Int32;
  
}
