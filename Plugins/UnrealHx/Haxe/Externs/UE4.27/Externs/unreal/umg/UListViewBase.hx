/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.umg;

/**
  Bare-bones base class to make creating custom UListView widgets easier.
  Child classes should also inherit from ITypedUMGListView<T> to get a basic public ListView API for free.
  
  Child classes will own the actual SListView<T> widgets, but this provides some boilerplate functionality for generating entries.
  To generate a row for the child list, use GenerateTypedRow with the appropriate SObjectTableRow<T> type for your list
  
  Additionally, the entry widget class can be filtered for a particular class and interface with the EntryClass and EntryInterface metadata arguments
  This can be specified either on the class directly (see below) or on any BindWidget FProperty
  
  Example:
  class UMyUserWidget : public UUserWidget
  {
              UPROPERTY(BindWidget, meta = (EntryClass = MyListEntryWidget))
              UListView* ListView_InventoryItems;
  }
**/
@:umodule("UMG")
@:glueCppIncludes("UMG.h")
@:uextern @:uclass extern class UListViewBase extends unreal.umg.UWidget {
  
  /**
    Optional fixed offset (in lines) to always apply to the top/left (depending on orientation) of the list.
    If provided, all non-inertial means of scrolling will settle with exactly this offset of the topmost entry.
    Ex: A value of 0.25 would cause the topmost full entry to be offset down by a quarter length of the preceeding entry.
  **/
  @:uproperty private var FixedLineScrollOffset : unreal.Float32;
  
  /**
    The multiplier to apply when wheel scrolling
  **/
  @:uproperty private var WheelScrollMultiplier : unreal.Float32;
  
  /**
    The type of widget to create for each entry displayed in the list.
  **/
  @:uproperty private var EntryWidgetClass : unreal.TSubclassOf<unreal.umg.UUserWidget>;
  
  /**
    Gets all of the list entry widgets currently being displayed by the list
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDisplayedEntryWidgets() : unreal.Const<unreal.PRef<unreal.TArray<unreal.umg.UUserWidget>>>;
  
  /**
    Full regeneration of all entries in the list. Note that the entry UWidget instances will not be destroyed, but they will be released and re-generated.
    In other words, entry widgets will not receive Destruct/Construct events. They will receive OnEntryReleased and IUserObjectListEntry implementations will receive OnListItemObjectSet.
  **/
  @:ufunction(BlueprintCallable) @:final public function RegenerateAllEntries() : Void;
  
  /**
    Scroll the entire list up to the first item
  **/
  @:ufunction(BlueprintCallable) @:final public function ScrollToTop() : Void;
  
  /**
    Scroll the entire list down to the bottom-most item
  **/
  @:ufunction(BlueprintCallable) @:final public function ScrollToBottom() : Void;
  
  /**
    Set the scroll offset of this view (in items)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetScrollOffset(InScrollOffset : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetWheelScrollMultiplier(NewWheelScrollMultiplier : unreal.Float32) : Void;
  @:ufunction(BlueprintCallable) @:final public function SetScrollbarVisibility(InVisibility : unreal.umg.ESlateVisibility) : Void;
  
  /**
    Sets the list to refresh on the next tick.
    
    Note that refreshing, from a list perspective, is limited to accounting for discrepancies between items and entries.
    In other words, it will only release entries that no longer have items and generate entries for new items (or newly visible items).
    
    It does NOT account for changes within existing items - that is up to the item to announce and an entry to listen to as needed.
    This can be onerous to set up for simple cases, so it's also reasonable (though not ideal) to call RegenerateAllEntries when changes within N list items need to be reflected.
  **/
  @:ufunction(BlueprintCallable) @:final public function RequestRefresh() : Void;
  
}
