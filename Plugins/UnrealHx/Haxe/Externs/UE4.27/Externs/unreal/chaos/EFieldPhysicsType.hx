/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.chaos;

@:umodule("Chaos")
@:glueCppIncludes("Public/Field/FieldSystemTypes.h")
@:uname("EFieldPhysicsType")
@:uextern @:uenum extern enum EFieldPhysicsType {
  Field_None;
  
  /**
    Set the dynamic state of a particle (static, dynamic, kinematic...)
    @DisplayName Dynamic State
  **/
  @DisplayName("Dynamic State")
  Field_DynamicState;
  
  /**
    Add a vector field to the particles linear force.
    @DisplayName Linear Force
  **/
  @DisplayName("Linear Force")
  Field_LinearForce;
  
  /**
    Apply an external strain over the particles. If this strain is over the internal one, the cluster will break.
    @DisplayName External Strain
  **/
  @DisplayName("External Strain")
  Field_ExternalClusterStrain;
  
  /**
    Disable the particles for which the field will be higher than 0.
    @DisplayName Kill Particle
  **/
  @DisplayName("Kill Particle")
  Field_Kill;
  
  /**
    Add a vector field to the particles linear velocity.
    @DisplayName Linear Velocity
  **/
  @DisplayName("Linear Velocity")
  Field_LinearVelocity;
  
  /**
    Add a vector field to the particles angular velocity.
    @DisplayName Angular Velocity
  **/
  @DisplayName("Angular Velocity")
  Field_AngularVelociy;
  
  /**
    Add a vector field to the particles angular torque.
    @DisplayName Angular Torque
  **/
  @DisplayName("Angular Torque")
  Field_AngularTorque;
  
  /**
    Add a strain field to the particles internal one.
    @DisplayName Internal Strain
  **/
  @DisplayName("Internal Strain")
  Field_InternalClusterStrain;
  
  /**
    Disable the particles if their linear and angular velocity are less than the threshold.
    @DisplayName Disable Threshold
  **/
  @DisplayName("Disable Threshold")
  Field_DisableThreshold;
  
  /**
    Set particles in sleeping mode if their linear and angular velocity are less than the threshold.
    @DisplayName Sleeping Threshold
  **/
  @DisplayName("Sleeping Threshold")
  Field_SleepingThreshold;
  
  /**
    Add a position constraint to the particles to remain static
    @DisplayName Position Static
  **/
  @DisplayName("Position Static")
  Field_PositionStatic;
  
  /**
    Add a position constraint to the particles to follow its kinematic position
    @DisplayName Position Animated
  **/
  @DisplayName("Position Animated")
  Field_PositionAnimated;
  
  /**
    Add a position constraint to the particles to follow a target position
    @DisplayName Position Target
  **/
  @DisplayName("Position Target")
  Field_PositionTarget;
  
  /**
    Add the particles to a spring constraint holding them together
    @DisplayName Dynamic Constraint
  **/
  @DisplayName("Dynamic Constraint")
  Field_DynamicConstraint;
  
  /**
    Set the particles collision group.
    @DisplayName Collision Group
  **/
  @DisplayName("Collision Group")
  Field_CollisionGroup;
  
  /**
    Activate all the disabled particles for which the field value will be 0
    @DisplayName Activate Disabled
  **/
  @DisplayName("Activate Disabled")
  Field_ActivateDisabled;
  
  /**
    //256th entry
  **/
  Field_PhysicsType_Max;
  
}
