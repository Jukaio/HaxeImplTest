/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.interactivetoolsframework;

/**
  UTransformGizmo provides standard Transformation Gizmo interactions,
  applied to a UTransformProxy target object. By default the Gizmo will be
  a standard XYZ translate/rotate Gizmo (axis and plane translation).
  
  The in-scene representation of the Gizmo is a ATransformGizmoActor (or subclass).
  This Actor has FProperty members for the various sub-widgets, each as a separate Component.
  Any particular sub-widget of the Gizmo can be disabled by setting the respective
  Actor Component to null.
  
  So, to create non-standard variants of the Transform Gizmo, set a new GizmoActorBuilder
  in the UTransformGizmoBuilder registered with the GizmoManager. Return
  a suitably-configured GizmoActor and everything else will be handled automatically.
**/
@:umodule("InteractiveToolsFramework")
@:glueCppIncludes("BaseGizmos/TransformGizmo.h")
@:uextern @:uclass extern class UTransformGizmo extends unreal.interactivetoolsframework.UInteractiveGizmo {
  
  /**
    This TransformSource wraps a UGizmoComponentWorldTransformSource that is on the Gizmo Actor directly.
    It tracks the scaling separately (SeparateChildScale is provided as the storage for the scaling).
    This allows the various scaling handles to update the Transform without actually scaling the Gizmo itself.
  **/
  @:uproperty private var ScaledTransformSource : unreal.interactivetoolsframework.UGizmoScaledTransformSource;
  
  /**
    State target is shared across gizmos, and created internally during SetActiveTarget().
    Several FChange providers are registered with this StateTarget, including the UTransformGizmo
    itself (IToolCommandChangeSource implementation above is called)
  **/
  @:uproperty private var StateTarget : unreal.interactivetoolsframework.UGizmoTransformChangeStateTarget;
  
  /**
    Z-axis source (ie 0,0,1) is shared across Scale Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var UnitAxisZSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    Y-axis source (ie 0,1,0) is shared across Scale Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var UnitAxisYSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    Local X-axis source (ie 1,0,0) is shared across Scale Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var UnitAxisXSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    Z-axis source is shared across Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var AxisZSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    Y-axis source is shared across Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var AxisYSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    X-axis source is shared across Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var AxisXSource : unreal.interactivetoolsframework.UGizmoComponentAxisSource;
  
  /**
    Axis that points towards camera, X/Y plane tangents aligned to right/up. Shared across Gizmos, and created internally during SetActiveTarget()
  **/
  @:uproperty private var CameraAxisSource : unreal.interactivetoolsframework.UGizmoConstantFrameAxisSource;
  
  /**
    list of currently-active child gizmos
  **/
  @:uproperty private var ActiveGizmos : unreal.TArray<unreal.interactivetoolsframework.UInteractiveGizmo>;
  
  /**
    List of nonuniform scale components. Subset of of ActiveComponents. These are tracked separately so they can
    be hidden when Gizmo is not configured to use local axes, because UE only supports local nonuniform scaling
    on Components
  **/
  @:uproperty private var NonuniformScaleComponents : unreal.TArray<unreal.UPrimitiveComponent>;
  
  /**
    List of current-active child components
  **/
  @:uproperty private var ActiveComponents : unreal.TArray<unreal.UPrimitiveComponent>;
  
  /**
    Current coordinate system in use. If bUseContextCoordinateSystem is true, this value will be updated internally every Tick()
    by quering the ContextyQueriesAPI, otherwise the default is Local and the client can change it as necessary
  **/
  @:uproperty public var CurrentCoordinateSystem : unreal.interactivetoolsframework.EToolContextCoordinateSystem;
  
  /**
    Whether to use the World/Local coordinate system provided by the context via the ContextyQueriesAPI.
  **/
  @:uproperty public var bUseContextCoordinateSystem : Bool;
  
  /**
    If true, then when using world frame, Axis and Plane translation snap to the world grid via the ContextQueriesAPI (in RotationSnapFunction)
  **/
  @:uproperty public var bSnapToWorldRotGrid : Bool;
  @:uproperty public var ExplicitRotationGridSize : unreal.FRotator;
  
  /**
    Optional grid size which overrides the Context Rotation Grid
  **/
  @:uproperty public var bRotationGridSizeIsExplicit : Bool;
  @:uproperty public var ExplicitGridSize : unreal.FVector;
  
  /**
    Optional grid size which overrides the Context Grid
  **/
  @:uproperty public var bGridSizeIsExplicit : Bool;
  
  /**
    If true, then when using world frame, Axis and Plane translation snap to the world grid via the ContextQueriesAPI (in PositionSnapFunction)
  **/
  @:uproperty public var bSnapToWorldGrid : Bool;
  
  /**
    The active target object for the Gizmo
  **/
  @:uproperty public var ActiveTarget : unreal.interactivetoolsframework.UTransformProxy;
  
}
