/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.oculusinput;

@:umodule("OculusInput")
@:glueCppIncludes("OculusInputFunctionLibrary.h")
@:uextern @:uclass extern class UOculusInputFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Creates a new runtime hand skeletal mesh.
    
    @param HandSkeletalMesh                      (out) Skeletal Mesh object that will be used for the runtime hand mesh
    @param SkeletonType                          (in) The skeleton type that will be used for generating the hand bones
    @param MeshType                                      (in) The mesh type that will be used for generating the hand mesh
    @param WorldTometers                         (in) Optional change to the world to meters conversion value
  **/
  @:ufunction(BlueprintCallable) static public function GetHandSkeletalMesh(HandSkeletalMesh : unreal.USkeletalMesh, SkeletonType : unreal.oculusinput.EOculusHandType, MeshType : unreal.oculusinput.EOculusHandType, WorldToMeters : unreal.Float32 = 100.000000) : Bool;
  
  /**
    Initializes physics capsules for collision and physics on the runtime mesh
    
    @param SkeletonType                          (in) The skeleton type that will be used to generated the capsules
    @param HandComponent                         (in) The skinned mesh component that the capsules will be attached to
    @param WorldTometers                         (in) Optional change to the world to meters conversion value
  **/
  @:ufunction(BlueprintCallable) static public function InitializeHandPhysics(SkeletonType : unreal.oculusinput.EOculusHandType, HandComponent : unreal.USkinnedMeshComponent, WorldToMeters : unreal.Float32 = 100.000000) : unreal.TArray<unreal.oculusinput.FOculusCapsuleCollider>;
  
  /**
    Get the rotation of a specific bone
    
    @param DeviceHand                            (in) The hand to get the rotations from
    @param BoneId                                        (in) The specific bone to get the rotation from
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function GetBoneRotation(DeviceHand : unreal.Const<unreal.oculusinput.EOculusHandType>, BoneId : unreal.Const<unreal.oculusinput.EBone>, ControllerIndex : unreal.Int32 = 0) : unreal.FQuat;
  
  /**
    Get the pointer pose
    
    @param DeviceHand                            (in) The hand to get the pointer pose from
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function GetPointerPose(DeviceHand : unreal.Const<unreal.oculusinput.EOculusHandType>, ControllerIndex : unreal.Int32 = 0) : unreal.FTransform;
  
  /**
    Check if the pointer pose is a valid pose
    
    @param DeviceHand                            (in) The hand to get the pointer status from
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function IsPointerPoseValid(DeviceHand : unreal.Const<unreal.oculusinput.EOculusHandType>, ControllerIndex : unreal.Int32 = 0) : Bool;
  
  /**
    Get the tracking confidence of the hand
    
    @param DeviceHand                            (in) The hand to get tracking confidence of
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function GetTrackingConfidence(DeviceHand : unreal.Const<unreal.oculusinput.EOculusHandType>, ControllerIndex : unreal.Int32 = 0) : unreal.oculusinput.ETrackingConfidence;
  
  /**
    Get the scale of the hand
    
    @param DeviceHand                            (in) The hand to get scale of
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function GetHandScale(DeviceHand : unreal.Const<unreal.oculusinput.EOculusHandType>, ControllerIndex : unreal.Int32 = 0) : unreal.Float32;
  
  /**
    Get the user's dominant hand
    
    @param ControllerIndex                       (in) Optional different controller index
  **/
  @:ufunction(BlueprintCallable) static public function GetDominantHand(ControllerIndex : unreal.Int32 = 0) : unreal.oculusinput.EOculusHandType;
  
  /**
    Check if hand tracking is enabled currently
  **/
  @:ufunction(BlueprintCallable) static public function IsHandTrackingEnabled() : Bool;
  
  /**
    Get the bone name from the bone index
    
    @param BoneIndex                                     (in) Bone index to get the name of
  **/
  @:ufunction(BlueprintCallable) static public function GetBoneName(BoneId : unreal.oculusinput.EBone) : unreal.FString;
  
}
