/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  Used to create fogging effects such as clouds.
**/
@:glueCppIncludes("Atmosphere/AtmosphericFogComponent.h")
@:uextern @:uclass extern class UAtmosphericFogComponent extends unreal.USceneComponent {
  @:deprecated @:uproperty public var IrradianceTexture_DEPRECATED : unreal.UTexture2D;
  @:deprecated @:uproperty public var TransmittanceTexture_DEPRECATED : unreal.UTexture2D;
  @:uproperty private var PrecomputeParams : unreal.FAtmospherePrecomputeParameters;
  
  /**
    Disable color scattering from ground.
  **/
  @:uproperty public var bDisableGroundScattering : Bool;
  
  /**
    Set to true if the atmosphere should affect the selected sun light illuminance. The light will be tinted based on its zenith angle and atmosphere properties as if all surfaces were at the ground level 0 meter.
  **/
  @:uproperty public var bAtmosphereAffectsSunIlluminance : Bool;
  
  /**
    Disable sun disk rendering.
  **/
  @:uproperty public var bDisableSunDisk : Bool;
  
  /**
    Default atmospheric sun light disc color. Used when there is no sunlight placed in the level.
  **/
  @:uproperty public var DefaultLightColor : unreal.FColor;
  
  /**
    Default atmospheric sun light disc luminance. Used when there is no atmospheric sun light selected in the level.
  **/
  @:uproperty public var DefaultBrightness : unreal.Float32;
  
  /**
    Sun half apex angle in degree, see https://en.wikipedia.org/wiki/Solid_angle
  **/
  @:uproperty public var SunDiscScale : unreal.Float32;
  
  /**
    The atmospheric fog start distance in centimeters.
  **/
  @:uproperty public var StartDistance : unreal.Float32;
  
  /**
    Offset the view altitude (along Z).
  **/
  @:uproperty public var GroundOffset : unreal.Float32;
  
  /**
    Apply a distance offset before evaluating the atmospheric fog, in km (to handle large distance). Only on surfaces, excludes the sky.
  **/
  @:uproperty public var DistanceOffset : unreal.Float32;
  
  /**
    Scale the view altitude (only Z scale).
  **/
  @:uproperty public var AltitudeScale : unreal.Float32;
  
  /**
    Scale the view position.
  **/
  @:uproperty public var DistanceScale : unreal.Float32;
  
  /**
    Offset the atmosphere transmittance over background [-1.f ~ 1.f].
  **/
  @:uproperty public var DensityOffset : unreal.Float32;
  
  /**
    Scales the atmosphere transmittance over background.
  **/
  @:uproperty public var DensityMultiplier : unreal.Float32;
  
  /**
    Scale the scattered luminance from the atmosphere sun light only on surfaces, excludes the sky.
  **/
  @:uproperty public var FogMultiplier : unreal.Float32;
  
  /**
    Scale the scattered luminance from the atmosphere sun light. Only affect the sky and atmospheric fog.
  **/
  @:uproperty public var SunMultiplier : unreal.Float32;
  
  /**
    Set brightness of the light
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDefaultBrightness(NewBrightness : unreal.Float32) : Void;
  
  /**
    Set color of the light
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDefaultLightColor(NewLightColor : unreal.FLinearColor) : Void;
  
  /**
    Set SunMultiplier
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSunMultiplier(NewSunMultiplier : unreal.Float32) : Void;
  
  /**
    Set FogMultiplier
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFogMultiplier(NewFogMultiplier : unreal.Float32) : Void;
  
  /**
    Set DensityMultiplier
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDensityMultiplier(NewDensityMultiplier : unreal.Float32) : Void;
  
  /**
    Set DensityOffset
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDensityOffset(NewDensityOffset : unreal.Float32) : Void;
  
  /**
    Set DistanceScale
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDistanceScale(NewDistanceScale : unreal.Float32) : Void;
  
  /**
    Set AltitudeScale
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAltitudeScale(NewAltitudeScale : unreal.Float32) : Void;
  
  /**
    Set StartDistance
  **/
  @:ufunction(BlueprintCallable) @:final public function SetStartDistance(NewStartDistance : unreal.Float32) : Void;
  
  /**
    Set DistanceOffset
  **/
  @:ufunction(BlueprintCallable) @:final public function SetDistanceOffset(NewDistanceOffset : unreal.Float32) : Void;
  
  /**
    Set DisableSunDisk
  **/
  @:ufunction(BlueprintCallable) @:final public function DisableSunDisk(NewSunDisk : Bool) : Void;
  
  /**
    Set DisableGroundScattering
  **/
  @:ufunction(BlueprintCallable) @:final public function DisableGroundScattering(NewGroundScattering : Bool) : Void;
  
  /**
    Set PrecomputeParams, only valid in Editor mode
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPrecomputeParams(DensityHeight : unreal.Float32, MaxScatteringOrder : unreal.Int32, InscatterAltitudeSampleNum : unreal.Int32) : Void;
  
}
