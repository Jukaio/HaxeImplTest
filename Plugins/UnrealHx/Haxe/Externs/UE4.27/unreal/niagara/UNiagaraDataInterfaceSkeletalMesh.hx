/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.niagara;

/**
  Data Interface allowing sampling of skeletal meshes.
**/
@:umodule("Niagara")
@:glueCppIncludes("NiagaraDataInterfaceSkeletalMesh.h")
@:uextern @:uclass extern class UNiagaraDataInterfaceSkeletalMesh extends unreal.niagara.UNiagaraDataInterface {
  
  /**
    When this option is disabled, we use the previous frame's data for the skeletal mesh and can often issue the simulation early. This greatly
          reduces overhead and allows the game thread to run faster, but comes at a tradeoff if the dependencies might leave gaps or other visual artifacts.
  **/
  @:uproperty public var bRequireCurrentFrameData : Bool;
  @:uproperty public var UvSetIndex : unreal.Int32;
  @:uproperty public var bExcludeBone : Bool;
  
  /**
    Optionally remove a single bone from Random / Random Unfiltered access.
    You can still include this bone in filtered list and access using the direct index functionality.
  **/
  @:uproperty public var ExcludeBoneName : unreal.FName;
  
  /**
    Set of filtered sockets that can be used for sampling. Select from these with GetFilteredSocketAt and RandomFilteredSocket.
  **/
  @:uproperty public var FilteredSockets : unreal.TArray<unreal.FName>;
  
  /**
    Set of filtered bones that can be used for sampling. Select from these with GetFilteredBoneAt and RandomFilteredBone.
  **/
  @:uproperty public var FilteredBones : unreal.TArray<unreal.FName>;
  
  /**
    If no regions are specified, we'll sample the whole mesh at this LODIndex. -1 indicates to use the last LOD.
  **/
  @:uproperty public var WholeMeshLOD : unreal.Int32;
  
  /**
    Sampling regions on the mesh from which to sample. Leave this empty to sample from the whole mesh.
  **/
  @:uproperty public var SamplingRegions : unreal.TArray<unreal.FName>;
  
  /**
    Selects which skinning mode to use, for most cases Skin On The Fly will cover your requirements, see individual tooltips for more information.
  **/
  @:uproperty public var SkinningMode : unreal.niagara.ENDISkeletalMesh_SkinningMode;
  
  /**
    The source component from which to sample. Takes precedence over the direct mesh. Not exposed to the user, only indirectly accessible from blueprints.
  **/
  @:uproperty public var SourceComponent : unreal.USkeletalMeshComponent;
  
  /**
    Reference to a user parameter if we're reading one.
  **/
  @:uproperty public var MeshUserParameter : unreal.niagara.FNiagaraUserParameterBinding;
  
  /**
    The source actor from which to sample. Takes precedence over the direct mesh. Note that this can only be set when used as a user variable on a component in the world.
  **/
  @:uproperty public var Source : unreal.AActor;
  
  /**
    Controls how to retrieve the Skeletal Mesh Component to attach to.
  **/
  @:uproperty public var SourceMode : unreal.niagara.ENDISkeletalMesh_SourceMode;
  
}
