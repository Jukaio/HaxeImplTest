/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleaparpin;

/**
  Component to make content persist at locations in the real world.
**/
@:umodule("MagicLeapARPin")
@:glueCppIncludes("MagicLeapARPinComponent.h")
@:uextern @:uclass extern class UMagicLeapARPinComponent extends unreal.USceneComponent {
  @:uproperty public var OnPinDataLoadAttemptCompleted : unreal.magicleaparpin.FMagicLeapARPinDataLoadAttemptCompleted;
  
  /**
    Fired when an entity loses its pin.
  **/
  @:uproperty public var OnPersistentEntityPinLost : unreal.magicleaparpin.FPersistentEntityPinLost;
  
  /**
    Fired when an entity is successfully pinned by this component.
  **/
  @:uproperty public var OnPersistentEntityPinned : unreal.magicleaparpin.FPersistentEntityPinned;
  
  /**
    Volume to search for an ARPin in. The position and scaled radius (in Unreal Units) of this sphere is used to look for an ARPin of type SearchPinTypes.
  **/
  @:uproperty public var SearchVolume : unreal.USphereComponent;
  
  /**
    Pin types to look for when attempting to pin this component.
  **/
  @:uproperty public var SearchPinTypes : unreal.TSet<unreal.magicleaparpin.EMagicLeapARPinType>;
  
  /**
    The user defined save game class associated with this pin.  Note that this MUST match the type passed into GetPinData().
  **/
  @:uproperty public var PinDataClass : unreal.TSubclassOf<unreal.magicleaparpin.UMagicLeapARPinSaveGame>;
  
  /**
    Pin this component's owner actor instead of just the component itself. Relevant only when using 'OnlyOnDataRestoration' or 'Always' as AutoPinType.
  **/
  @:uproperty public var bShouldPinActor : Bool;
  
  /**
    Mode for automatically pinning this component or it's owner actor to real-world.
  **/
  @:uproperty public var AutoPinType : unreal.magicleaparpin.EMagicLeapAutoPinType;
  
  /**
    Index to get the save game data for the pin
  **/
  @:uproperty public var UserIndex : unreal.Int32;
  
  /**
    Unique ID for this component to save the meta data for the Pin and make content persistent.
    This name has to be unique across all instances of the MagicLeapARPinComponent class.
    If empty, the name of the owner actor will be used.
  **/
  @:uproperty public var ObjectUID : unreal.FString;
  
  /**
    Pin this component (or owner actor if bShouldPinActor is true) to the specified PinID.
    If this pin exists in the environment, OnPersistentEntityPinned event will be fired in the next Tick.
    The component's transform will then be locked. App needs to call UnPin() if it wants to move the component again.
    @param PinID ID of the ARPin to attach this component (or owner actor) to.
    @return true if the provided pin exists in the environment, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function PinToID(PinID : unreal.Const<unreal.PRef<unreal.FGuid>>) : Bool;
  
  /**
    Pin this component (or owner actor if bShouldPinActor is true) to the ARPin that is the best fit based on its location and
    desired type. If UMagicLeapARPinFunctionLibrary::QueryARPins() is implemented on this platform, pins of type SearchPinTypes
    will be searched within the SearchVolume (250cm radius by default) and the closest one will be selected. Otherwise, a simple
    search of the closest pin will be used to get the desired ARPin.
    OnPersistentEntityPinned event will be fired when a suitable ARPin is found for this component.
    The component's transform will then be locked. App needs to call UnPin() if it wants to move the component again.
  **/
  @:ufunction(BlueprintCallable) @:final public function PinToBestFit() : Void;
  
  /**
    Pin this component (or owner actor if bShouldPinActor is true) to the PinID that was restored from a previous session
    or was synced voer the network.
    OnPersistentEntityPinned event will be fired when the restored pin will be found in the environment.
    The component's transform will then be locked. App needs to call UnPin() if it wants to move the component again.
    @return true if some ARPin data has been restored or synced, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function PinToRestoredOrSyncedID() : Bool;
  
  /**
    Deprecated and can no longer be used to pin any scene component other than itself. Use PinToBestFit(), PinToID() or PinToRestoredOrSyncedID() instead.
    If a reference to itself passed to this function, PinToBestFit() is called internally.
    @param ComponentToPin Only accepts 'this' / 'self'
    @return true if the component was accepted to be pinned, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function PinSceneComponent(ComponentToPin : unreal.USceneComponent) : Bool;
  
  /**
    Deprecated and can no longer be used to pin any actor other than the owner of this component.
    Set bShouldPinActor to true and call PinToBestFit(), PinToID() or PinToRestoredOrSyncedID() instead.
    If this component's owner is passed to this function, PinToBestFit() is called internally.
    @param ActorToPin Only accepts the owner of this component
    @return true if the Actor was accepted to be pinned, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function PinActor(ActorToPin : unreal.AActor) : Bool;
  
  /**
    Detach or un-pin the currently pinned entity (component) from the real-world.
    Call this if you want to change the transform of a pinned entity.
    Note that if you still want your content to persist, you will have to call PinToBestFit() or PinToID() before EndPlay().
  **/
  @:ufunction(BlueprintCallable) @:final public function UnPin() : Void;
  
  /**
    True if an entity (component or actor) is currently pinned by this component.
    If true, the entity's transform will be locked. App needs to call UnPin() if it wants to move it again.
    If false, and you still want your content to persist, you will have to call PinSceneComponent() or PinActor() before EndPlay().
    @return True if an entity (component or actor) is currently pinned by this component.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsPinned() : Bool;
  
  /**
    True if the AR Pin for the unique ID ObjectUID was restored from the app's local storage or was repliated over network.
    Implies if content was already pinned earlier. Does not imply if that restored Pin is available in the current environment.
    @return True if the Pin data was restored from local storage or network.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function PinRestoredOrSynced() : Bool;
  
  /**
    Get the ID of the Pin the entity (component or actor) is currently pinned to.
    @param PinID Output param for the ID of the Pin.
    @return True if an entity is currently pinned by this component and the output param is successfully populated.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPinnedPinID(PinID : unreal.PRef<unreal.FGuid>) : Bool;
  
  /**
    Retrieves the data associated with this pin. Make sure to call this only after setting a proper ObjectID value.
    @param PinDataClass The user defined save game class used by this pin.  Note that this must match the PinDataClass property.
    @return The save game instance associated with this pin instance.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetPinData(PinDataClass : unreal.TSubclassOf<unreal.magicleaparpin.UMagicLeapARPinSaveGame>) : unreal.magicleaparpin.UMagicLeapARPinSaveGame;
  
  /**
    Tries to retreive the data associated with this pin. Returns false if the data hasnt been loaded from the disk yet.
    In that case, wait until the OnPinDataLoadAttemptCompleted event is called.
    @param InPinDataClass The user defined save game class used by this pin. Note that this must match the PinDataClass property. Used for auto casting the return value.
    @param OutPinData The save game instance associated with this pin instance, only valid if function returns true.
    @return True if pin data was successfully loaded, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function TryGetPinData(InPinDataClass : unreal.TSubclassOf<unreal.magicleaparpin.UMagicLeapARPinSaveGame>, OutPinDataValid : Bool) : unreal.magicleaparpin.UMagicLeapARPinSaveGame;
  
  /**
    Returns the state of this Pin.
    @param State Output state of the Pin. Valid only if return value is true.
    @return Error code representing specific success or failure cases.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetPinState(State : unreal.PRef<unreal.magicleaparpin.FMagicLeapARPinState>) : Bool;
  
  /**
    If BeginPlay() is called before app sets ObjectUID (can happen when
    component is spawned at runtime or actor that includes this component
    is spawned at runtime), this function can be called to attempt a fresh
    restoration.
    @return true of pin data was retored, false otherwise
  **/
  @:ufunction(BlueprintCallable) @:final public function AttemptPinDataRestoration() : Bool;
  
  /**
    If BeginPlay() is called before app sets ObjectUID (can happen when
    component is spawned at runtime or actor that includes this component
    is spawned at runtime), this function can be called to attempt a fresh
    restoration. It loads the pin data from disk asynchronously.
    The OnPinDataLoadAttemptCompleted event is called to indicate whether
    the data was succesfully loaded or not.
  **/
  @:ufunction(BlueprintCallable) @:final public function AttemptPinDataRestorationAsync() : Void;
  
}
