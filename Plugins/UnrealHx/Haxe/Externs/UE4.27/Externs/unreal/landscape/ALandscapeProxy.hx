/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.landscape;

/**
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
**/
@:umodule("Landscape")
@:glueCppIncludes("LandscapeProxy.h")
@:uextern @:uclass extern class ALandscapeProxy extends unreal.AActor {
  
  /**
    Map of weightmap usage
  **/
  @:uproperty public var WeightmapUsageMap : unreal.TMap<unreal.UTexture2D, unreal.landscape.ULandscapeWeightmapUsage>;
  
  /**
    Flag that tell if we have some layers content *
  **/
  @:uproperty public var bHasLayersContent : Bool;
  
  /**
    Flag whether or not this Landscape's surface can be used for culling hidden triangles *
  **/
  @:uproperty public var bUseLandscapeForCullingInvisibleHLODVertices : Bool;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var MaxPaintedLayersPerComponent : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  @:uproperty public var NavigationGeometryGatheringMode : unreal.ENavDataGatheringMode;
  
  /**
    When set to true it will generate MaterialInstanceDynamic for each components, so material can be changed at runtime
  **/
  @:uproperty public var bUseDynamicMaterialInstance : Bool;
  
  /**
    Set to true to prevent navmesh generation under the terrain geometry
  **/
  @:uproperty public var bFillCollisionUnderLandscapeForNavmesh : Bool;
  
  /**
    Hints navigation system whether this landscape will ever be navigated on. true by default, but make sure to set it to false for faraway, background landscapes
  **/
  @:uproperty public var bUsedForNavigation : Bool;
  
  /**
    Number of quads for a subsection of a component. SubsectionSizeQuads+1 must be a power of two.
  **/
  @:uproperty public var NumSubsections : unreal.Int32;
  
  /**
    Total number of quads in each component
  **/
  @:uproperty public var SubsectionSizeQuads : unreal.Int32;
  
  /**
    Data set at creation time
  **/
  @:uproperty public var ComponentSizeQuads : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var EditorLayerSettings : unreal.TArray<unreal.landscape.FLandscapeEditorLayerSettings>;
  
  /**
    Height and weightmap import destination layer guid
  **/
  @:uproperty public var ReimportDestinationLayerGuid : unreal.FGuid;
  @:uproperty public var ReimportHeightmapFilePath : unreal.FString;
  @:deprecated @:uproperty public var EditorCachedLayerInfos_DEPRECATED : unreal.TArray<unreal.landscape.ULandscapeLayerInfoObject>;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Whether to bake the landscape material's vertical world position offset into the collision heightfield.
                  Note: Only z (vertical) offset is supported. XY offsets are ignored.
                  Does not work with an XY offset map (mesh collision)
  **/
  @:uproperty public var bBakeMaterialPositionOffsetIntoCollision : Bool;
  
  /**
    If true, Landscape will generate overlap events when other components are overlapping it (eg Begin Overlap).
    Both the Landscape and the other component must have this flag enabled for overlap events to occur.
    
    @see [Overlap Events](https://docs.unrealengine.com/latest/INT/Engine/Physics/Collision/index.html#overlapandgenerateoverlapevents)
    @see UpdateOverlaps(), BeginComponentOverlap(), EndComponentOverlap()
  **/
  @:uproperty public var bGenerateOverlapEvents : Bool;
  
  /**
    Collision profile settings for this landscape
  **/
  @:uproperty public var BodyInstance(default,never) : unreal.FBodyInstance;
  
  /**
    Thickness of the collision surface, in unreal units
  **/
  @:uproperty public var CollisionThickness : unreal.Float32;
  
  /**
    If set higher than the "Collision Mip Level", this specifies the Landscape LOD to use for "simple collision" tests, otherwise the "Collision Mip Level" is used for both simple and complex collision.
    Does not work with an XY offset map (mesh collision)
  **/
  @:uproperty public var SimpleCollisionMipLevel : unreal.Int32;
  
  /**
    Landscape LOD to use for collision tests. Higher numbers use less memory and process faster, but are much less accurate
  **/
  @:uproperty public var CollisionMipLevel : unreal.Int32;
  
  /**
    The Lightmass settings for this object.
  **/
  @:uproperty public var LightmassSettings : unreal.FLightmassPrimitiveSettings;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var bIsMovingToLevel : Bool;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Max draw distance exposed to LDs. The real max draw distance is the min (disregarding 0) of this and volumes affecting this object.
  **/
  @:uproperty public var LDMaxDrawDistance : unreal.Float32;
  
  /**
    Optionally write this 0-255 value to the stencil buffer in CustomDepth pass (Requires project setting or r.CustomDepth == 3)
  **/
  @:uproperty public var CustomDepthStencilValue : unreal.Int32;
  
  /**
    Mask used for stencil buffer writes.
  **/
  @:uproperty public var CustomDepthStencilWriteMask : unreal.ERendererStencilMask;
  
  /**
    If true, the Landscape will be rendered in the CustomDepth pass (usually used for outlines)
  **/
  @:uproperty public var bRenderCustomDepth : Bool;
  
  /**
    Whether to use the landscape material's vertical world position offset when calculating static lighting.
                  Note: Only z (vertical) offset is supported. XY offsets are ignored.
                  Does not work correctly with an XY offset map (mesh collision)
  **/
  @:uproperty public var bUseMaterialPositionOffsetInStaticLighting : Bool;
  
  /**
    Channels that this Landscape should be in.  Lights with matching channels will affect the Landscape.
    These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
  **/
  @:uproperty public var LightingChannels : unreal.FLightingChannels;
  
  /**
    Controls whether the primitive should affect dynamic distance field lighting methods.  This flag is only used if CastShadow is true. *
  **/
  @:uproperty public var bAffectDistanceFieldLighting : Bool;
  
  /**
    Whether this primitive should cast dynamic shadows as if it were a two sided material.  This flag is only used if CastShadow is true.
  **/
  @:uproperty public var bCastShadowAsTwoSided : Bool;
  
  /**
    If true, the primitive will cast shadows even if bHidden is true.  Controls whether the primitive should cast shadows when hidden.  This flag is only used if CastShadow is true.
  **/
  @:uproperty public var bCastHiddenShadow : Bool;
  
  /**
    When enabled, the component will be rendering into the far shadow cascades(only for directional lights).  This flag is only used if CastShadow is true.
  **/
  @:uproperty public var bCastFarShadow : Bool;
  
  /**
    Whether the object should cast a static shadow from shadow casting lights.  This flag is only used if CastShadow is true.
  **/
  @:uproperty public var bCastStaticShadow : Bool;
  
  /**
    Controls whether the primitive should cast shadows in the case of non precomputed shadowing.  This flag is only used if CastShadow is true. *
  **/
  @:uproperty public var bCastDynamicShadow : Bool;
  
  /**
    Controls whether the primitive component should cast a shadow or not.
  **/
  @:uproperty public var CastShadow : Bool;
  
  /**
    The resolution to cache lighting at, in texels/quad in one axis
    Total resolution would be changed by StaticLightingResolution*StaticLightingResolution
    Automatically calculate proper value for removing seams
  **/
  @:uproperty public var StaticLightingResolution : unreal.Float32;
  
  /**
    Only used outside of the editor (e.g. in cooked builds)
    Disables landscape grass processing entirely if no landscape components have landscape grass configured
  **/
  @:uproperty public var bHasLandscapeGrass : Bool;
  @:uproperty public var FoliageComponents : unreal.TArray<unreal.UHierarchicalInstancedStaticMeshComponent>;
  
  /**
    Array of LandscapeHeightfieldCollisionComponent
  **/
  @:uproperty public var CollisionComponents : unreal.TArray<unreal.landscape.ULandscapeHeightfieldCollisionComponent>;
  
  /**
    The array of LandscapeComponent that are used by the landscape
  **/
  @:uproperty public var LandscapeComponents : unreal.TArray<unreal.landscape.ULandscapeComponent>;
  
  /**
    Allows overriding the landscape bounds. This is useful if you distort the landscape with world-position-offset, for example
    Extension value in the positive Z axis, positive value increases bound size
    Note that this can also be overridden per-component when the component is selected with the component select tool
  **/
  @:uproperty public var PositiveZBoundsExtension : unreal.Float32;
  
  /**
    Allows overriding the landscape bounds. This is useful if you distort the landscape with world-position-offset, for example
    Extension value in the negative Z axis, positive value increases bound size
    Note that this can also be overridden per-component when the component is selected with the component select tool
  **/
  @:uproperty public var NegativeZBoundsExtension : unreal.Float32;
  
  /**
    Controls if this component draws in the main pass as well as in the virtual texture.
  **/
  @:uproperty public var VirtualTextureRenderPassType : unreal.ERuntimeVirtualTextureMainPassType;
  
  /**
    Bias to the LOD selected for rendering to runtime virtual textures.
    Higher values reduce vertex count when rendering to the runtime virtual texture.
  **/
  @:uproperty public var VirtualTextureLodBias : unreal.Int32;
  
  /**
    Number of mesh levels to use when rendering landscape into runtime virtual texture.
    Lower values reduce vertex count when rendering to the runtime virtual texture but decrease accuracy when using values that require vertex interpolation.
  **/
  @:uproperty public var VirtualTextureNumLods : unreal.Int32;
  
  /**
    Array of runtime virtual textures into which we draw this landscape.
    The material also needs to be set up to output to a virtual texture.
  **/
  @:uproperty public var RuntimeVirtualTextures : unreal.TArray<unreal.URuntimeVirtualTexture>;
  
  /**
    Maximum geometry LOD at which to render unique hole meshes.
  **/
  @:uproperty public var MeshHolesMaxLod : unreal.UInt8;
  
  /**
    Use unique geometry instead of material alpha tests for holes on mobile platforms. This requires additional memory and will render more vertices at lower LODs.
  **/
  @:uproperty public var bMeshHoles : Bool;
  #if WITH_EDITORONLY_DATA
  @:uproperty public var bIsPerformingInteractiveActionOnLandscapeMaterialOverride : Bool;
  @:uproperty public var PreEditLandscapeMaterialsOverride : unreal.TArray<unreal.landscape.FLandscapeProxyMaterialOverride>;
  @:uproperty public var PreEditLandscapeHoleMaterial : unreal.UMaterialInterface;
  @:uproperty public var PreEditLandscapeMaterial : unreal.UMaterialInterface;
  #end // WITH_EDITORONLY_DATA
  @:uproperty public var LandscapeMaterialsOverride : unreal.TArray<unreal.landscape.FLandscapeProxyMaterialOverride>;
  
  /**
    Material used to render landscape components with holes. If not set, LandscapeMaterial will be used (blend mode will be overridden to Masked if it is set to Opaque)
  **/
  @:uproperty public var LandscapeHoleMaterial : unreal.UMaterialInterface;
  
  /**
    Combined material used to render the landscape
  **/
  @:uproperty(BlueprintSetter=EditorSetLandscapeMaterial) public var LandscapeMaterial : unreal.UMaterialInterface;
  
  /**
    Allows artists to adjust the distance where textures using UV 0 are streamed in/out.
    1.0 is the default, whereas a higher value increases the streamed-in resolution.
    Value can be < 0 (from legcay content, or code changes)
  **/
  @:uproperty public var StreamingDistanceMultiplier : unreal.Float32;
  
  /**
    Default physical material, used when no per-layer values physical materials
  **/
  @:uproperty public var DefaultPhysMaterial : unreal.physicscore.UPhysicalMaterial;
  
  /**
    LOD level to use when running lightmass (increase to 1 or 2 for large landscapes to stop lightmass crashing)
  **/
  @:uproperty public var StaticLightingLOD : unreal.Int32;
  #if WITH_EDITORONLY_DATA
  
  /**
    Display Order mode for the targets
  **/
  @:uproperty public var TargetDisplayOrder : unreal.landscape.ELandscapeLayerDisplayMode;
  
  /**
    Display Order of the targets
  **/
  @:uproperty public var TargetDisplayOrderList : unreal.TArray<unreal.FName>;
  
  /**
    LOD level to use when exporting the landscape to obj or FBX
  **/
  @:uproperty public var ExportLOD : unreal.Int32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Landscape LOD to use as an occluder geometry for software occlusion
  **/
  @:uproperty public var OccluderGeometryLOD : unreal.Int32;
  
  /**
    Component screen size (0.0 - 1.0) at which we start the tessellation falloff.
  **/
  @:uproperty public var TessellationComponentScreenSizeFalloff : unreal.Float32;
  
  /**
    Tell if we should enable tessellation falloff. It will ramp down the Tessellation Multiplier from the material linearly. It should be disabled if you plan on using a custom implementation in material/shaders.
  **/
  @:uproperty public var UseTessellationComponentScreenSizeFalloff : Bool;
  
  /**
    Component screen size (0.0 - 1.0) at which we should enable tessellation.
  **/
  @:uproperty public var TessellationComponentScreenSize : unreal.Float32;
  
  /**
    The distribution setting used to change the LOD generation, 2 is the normal distribution, small number mean you want your last LODs to take more screen space and big number mean you want your first LODs to take more screen space.
  **/
  @:uproperty public var LODDistributionSetting : unreal.Float32;
  
  /**
    The distribution setting used to change the LOD 0 generation, 1.75 is the normal distribution, numbers influence directly the LOD0 proportion on screen.
  **/
  @:uproperty public var LOD0DistributionSetting : unreal.Float32;
  
  /**
    This is the starting screen size used to calculate the distribution, by default it's 1, but you can increase the value if you want less LOD0 component, and you use very large landscape component.
  **/
  @:uproperty public var LOD0ScreenSize : unreal.Float32;
  
  /**
    Component screen size (0.0 - 1.0) at which we should keep sub sections. This is mostly pertinent if you have large component of > 64 and component are close to the camera. The goal is to reduce draw call, so if a component is smaller than the value, we merge all subsections into 1 drawcall.
  **/
  @:uproperty public var ComponentScreenSizeToUseSubSections : unreal.Float32;
  @:deprecated @:uproperty public var LODFalloff_DEPRECATED : unreal.landscape.ELandscapeLODFalloff;
  @:deprecated @:uproperty public var LODDistanceFactor_DEPRECATED : unreal.Float32;
  
  /**
    Max LOD level to use when rendering, -1 means the max available
  **/
  @:uproperty public var MaxLODLevel : unreal.Int32;
  
  /**
    Offset in quads from global components grid origin (in quads) *
  **/
  @:uproperty public var LandscapeSectionOffset : unreal.FIntPoint;
  
  /**
    Guid for LandscapeEditorInfo *
  **/
  @:uproperty private var LandscapeGuid : unreal.FGuid;
  @:uproperty public var SplineComponent : unreal.landscape.ULandscapeSplinesComponent;
  
  /**
    Deform landscape using a given spline
    @param InSplineComponent - The component containing the spline data
    @param StartWidth - Width of the spline at the start node, in Spline Component local space
    @param EndWidth   - Width of the spline at the end node, in Spline Component local space
    @param StartSideFalloff - Width of the falloff at either side of the spline at the start node, in Spline Component local space
    @param EndSideFalloff - Width of the falloff at either side of the spline at the end node, in Spline Component local space
    @param StartRoll - Roll applied to the spline at the start node, in degrees. 0 is flat
    @param EndRoll - Roll applied to the spline at the end node, in degrees. 0 is flat
    @param NumSubdivisions - Number of triangles to place along the spline when applying it to the landscape. Higher numbers give better results, but setting it too high will be slow and may cause artifacts
    @param bRaiseHeights - Allow the landscape to be raised up to the level of the spline. If both bRaiseHeights and bLowerHeights are false, no height modification of the landscape will be performed
    @param bLowerHeights - Allow the landscape to be lowered down to the level of the spline. If both bRaiseHeights and bLowerHeights are false, no height modification of the landscape will be performed
    @param PaintLayer - LayerInfo to paint, or none to skip painting. The landscape must be configured with the same layer info in one of its layers or this will do nothing!
    @param EditLayerName - Name of the landscape edition layer to affect (in Edit Layers mode)
  **/
  @:ufunction(BlueprintCallable) @:final public function EditorApplySpline(InSplineComponent : unreal.USplineComponent, StartWidth : unreal.Float32 = 200.000000, EndWidth : unreal.Float32 = 200.000000, StartSideFalloff : unreal.Float32 = 200.000000, EndSideFalloff : unreal.Float32 = 200.000000, StartRoll : unreal.Float32 = 0.000000, EndRoll : unreal.Float32 = 0.000000, NumSubdivisions : unreal.Int32 = 20, bRaiseHeights : Bool = true, bLowerHeights : Bool = true, @:opt("None") PaintLayer : unreal.landscape.ULandscapeLayerInfoObject, EditLayerName : unreal.FName) : Void;
  
  /**
    Set an MID texture parameter value for all landscape components.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLandscapeMaterialTextureParameterValue(ParameterName : unreal.FName, Value : unreal.UTexture) : Void;
  
  /**
    Set an MID vector parameter value for all landscape components.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLandscapeMaterialVectorParameterValue(ParameterName : unreal.FName, Value : unreal.FLinearColor) : Void;
  
  /**
    Set a MID scalar (float) parameter value for all landscape components.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLandscapeMaterialScalarParameterValue(ParameterName : unreal.FName, Value : unreal.Float32) : Void;
  
}
