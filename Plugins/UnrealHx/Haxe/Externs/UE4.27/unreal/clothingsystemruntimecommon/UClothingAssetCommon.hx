/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.clothingsystemruntimecommon;

/**
  Implementation of non-solver specific, but common Engine related functionality.
  
  Solver specific implementations may wish to override this class to construct
  their own default instances of child classes, such as \c ClothSimConfig and
  \c CustomData, as well as override the \c AddNewLod() factory to build their
  own implementation of \c UClothLODDataBase.
**/
@:umodule("ClothingSystemRuntimeCommon")
@:glueCppIncludes("ClothingAsset.h")
@:uextern @:uclass extern class UClothingAssetCommon extends unreal.clothingsystemruntimeinterface.UClothingAssetBase {
  #if WITH_EDITORONLY_DATA
  
  /**
    Deprecated property for transitioning the \c FClothConfig struct to the
    \c UClothConfigBase array, in a new property called \c ClothConfigs.
  **/
  @:deprecated @:uproperty public var ClothConfig_DEPRECATED : unreal.clothingsystemruntimecommon.FClothConfig_Legacy;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Custom data applied by the importer depending on where the asset was imported from.
  **/
  @:uproperty public var CustomData : unreal.clothingsystemruntimecommon.UClothingAssetCustomData;
  
  /**
    Bone to treat as the root of the simulation space.
  **/
  @:uproperty public var ReferenceBoneIndex : unreal.Int32;
  
  /**
    List of the indices for the bones in UsedBoneNames, used for remapping.
  **/
  @:uproperty public var UsedBoneIndices : unreal.TArray<unreal.Int32>;
  
  /**
    List of bones this asset uses inside its parent mesh.
  **/
  @:uproperty public var UsedBoneNames : unreal.TArray<unreal.FName>;
  
  /**
    Tracks which clothing LOD each skel mesh LOD corresponds to (LodMap[SkelLod]=ClothingLod).
  **/
  @:uproperty public var LodMap : unreal.TArray<unreal.Int32>;
  
  /**
    The actual asset data, listed by LOD.
  **/
  @:uproperty public var LodData : unreal.TArray<unreal.clothingsystemruntimecommon.FClothLODDataCommon>;
  #if WITH_EDITORONLY_DATA
  
  /**
    Deprecated. Use LodData instead
  **/
  @:deprecated @:uproperty public var ClothLodData_DEPRECATED : unreal.TArray<unreal.clothingsystemruntimecommon.UClothLODDataCommon_Legacy>;
  
  /**
    Parameters for how Chaos cloth behaves
    These will not affect NVcloth
    For now, we have two configuration parameters so that we can switch between chaos and
    non chaos at will without losing the original NVcloth data
  **/
  @:deprecated @:uproperty public var ChaosClothSimConfig_DEPRECATED : unreal.clothingsystemruntimeinterface.UClothConfigBase;
  
  /**
    Parameters for how the NVcloth behaves.
    These will have no effect on Chaos cloth
  **/
  @:deprecated @:uproperty public var ClothSimConfig_DEPRECATED : unreal.clothingsystemruntimeinterface.UClothConfigBase;
  
  /**
    Shared by all cloth instances in a skeletal mesh
    Only supported with Chaos Cloth for now
    This may not be editable on unused cloth assets
  **/
  @:deprecated @:uproperty public var ClothSharedSimConfig_DEPRECATED : unreal.clothingsystemruntimeinterface.UClothConfigBase;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Simulation specific cloth parameters.
    Use GetClothConfig() to retrieve the correct parameters/config type for the desired cloth simulation system.
  **/
  @:uproperty public var ClothConfigs : unreal.TMap<unreal.FName, unreal.clothingsystemruntimeinterface.UClothConfigBase>;
  
  /**
    The physics asset to extract collisions from when building a simulation.
  **/
  @:uproperty public var PhysicsAsset : unreal.UPhysicsAsset;
  
}
