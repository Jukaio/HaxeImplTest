/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Container for a physics representation of an object
**/
@:glueCppIncludes("Classes/PhysicsEngine/BodyInstance.h")
@:noCopy @:uextern @:ustruct extern class FBodyInstance extends unreal.physicscore.FBodyInstanceCore {
  
  /**
    Provide appropriate interface for doing this instead of allowing BlueprintReadWrite *
  **/
  @:uproperty public var PhysicsBlendWeight : unreal.Float32;
  
  /**
    Stabilization factor for this body if Physics stabilization is enabled. A higher number will cause more aggressive stabilization at the risk of loss of momentum at low speeds. A value of 0 will disable stabilization for this body.
  **/
  @:uproperty public var StabilizationThresholdMultiplier : unreal.Float32;
  
  /**
    If the SleepFamily is set to custom, multiply the natural sleep threshold by this amount. A higher number will cause the body to sleep sooner.
  **/
  @:uproperty public var CustomSleepThresholdMultiplier : unreal.Float32;
  
  /**
    The maximum angular velocity for this instance [degrees/s]
  **/
  @:uproperty public var MaxAngularVelocity : unreal.Float32;
  
  /**
    Allows you to override the PhysicalMaterial to use for simple collision on this body.
  **/
  @:uproperty private var PhysMaterialOverride : unreal.physicscore.UPhysicalMaterial;
  
  /**
    Custom walkable slope override setting for this instance.
    @see GetWalkableSlopeOverride(), SetWalkableSlopeOverride()
  **/
  @:uproperty private var WalkableSlopeOverride : unreal.FWalkableSlopeOverride;
  
  /**
    Per-instance scaling of inertia (bigger number means  it'll be harder to rotate)
  **/
  @:uproperty public var InertiaTensorScale : unreal.FVector;
  
  /**
    Per-instance scaling of mass
  **/
  @:uproperty public var MassScale : unreal.Float32;
  
  /**
    User specified offset for the center of mass of this object, from the calculated location
  **/
  @:uproperty public var COMNudge : unreal.FVector;
  
  /**
    Locks physical movement along a custom plane for a given normal.
  **/
  @:uproperty public var CustomDOFPlaneNormal : unreal.FVector;
  
  /**
    'Drag' force added to reduce angular movement
  **/
  @:uproperty public var AngularDamping : unreal.Float32;
  
  /**
    'Drag' force added to reduce linear movement
  **/
  @:uproperty public var LinearDamping : unreal.Float32;
  
  /**
    Mass of the body in KG. By default we compute this based on physical material and mass scale.
    @see bOverrideMass to set this directly
  **/
  @:uproperty private var MassInKgOverride : unreal.Float32;
  
  /**
    [PhysX Only] The maximum velocity used to depenetrate this object
  **/
  @:uproperty private var MaxDepenetrationVelocity : unreal.Float32;
  
  /**
    [PhysX Only] This physics body's solver iteration count for velocity. Increasing this will be more CPU intensive, but better stabilized.
  **/
  @:uproperty public var VelocitySolverIterationCount : unreal.UInt8;
  
  /**
    [PhysX Only] This physics body's solver iteration count for position. Increasing this will be more CPU intensive, but better stabilized.
  **/
  @:uproperty public var PositionSolverIterationCount : unreal.UInt8;
  #if WITH_EDITORONLY_DATA
  
  /**
    Types of objects that this physics objects will collide with.
  **/
  @:deprecated @:uproperty public var ResponseToChannels_DEPRECATED : unreal.FCollisionResponseContainer;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Override the default max angular velocity
  **/
  @:uproperty public var bOverrideMaxAngularVelocity : Bool;
  
  /**
    [Physx Only] Lock rotation about the Z-axis
  **/
  @:uproperty public var bLockZRotation : Bool;
  
  /**
    [Physx Only] Lock rotation about the Y-axis
  **/
  @:uproperty public var bLockYRotation : Bool;
  
  /**
    [Physx Only] Lock rotation about the X-axis
  **/
  @:uproperty public var bLockXRotation : Bool;
  
  /**
    [Physx Only] Lock translation along the Z-axis
  **/
  @:uproperty public var bLockZTranslation : Bool;
  
  /**
    [Physx Only] Lock translation along the Y-axis
  **/
  @:uproperty public var bLockYTranslation : Bool;
  
  /**
    [Physx Only] Lock translation along the X-axis
  **/
  @:uproperty public var bLockXTranslation : Bool;
  
  /**
    [Physx Only] When a Locked Axis Mode is selected, will lock rotation to the specified axis
  **/
  @:uproperty public var bLockRotation : Bool;
  
  /**
    [Physx Only] When a Locked Axis Mode is selected, will lock translation on the specified axis
  **/
  @:uproperty public var bLockTranslation : Bool;
  
  /**
    Should 'Hit' events fire when this object collides during physics simulation.
  **/
  @:uproperty public var bNotifyRigidBodyCollision : Bool;
  
  /**
    If true ignore analytic collisions and treat objects as a general implicit surface
  **/
  @:uproperty public var bIgnoreAnalyticCollisions : Bool;
  
  /**
    If true Continuous Collision Detection (CCD) will be used for this component
  **/
  @:uproperty public var bUseCCD : Bool;
  
  /**
    [Physx Only] Locks physical movement along specified axis.
  **/
  @:uproperty public var DOFMode : unreal.EDOFMode;
  
  /**
    The set of values used in considering when put this body to sleep.
  **/
  @:uproperty public var SleepFamily : unreal.physicscore.ESleepFamily;
  
}
