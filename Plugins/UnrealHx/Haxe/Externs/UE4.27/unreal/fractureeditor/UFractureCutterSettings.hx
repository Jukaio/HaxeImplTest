/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.fractureeditor;

/**
  WARNING: This type was not defined as DLL export on its declaration. Because of that, some of its methods are inaccessible
  
  Settings specifically related to the one-time destructive fracturing of a mesh *
**/
@:umodule("FractureEditor")
@:glueCppIncludes("Private/FractureToolCutter.h")
@:noClass @:uextern @:uclass extern class UFractureCutterSettings extends unreal.fractureeditor.UFractureToolSettings {
  
  /**
    Spacing between vertices on cut surfaces, where noise is added.  Larger spacing between vertices will create more efficient meshes with fewer triangles, but less resolution to see the shape of the added noise
  **/
  @:uproperty public var SurfaceResolution : unreal.Float32;
  
  /**
    Number of fractal layers of Perlin noise to apply.  Smaller values (1 or 2) will create noise that looks like gentle rolling hills, while larger values (> 4) will tend to look more like craggy mountains
  **/
  @:uproperty public var OctaveNumber : unreal.Int32;
  
  /**
    Period of the Perlin noise.  Smaller values will create noise faces that are smoother
  **/
  @:uproperty public var Frequency : unreal.Float32;
  
  /**
    Size of the noise displacement in centimeters
  **/
  @:uproperty public var Amplitude : unreal.Float32;
  
  /**
    Amount of space to leave between cut pieces
  **/
  @:uproperty public var Grout : unreal.Float32;
  
  /**
    Generate a fracture pattern across all selected meshes.
  **/
  @:uproperty public var bDrawDiagram : Bool;
  
  /**
    Generate a fracture pattern across all selected meshes.
  **/
  @:uproperty public var bDrawSites : Bool;
  
  /**
    Generate a fracture pattern across all selected meshes.
  **/
  @:uproperty public var bGroupFracture : Bool;
  
  /**
    Chance to shatter each mesh.  Useful when shattering multiple selected meshes.
  **/
  @:uproperty public var ChanceToFracture : unreal.Float32;
  
  /**
    Random number generator seed for repeatability
  **/
  @:uproperty public var RandomSeed : unreal.Int32;
  
}
