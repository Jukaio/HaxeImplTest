/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  A class responsible of fetching a timecode from a source.
  Note, FApp::GetTimecode and FApp::GetTimecodeFramerate should be used to retrieve
  the current system Timecode and Framerate.
**/
@:glueCppIncludes("Engine/TimecodeProvider.h")
@:uextern @:uclass extern class UTimecodeProvider extends unreal.UObject {
  
  /**
    Number of frames to subtract from the qualified frame time when GetDelayedQualifiedFrameTime or GetDelayedTimecode is called.
    @see GetDelayedQualifiedFrameTime, GetDelayedTimecode
  **/
  @:uproperty public var FrameDelay : unreal.Float32;
  
  /**
    Fetch current timecode from its source. e.g. From hardware/network/file/etc.
    It is recommended to cache the fetched timecode.
  **/
  @:ufunction(BlueprintCallable) public function FetchTimecode(OutFrameTime : unreal.PRef<unreal.FQualifiedFrameTime>) : Bool;
  
  /**
    Update the state of the provider. Call it to ensure timecode and state are updated.
    It is suggested to fetch timecode from its source and cache it for the getters.
  **/
  @:ufunction(BlueprintCallable) public function FetchAndUpdate() : Void;
  
  /**
    Return current frame time.
    Since it may be called several times per frame, it is suggested to return a cached value.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetQualifiedFrameTime() : unreal.FQualifiedFrameTime;
  
  /**
    Return current frame time with FrameDelay applied.
    Only assume valid when GetSynchronizationState() returns Synchronized.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDelayedQualifiedFrameTime() : unreal.FQualifiedFrameTime;
  
  /**
    Return the frame time converted into a timecode value.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTimecode() : unreal.FTimecode;
  
  /**
    Return the delayed frame time converted into a timecode value.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetDelayedTimecode() : unreal.FTimecode;
  
  /**
    Return the frame rate of the frame time.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetFrameRate() : unreal.FFrameRate;
  
  /**
    The state of the TimecodeProvider and if it's currently synchronized and the Timecode and FrameRate getters are valid.
  **/
  @:ufunction(BlueprintCallable) @:thisConst public function GetSynchronizationState() : unreal.ETimecodeProviderSynchronizationState;
  
}
