/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

@:umodule("AudioMixer")
@:glueCppIncludes("AudioMixerBlueprintLibrary.h")
@:uextern @:uclass extern class UAudioMixerBlueprintLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Adds a submix effect preset to the master submix.
  **/
  @:ufunction(BlueprintCallable) static public function AddMasterSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Removes a submix effect preset from the master submix.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveMasterSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Clears all master submix effects.
  **/
  @:ufunction(BlueprintCallable) static public function ClearMasterSubmixEffects(WorldContextObject : unreal.Const<unreal.UObject>) : Void;
  
  /**
    Adds a submix effect preset to the given submix at the end of its submix effect chain. Returns the number of submix effects.
  **/
  @:ufunction(BlueprintCallable) static public function AddSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : unreal.Int32;
  @:ufunction(BlueprintCallable) static public function RemoveSubmixEffectPreset(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Removes all instances of a submix effect preset from the given submix.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  @:ufunction(BlueprintCallable) static public function RemoveSubmixEffectPresetAtIndex(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixChainIndex : unreal.Int32) : Void;
  
  /**
    Removes the submix effect at the given submix chain index, if there is a submix effect at that index.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveSubmixEffectAtIndex(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixChainIndex : unreal.Int32) : Void;
  @:ufunction(BlueprintCallable) static public function ReplaceSoundEffectSubmix(WorldContextObject : unreal.Const<unreal.UObject>, InSoundSubmix : unreal.USoundSubmix, SubmixChainIndex : unreal.Int32, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Replaces the submix effect at the given submix chain index, adds the effect if there is none at that index.
  **/
  @:ufunction(BlueprintCallable) static public function ReplaceSubmixEffect(WorldContextObject : unreal.Const<unreal.UObject>, InSoundSubmix : unreal.USoundSubmix, SubmixChainIndex : unreal.Int32, SubmixEffectPreset : unreal.USoundEffectSubmixPreset) : Void;
  
  /**
    Clears all submix effects on the given submix.
  **/
  @:ufunction(BlueprintCallable) static public function ClearSubmixEffects(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix) : Void;
  
  /**
    Sets a submix effect chain override on the given submix. The effect chain will cross fade from the base effect chain or current override to the new override.
  **/
  @:ufunction(BlueprintCallable) static public function SetSubmixEffectChainOverride(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, SubmixEffectPresetChain : unreal.TArray<unreal.USoundEffectSubmixPreset>, FadeTimeSec : unreal.Float32) : Void;
  
  /**
    Clears all submix effect overrides on the given submix and returns it to the default effect chain.
  **/
  @:ufunction(BlueprintCallable) static public function ClearSubmixEffectChainOverride(WorldContextObject : unreal.Const<unreal.UObject>, SoundSubmix : unreal.USoundSubmix, FadeTimeSec : unreal.Float32) : Void;
  
  /**
    Start recording audio. By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StartRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExpectedDuration : unreal.Float32, @:opt("None") SubmixToRecord : unreal.USoundSubmix) : Void;
  
  /**
    Stop recording audio. Path can be absolute, or relative (to the /Saved/BouncedWavFiles folder). By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StopRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, ExportType : unreal.EAudioRecordingExportType, Name : unreal.FString, Path : unreal.FString, @:opt("None") SubmixToRecord : unreal.USoundSubmix, @:opt("None") ExistingSoundWaveToOverwrite : unreal.USoundWave) : unreal.USoundWave;
  
  /**
    Pause recording audio, without finalizing the recording to disk. By leaving the Submix To Record field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function PauseRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToPause : unreal.USoundSubmix) : Void;
  
  /**
    Resume recording audio after pausing. By leaving the Submix To Pause field blank, you can record the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function ResumeRecordingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToPause : unreal.USoundSubmix) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StartAnalyzingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix, @:opt("DefaultSize") FFTSize : unreal.EFFTSize, @:opt("Linear") InterpolationMethod : unreal.EFFTPeakInterpolationMethod, @:opt("Hann") WindowType : unreal.EFFTWindowType, HopSize : unreal.Float32 = 0.000000, @:opt("MagnitudeSpectrum") SpectrumType : unreal.EAudioSpectrumType) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Stop Analyzing blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function StopAnalyzingOutput(WorldContextObject : unreal.Const<unreal.UObject>, @:opt("None") SubmixToStopAnalyzing : unreal.USoundSubmix) : Void;
  
  /**
    Make an array of musically spaced bands with ascending frequency.
    
    @param InNumSemitones - The number of semitones to represent.
    @param InStartingMuiscalNote - The name of the first note in the array.
    @param InStartingOctave - The octave of the first note in the arrya.
    @param InAttackTimeMsec - The attack time (in milliseconds) to apply to each band's envelope tracker.
    @param InReleaseTimeMsec - The release time (in milliseconds) to apply to each band's envelope tracker.
  **/
  @:ufunction(BlueprintCallable) static public function MakeMusicalSpectralAnalysisBandSettings(InNumSemitones : unreal.Int32 = 60, @:opt("C") InStartingMusicalNote : unreal.audiomixer.EMusicalNoteName, InStartingOctave : unreal.Int32 = 2, InAttackTimeMsec : unreal.Int32 = 10, InReleaseTimeMsec : unreal.Int32 = 10) : unreal.TArray<unreal.FSoundSubmixSpectralAnalysisBandSettings>;
  
  /**
    Make an array of logarithmically spaced bands.
    
    @param InNumBands - The number of bands to used to represent the spectrum.
    @param InMinimumFrequency - The center frequency of the first band.
    @param InMaximumFrequency - The center frequency of the last band.
    @param InAttackTimeMsec - The attack time (in milliseconds) to apply to each band's envelope tracker.
    @param InReleaseTimeMsec - The release time (in milliseconds) to apply to each band's envelope tracker.
  **/
  @:ufunction(BlueprintCallable) static public function MakeFullSpectrumSpectralAnalysisBandSettings(InNumBands : unreal.Int32 = 30, InMinimumFrequency : unreal.Float32 = 40.000000, InMaximumFrequency : unreal.Float32 = 16000.000000, InAttackTimeMsec : unreal.Int32 = 10, InReleaseTimeMsec : unreal.Int32 = 10) : unreal.TArray<unreal.FSoundSubmixSpectralAnalysisBandSettings>;
  
  /**
    Make an array of bands which span the frequency range of a given EAudioSpectrumBandPresetType.
    
    @param InBandPresetType - The type audio content which the bands encompass.
    @param InNumBands - The number of bands used to represent the spectrum.
    @param InAttackTimeMsec - The attack time (in milliseconds) to apply to each band's envelope tracker.
    @param InReleaseTimeMsec - The release time (in milliseconds) to apply to each band's envelope tracker.
  **/
  @:ufunction(BlueprintCallable) static public function MakePresetSpectralAnalysisBandSettings(InBandPresetType : unreal.EAudioSpectrumBandPresetType, InNumBands : unreal.Int32 = 10, InAttackTimeMsec : unreal.Int32 = 10, InReleaseTimeMsec : unreal.Int32 = 10) : unreal.TArray<unreal.FSoundSubmixSpectralAnalysisBandSettings>;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function GetMagnitudeForFrequencies(WorldContextObject : unreal.Const<unreal.UObject>, Frequencies : unreal.Const<unreal.PRef<unreal.TArray<unreal.Float32>>>, Magnitudes : unreal.PRef<unreal.TArray<unreal.Float32>>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix) : Void;
  
  /**
    Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.
  **/
  @:ufunction(BlueprintCallable) static public function GetPhaseForFrequencies(WorldContextObject : unreal.Const<unreal.UObject>, Frequencies : unreal.Const<unreal.PRef<unreal.TArray<unreal.Float32>>>, Phases : unreal.PRef<unreal.TArray<unreal.Float32>>, @:opt("None") SubmixToAnalyze : unreal.USoundSubmix) : Void;
  
  /**
    Adds source effect entry to preset chain. Only effects the instance of the preset chain
  **/
  @:ufunction(BlueprintCallable) static public function AddSourceEffectToPresetChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, Entry : unreal.FSourceEffectChainEntry) : Void;
  
  /**
    Adds source effect entry to preset chain. Only affects the instance of preset chain.
  **/
  @:ufunction(BlueprintCallable) static public function RemoveSourceEffectFromPresetChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, EntryIndex : unreal.Int32) : Void;
  
  /**
    Set whether or not to bypass the effect at the source effect chain index.
  **/
  @:ufunction(BlueprintCallable) static public function SetBypassSourceEffectChainEntry(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain, EntryIndex : unreal.Int32, bBypassed : Bool) : Void;
  
  /**
    Returns the number of effect chain entries in the given source effect chain.
  **/
  @:ufunction(BlueprintCallable) static public function GetNumberOfEntriesInSourceEffectChain(WorldContextObject : unreal.Const<unreal.UObject>, PresetChain : unreal.USoundEffectSourcePresetChain) : unreal.Int32;
  
  /**
    Begin loading a sound into the cache so that it can be played immediately.
  **/
  @:ufunction(BlueprintCallable) static public function PrimeSoundForPlayback(SoundWave : unreal.USoundWave, OnLoadCompletion : unreal.Const<unreal.audiomixer.FOnSoundLoadComplete>) : Void;
  
  /**
    Begin loading any sounds referenced by a sound cue into the cache so that it can be played immediately.
  **/
  @:ufunction(BlueprintCallable) static public function PrimeSoundCueForPlayback(SoundCue : unreal.USoundCue) : Void;
  
  /**
    Trim memory used by the audio cache. Returns the number of megabytes freed.
  **/
  @:ufunction(BlueprintCallable) static public function TrimAudioCache(InMegabytesToFree : unreal.Float32) : unreal.Float32;
  
  /**
    Starts the given audio bus.
  **/
  @:ufunction(BlueprintCallable) static public function StartAudioBus(WorldContextObject : unreal.Const<unreal.UObject>, AudioBus : unreal.UAudioBus) : Void;
  
  /**
    Stops the given audio bus.
  **/
  @:ufunction(BlueprintCallable) static public function StopAudioBus(WorldContextObject : unreal.Const<unreal.UObject>, AudioBus : unreal.UAudioBus) : Void;
  
  /**
    Queries if the given audio bus is active (and audio can be mixed to it).
  **/
  @:ufunction(BlueprintCallable) static public function IsAudioBusActive(WorldContextObject : unreal.Const<unreal.UObject>, AudioBus : unreal.UAudioBus) : Bool;
  
}
