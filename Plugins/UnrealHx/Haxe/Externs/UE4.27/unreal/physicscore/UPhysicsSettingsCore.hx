/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.physicscore;

/**
  Default physics settings.
**/
@:umodule("PhysicsCore")
@:glueCppIncludes("PhysicsSettingsCore.h")
@:uextern @:uclass extern class UPhysicsSettingsCore extends unreal.developersettings.UDeveloperSettings {
  
  /**
    Options to apply to Chaos solvers on creation
  **/
  @:uproperty public var SolverOptions : unreal.chaos.FChaosSolverConfiguration;
  
  /**
    Determines the default physics shape complexity.
  **/
  @:uproperty public var DefaultShapeComplexity : unreal.physicscore.ECollisionTraceFlag;
  
  /**
    If true, simulate physics for this component on a dedicated server.
    This should be set if simulating physics and replicating with a dedicated server.
  **/
  @:uproperty public var bSimulateSkeletalMeshOnDedicatedServer : Bool;
  
  /**
    Max Contact offset.
  **/
  @:uproperty public var MaxContactOffset : unreal.Float32;
  
  /**
    Min Contact offset.
  **/
  @:uproperty public var MinContactOffset : unreal.Float32;
  
  /**
    Contact offset multiplier. When creating a physics shape we look at its bounding volume and multiply its minimum value by this multiplier. A bigger number will generate contact points earlier which results in higher stability at the cost of performance.
  **/
  @:uproperty public var ContactOffsetMultiplier : unreal.Float32;
  
  /**
    Max velocity which may be used to depenetrate simulated physics objects. 0 means no maximum.
  **/
  @:uproperty public var MaxDepenetrationVelocity : unreal.Float32;
  
  /**
    Max angular velocity that a simulated object can achieve.
  **/
  @:uproperty public var MaxAngularVelocity : unreal.Float32;
  
  /**
    Restitution combine mode, controls how restitution is computed for multiple materials.
  **/
  @:uproperty public var RestitutionCombineMode : unreal.physicscore.EFrictionCombineMode;
  
  /**
    Friction combine mode, controls how friction is computed for multiple materials.
  **/
  @:uproperty public var FrictionCombineMode : unreal.physicscore.EFrictionCombineMode;
  
  /**
    Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity
  **/
  @:uproperty public var BounceThresholdVelocity : unreal.Float32;
  
  /**
    If true, static meshes will use per poly collision as complex collision by default. If false the default behavior is the same as UseSimpleAsComplex.
  **/
  @:deprecated @:uproperty public var bDefaultHasComplexCollision_DEPRECATED : Bool;
  
  /**
    Can 2D physics be used (Box2D)?
  **/
  @:uproperty public var bEnable2DPhysics : Bool;
  
  /**
    Whether to warn when physics locks are used incorrectly. Turning this off is not recommended and should only be used by very advanced users.
  **/
  @:uproperty public var bWarnMissingLocks : Bool;
  
  /**
    Enables stabilization of contacts for slow moving bodies. This will help improve the stability of stacking.
  **/
  @:uproperty public var bEnableStabilization : Bool;
  
  /**
    Enables persistent contact manifolds. This will generate fewer contact points, but with more accuracy. Reduces stability of stacking, but can help energy conservation.
  **/
  @:uproperty public var bEnablePCM : Bool;
  
  /**
    Enables shape sharing between sync and async scene for static rigid actors
  **/
  @:uproperty public var bEnableShapeSharing : Bool;
  
  /**
    Triangles from triangle meshes (BSP) with an area less than or equal to this value will be removed from physics collision data. Set to less than 0 to disable.
  **/
  @:uproperty public var TriangleMeshTriangleMinAreaThreshold : unreal.Float32;
  
  /**
    Threshold for ragdoll bodies above which they will be added to an aggregate before being added to the scene
  **/
  @:uproperty public var RagdollAggregateThreshold : unreal.Int32;
  
  /**
    Amount of memory to reserve for PhysX simulate(), this is per pxscene and will be rounded up to the next 16K boundary
  **/
  @:uproperty public var SimulateScratchMemorySize : unreal.Int32;
  
  /**
    Default fluid friction for Physics Volumes.
  **/
  @:uproperty public var DefaultFluidFriction : unreal.Float32;
  
  /**
    Default terminal velocity for Physics Volumes.
  **/
  @:uproperty public var DefaultTerminalVelocity : unreal.Float32;
  
  /**
    Default gravity.
  **/
  @:uproperty public var DefaultGravityZ : unreal.Float32;
  
}
