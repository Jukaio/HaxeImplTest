// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/headmounteddisplay/uheadmounteddisplayfunctionlibrary.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class UHeadMountedDisplayFunctionLibrary_Glue {
public static function IsHeadMountedDisplayEnabled():Bool;
public static function IsHeadMountedDisplayConnected():Bool;
public static function EnableHMD(bEnable:Bool):Bool;
public static function GetHMDDeviceName():unreal.VariantPtr;
public static function GetXRSystemFlags():Int;
public static function GetVersionString():unreal.VariantPtr;
public static function GetHMDWornState():Int;
public static function GetOrientationAndPosition(DeviceRotation:unreal.VariantPtr, DevicePosition:unreal.VariantPtr):Void;
public static function HasValidTrackingPosition():Bool;
public static function GetNumOfTrackingSensors():Int;
public static function GetTrackingSensorParameters(Origin:unreal.VariantPtr, Rotation:unreal.VariantPtr, LeftFOV:cpp.Float32, RightFOV:cpp.Float32, TopFOV:cpp.Float32, BottomFOV:cpp.Float32, Distance:cpp.Float32, NearPlane:cpp.Float32, FarPlane:cpp.Float32, IsActive:Bool, Index:Int):Void;
public static function GetPositionalTrackingCameraParameters(CameraOrigin:unreal.VariantPtr, CameraRotation:unreal.VariantPtr, HFOV:cpp.Float32, VFOV:cpp.Float32, CameraDistance:cpp.Float32, NearPlane:cpp.Float32, FarPlane:cpp.Float32):Void;
public static function IsInLowPersistenceMode():Bool;
public static function EnableLowPersistenceMode(bEnable:Bool):Void;
public static function ResetOrientationAndPosition(Yaw:cpp.Float32, Options:Int):Void;
public static function SetClippingPlanes(Near:cpp.Float32, Far:cpp.Float32):Void;
public static function GetScreenPercentage():cpp.Float32;
public static function GetPixelDensity():cpp.Float32;
public static function SetWorldToMetersScale(WorldContext:unreal.UIntPtr, NewScale:cpp.Float32):Void;
public static function GetWorldToMetersScale(WorldContext:unreal.UIntPtr):cpp.Float32;
public static function SetTrackingOrigin(Origin:Int):Void;
public static function GetTrackingOrigin():Int;
public static function GetTrackingToWorldTransform(WorldContext:unreal.UIntPtr):unreal.VariantPtr;
public static function CalibrateExternalTrackingToHMD(ExternalTrackingTransform:unreal.VariantPtr):Void;
public static function UpdateExternalTrackingHMDPosition(ExternalTrackingTransform:unreal.VariantPtr):Void;
public static function GetVRFocusState(bUseFocus:Bool, bHasFocus:Bool):Void;
public static function IsSpectatorScreenModeControllable():Bool;
public static function SetSpectatorScreenMode(Mode:Int):Void;
public static function SetSpectatorScreenTexture(InTexture:unreal.UIntPtr):Void;
public static function SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin:unreal.VariantPtr, EyeRectMax:unreal.VariantPtr, TextureRectMin:unreal.VariantPtr, TextureRectMax:unreal.VariantPtr, bDrawEyeFirst:Bool, bClearBlack:Bool, bUseAlpha:Bool):Void;
public static function EnumerateTrackedDevices(SystemId:unreal.VariantPtr, DeviceType:Int):unreal.VariantPtr;
public static function GetDevicePose(XRDeviceId:unreal.VariantPtr, bIsTracked:Bool, Orientation:unreal.VariantPtr, bHasPositionalTracking:Bool, Position:unreal.VariantPtr):Void;
public static function GetDeviceWorldPose(WorldContext:unreal.UIntPtr, XRDeviceId:unreal.VariantPtr, bIsTracked:Bool, Orientation:unreal.VariantPtr, bHasPositionalTracking:Bool, Position:unreal.VariantPtr):Void;
public static function IsDeviceTracking(XRDeviceId:unreal.VariantPtr):Bool;
public static function GetHMDData(WorldContext:unreal.UIntPtr, HMDData:unreal.VariantPtr):Void;
public static function GetMotionControllerData(WorldContext:unreal.UIntPtr, Hand:Int, MotionControllerData:unreal.VariantPtr):Void;
public static function ConfigureGestures(GestureConfig:unreal.VariantPtr):Bool;
public static function ConnectRemoteXRDevice(IpAddress:unreal.VariantPtr, BitRate:Int):Int;
public static function DisconnectRemoteXRDevice():Void;
public static function SetXRDisconnectDelegate(InDisconnectedDelegate:unreal.VariantPtr):Void;
public static function SetXRTimedInputActionDelegate(ActionName:unreal.VariantPtr, InDelegate:unreal.VariantPtr):Void;
public static function ClearXRTimedInputActionDelegate(ActionPath:unreal.VariantPtr):Void;
public static function GetControllerTransformForTime(WorldContext:unreal.UIntPtr, ControllerIndex:Int, MotionSource:unreal.VariantPtr, Time:unreal.VariantPtr, bTimeWasUsed:Bool, Orientation:unreal.VariantPtr, Position:unreal.VariantPtr, bProvidedLinearVelocity:Bool, LinearVelocity:unreal.VariantPtr, bProvidedAngularVelocity:Bool, AngularVelocityRadPerSec:unreal.VariantPtr):Bool;
public static function GetPlayAreaBounds(Origin:Int):unreal.VariantPtr;
public static function BreakKey(InKey:unreal.VariantPtr, InteractionProfile:unreal.VariantPtr, Hand:unreal.UIntPtr, MotionSource:unreal.VariantPtr, Indentifier:unreal.VariantPtr, Component:unreal.VariantPtr):Void;
public static function StaticClass():unreal.UIntPtr;
}