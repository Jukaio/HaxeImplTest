// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/common/unreal/fmath.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class FMath_Glue {
public static function FindDeltaAngle(angle1:cpp.Float32, angle2:cpp.Float32):cpp.Float32;
public static function VInterpTo(Current:unreal.VariantPtr, Target:unreal.VariantPtr, DeltaTime:cpp.Float32, InterpSpeed:cpp.Float32):unreal.VariantPtr;
public static function VInterpConstantTo(Current:unreal.VariantPtr, Target:unreal.VariantPtr, DeltaTime:cpp.Float32, InterpSpeed:cpp.Float32):unreal.VariantPtr;
public static function Vector2DInterpTo(Current:unreal.VariantPtr, Target:unreal.VariantPtr, DeltaTime:cpp.Float32, InterpSpeed:cpp.Float32):unreal.VariantPtr;
public static function RInterpTo(Current:unreal.VariantPtr, Target:unreal.VariantPtr, DeltaTime:cpp.Float32, InterpSpeed:cpp.Float32):unreal.VariantPtr;
public static function FInterpTo(Current:cpp.Float32, Target:cpp.Float32, DeltaTime:cpp.Float32, InterpSpeed:cpp.Float32):cpp.Float32;
public static function RandPointInBox(Box:unreal.VariantPtr):unreal.VariantPtr;
public static function RandRange(Min:cpp.Float32, Max:cpp.Float32):cpp.Float32;
public static function RandRangeInt(Min:Int, Max:Int):Int;
public static function RandBool():Bool;
public static function VRand():unreal.VariantPtr;
public static function VRandCone(Dir:unreal.VariantPtr, ConeHalfAngleRad:cpp.Float32):unreal.VariantPtr;
public static function VRandConeHorizVert(Dir:unreal.VariantPtr, HorizontalConeHalfAngleRad:cpp.Float32, VerticalConeHalfAngleRad:cpp.Float32):unreal.VariantPtr;
public static function Rand():Int;
public static function RandInit(Seed:Int):Void;
public static function FRand():cpp.Float32;
public static function SRandInit(Seed:Int):Void;
public static function GetRandSeed():Int;
public static function SRand():cpp.Float32;
public static function RadiansToDegrees(RadVal:cpp.Float32):cpp.Float32;
public static function DegreesToRadians(DegVal:cpp.Float32):cpp.Float32;
public static function ClampAngle(AngleDegrees:cpp.Float32, MinAngleDegrees:cpp.Float32, MaxAngleDegrees:cpp.Float32):cpp.Float32;
public static function FindDeltaAngleDegrees(A1:cpp.Float32, A2:cpp.Float32):cpp.Float32;
public static function FindDeltaAngleRadians(A1:cpp.Float32, A2:cpp.Float32):cpp.Float32;
public static function UnwindRadians(A:cpp.Float32):cpp.Float32;
public static function UnwindDegrees(A:cpp.Float32):cpp.Float32;
public static function WindRelativeAnglesDegrees(InAngle0:cpp.Float32, InOutAngle0:unreal.UIntPtr):Void;
public static function FixedTurn(InCurrent:cpp.Float32, InDesired:cpp.Float32, InDeltaRate:cpp.Float32):cpp.Float32;
public static function GetRangePct(MinValue:cpp.Float32, MaxValue:cpp.Float32, Value:cpp.Float32):cpp.Float32;
public static function Lerp(A:cpp.Float32, B:cpp.Float32, Alpha:cpp.Float32):cpp.Float32;
public static function LerpRotator(A:unreal.VariantPtr, B:unreal.VariantPtr, Alpha:cpp.Float32):unreal.VariantPtr;
public static function LerpQuat(A:unreal.VariantPtr, B:unreal.VariantPtr, Alpha:cpp.Float32):unreal.VariantPtr;
public static function InterpEaseIn(A:cpp.Float32, B:cpp.Float32, Alpha:cpp.Float32, Exp:cpp.Float32):cpp.Float32;
public static function InterpEaseOut(A:cpp.Float32, B:cpp.Float32, Alpha:cpp.Float32, Exp:cpp.Float32):cpp.Float32;
public static function InterpEaseInOut(A:cpp.Float32, B:cpp.Float32, Alpha:cpp.Float32, Exp:cpp.Float32):cpp.Float32;
public static function InterpStep(A:cpp.Float32, B:cpp.Float32, Alpha:cpp.Float32, Steps:Int):cpp.Float32;
public static function Fmod(X:cpp.Float32, Y:cpp.Float32):cpp.Float32;
public static function IsNearlyEqual(A:cpp.Float32, B:cpp.Float32, ErrorTolerance:cpp.Float32):Bool;
public static function GetReflectionVector(Direction:unreal.VariantPtr, SurfaceNormal:unreal.VariantPtr):unreal.VariantPtr;
public static function Clamp(X:cpp.Float32, Min:cpp.Float32, Max:cpp.Float32):cpp.Float32;
public static function Cos(Value:cpp.Float32):cpp.Float32;
public static function Acos(Value:cpp.Float32):cpp.Float32;
public static function Atan2(Y:cpp.Float32, X:cpp.Float32):cpp.Float32;
public static function RayPlaneIntersection(RayOrigin:unreal.VariantPtr, RayDirection:unreal.VariantPtr, Plane:unreal.VariantPtr):unreal.VariantPtr;
public static function LinePlaneIntersection(Point1:unreal.VariantPtr, Point2:unreal.VariantPtr, Plane:unreal.VariantPtr):unreal.VariantPtr;
public static function LineBoxIntersection(Box:unreal.VariantPtr, Start:unreal.VariantPtr, End:unreal.VariantPtr, Direction:unreal.VariantPtr):Bool;
}