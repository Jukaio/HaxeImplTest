/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.chaoscloth;

/**
  Holds initial, asset level config for clothing actors. // Hiding categories that will be used in the future
**/
@:umodule("ChaosCloth")
@:glueCppIncludes("ChaosCloth/ChaosClothConfig.h")
@:uextern @:uclass extern class UChaosClothConfig extends unreal.clothingsystemruntimecommon.UClothConfigCommon {
  #if WITH_EDITORONLY_DATA
  @:deprecated @:uproperty public var StrainLimitingStiffness_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var AnimDriveSpringStiffness_DEPRECATED : unreal.Float32;
  @:deprecated @:uproperty public var TetherMode_DEPRECATED : unreal.chaoscloth.EChaosClothTetherMode;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Enable continuous collision detection.
  **/
  @:uproperty public var bUseContinuousCollisionDetection : Bool;
  
  /**
    Enable thin shell volume constraints.
  **/
  @:uproperty public var bUseThinShellVolumeConstraints : Bool;
  
  /**
    Enable tetrahedral constraints.
  **/
  @:uproperty public var bUseTetrahedralConstraints : Bool;
  
  /**
    The portion of the angular velocity that is used to calculate the strength of all fictitious forces (e.g. centrifugal force).
    This parameter is only having an effect on the portion of the reference bone's angular velocity that has been removed from the
    simulation via the Angular Velocity Scale parameter. This means it has no effect when AngularVelocityScale is set to 1 in which
    case the cloth is simulated with full world space angular velocities and subjected to the true physical world inertial forces.
    Values range from 0 to 2, with 0 showing no centrifugal effect, 1 full centrifugal effect, and 2 an overdriven centrifugal effect.
  **/
  @:uproperty public var FictitiousAngularScale : unreal.Float32;
  
  /**
    The amount of angular velocities sent to the local cloth space from the reference bone
    (the closest bone to the root on which the cloth section has been skinned, or the root itself if the cloth isn't skinned).
  **/
  @:uproperty public var AngularVelocityScale : unreal.Float32;
  
  /**
    The amount of linear velocities sent to the local cloth space from the reference bone
    (the closest bone to the root on which the cloth section has been skinned, or the root itself if the cloth isn't skinned).
  **/
  @:uproperty public var LinearVelocityScale : unreal.FVector;
  
  /**
    The damping amount of the anim drive.
    If an enabled Weight Map (A.K.A. Mask) targeting the "Anim Drive Damping" is added to the cloth,
    then both the Low and High values will be used in conjunction with the per particle Weight stored
    in the Weight Map to interpolate the final value from them.
    Otherwise only the Low value is sufficient to work on this constraint.
  **/
  @:uproperty public var AnimDriveDamping : unreal.chaoscloth.FChaosClothWeightedValue;
  
  /**
    The strength of the constraint driving the cloth towards the animated goal mesh.
    If an enabled Weight Map (A.K.A. Mask) targeting the "Anim Drive Stiffness" is added to the cloth,
    then both the Low and High values will be used in conjunction with the per particle Weight stored
    in the Weight Map to interpolate the final value from them.
    Otherwise only the Low value is meaningful and sufficient to enable this constraint.
  **/
  @:uproperty public var AnimDriveStiffness : unreal.chaoscloth.FChaosClothWeightedValue;
  
  /**
    The gravitational acceleration vector [cm/s^2]
  **/
  @:uproperty public var Gravity : unreal.FVector;
  
  /**
    Scale factor applied to the world gravity and also to the clothing simulation interactor gravity. Does not affect the gravity if set using the override below.
  **/
  @:uproperty public var GravityScale : unreal.Float32;
  
  /**
    Use the config gravity value instead of world gravity.
  **/
  @:uproperty public var bUseGravityOverride : Bool;
  
  /**
    The aerodynamic coefficient of lift applying on each particle.
  **/
  @:uproperty public var LiftCoefficient : unreal.Float32;
  
  /**
    The aerodynamic coefficient of drag applying on each particle.
  **/
  @:uproperty public var DragCoefficient : unreal.Float32;
  
  /**
    This parameter is automatically set by the migration code. It can be overridden here to use the old deprecated "Legacy" wind model in order to preserve behavior with previous versions of the engine.
    The old wind model is not an accurate aerodynamic model and as such should be avoided. Being point based, it doesn't take into account the surface area that gets hit by the wind.
    Using this model makes the simulation slightly slower, disables the aerodynamically accurate wind model, and prevents the cloth to interact with the surrounding environment (air, water, ...etc.) even when there is no wind.
  **/
  @:uproperty public var bUsePointBasedWindModel : Bool;
  
  /**
    The amount of damping applied to the cloth velocities.
  **/
  @:uproperty public var DampingCoefficient : unreal.Float32;
  
  /**
    This parameter is automatically set by the migration code. It can be overridden here to use the old way of authoring the backstop distances.
    The legacy backstop requires the sphere radius to be included within the painted distance mask, making it difficult to author correctly. In this case the backstop distance is the distance from the animated mesh to the center of the corresponding backstop collision sphere.
    The non legacy backstop automatically adds the matching sphere's radius to the distance calculations at runtime to make for a simpler authoring of the backstop distances. In this case the backstop distance is the distance from the animated mesh to the surface of the backstop collision sphere.
    In both cases, a positive backstop distance goes against the corresponding animated mesh's normal, and a negative backstop distance goes along the corresponding animated mesh's normal.
  **/
  @:uproperty public var bUseLegacyBackstop : Bool;
  
  /**
    The radius of the spheres used in self collision.
  **/
  @:uproperty public var SelfCollisionThickness : unreal.Float32;
  
  /**
    Enable self collision.
  **/
  @:uproperty public var bUseSelfCollisions : Bool;
  
  /**
    Use continuous collision detection (CCD) to prevent any missed collisions between fast moving particles and colliders.
    This has a negative effect on performance compared to when resolving collision without using CCD.
  **/
  @:uproperty public var bUseCCD : Bool;
  
  /**
    Friction coefficient for cloth - collider interaction.
  **/
  @:uproperty public var FrictionCoefficient : unreal.Float32;
  
  /**
    The added thickness of collision shapes.
  **/
  @:uproperty public var CollisionThickness : unreal.Float32;
  
  /**
    The stiffness of the shape target constraints.
  **/
  @:uproperty public var ShapeTargetStiffness : unreal.Float32;
  
  /**
    Use geodesic instead of euclidean distance calculations for the Long Range Attachment constraint,
    which is slower at setup but more accurate at establishing the correct position and length of the tethers,
    and therefore is less prone to artifacts during the simulation.
  **/
  @:uproperty public var bUseGeodesicDistance : Bool;
  
  /**
    The limit scale of the long range attachment constraints (aka tether limit).
  **/
  @:uproperty public var LimitScale : unreal.Float32;
  
  /**
    The tethers' stiffness of the long range attachment constraints.
    The long range attachment connects each of the cloth particles to its closest fixed point with a spring constraint.
    This can be used to compensate for a lack of stretch resistance when the iterations count is kept low for performance reasons.
    Can lead to an unnatural pull string puppet like behavior.
    If an enabled Weight Map (A.K.A. Mask) targeting the "Tether Stiffness" is added to the cloth,
    then both the Low and High values will be used in conjunction with the per particle Weight stored
    in the Weight Map to interpolate the final value from them.
    Otherwise only the Low value is meaningful and sufficient to enable this constraint.
    Use 0, 0 to disable.
  **/
  @:uproperty public var TetherStiffness : unreal.chaoscloth.FChaosClothWeightedValue;
  
  /**
    The stiffness of the volume preservation constraints.
  **/
  @:uproperty public var VolumeStiffness : unreal.Float32;
  
  /**
    The stiffness of the area preservation constraints. Increase the iteration count for stiffer materials.
  **/
  @:uproperty public var AreaStiffness : unreal.Float32;
  
  /**
    Enable the more accurate bending element constraints instead of the faster cross-edge spring constraints used for controlling bending stiffness.
  **/
  @:uproperty public var bUseBendingElements : Bool;
  
  /**
    The Stiffness of the bending constraints. Increase the iteration count for stiffer materials. Increase the iteration count for stiffer materials.
  **/
  @:uproperty public var BendingStiffness : unreal.Float32;
  
  /**
    The Stiffness of the Edge constraints, only use lower than 1 values for very stretchy materials. Increase the iteration count for stiffer materials.
  **/
  @:uproperty public var EdgeStiffness : unreal.Float32;
  
  /**
    This is a lower bound to cloth particle masses.
  **/
  @:uproperty public var MinPerParticleMass : unreal.Float32;
  
  /**
    The value used when Mass Mode is set to Density.
    Melton Wool: 0.7
    Heavy leather: 0.6
    Polyurethane: 0.5
    Denim: 0.4
    Light leather: 0.3
    Cotton: 0.2
    Silk: 0.1
  **/
  @:uproperty public var Density : unreal.Float32;
  
  /**
    The value used when Mass Mode is set to TotalMass.
  **/
  @:uproperty public var TotalMass : unreal.Float32;
  
  /**
    The value used when the Mass Mode is set to Uniform Mass.
  **/
  @:uproperty public var UniformMass : unreal.Float32;
  
  /**
    How cloth particle mass is determined
    -    Uniform Mass: Every particle's mass will be set to the value specified in the UniformMass setting. Mostly to avoid as it can cause some serious issues with irregular tessellations.
    -    Total Mass: The total mass is distributed equally over all the particles. Useful when referencing a specific garment size and feel.
    -    Density: A constant mass density is used. Density is usually the preferred way of setting mass since it allows matching real life materials' density values.
  **/
  @:uproperty public var MassMode : unreal.clothingsystemruntimecommon.EClothMassMode;
  
}
