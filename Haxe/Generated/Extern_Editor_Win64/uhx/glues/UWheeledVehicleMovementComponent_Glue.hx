// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/physxvehicles/uwheeledvehiclemovementcomponent.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class UWheeledVehicleMovementComponent_Glue {
public static function get_SteeringInputRate(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_SteeringInputRate(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_HandbrakeInputRate(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_HandbrakeInputRate(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_BrakeInputRate(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_BrakeInputRate(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_ThrottleInputRate(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_ThrottleInputRate(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_WrongDirectionThreshold(self:unreal.UIntPtr):cpp.Float32;
public static function set_WrongDirectionThreshold(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_StopThreshold(self:unreal.UIntPtr):cpp.Float32;
public static function set_StopThreshold(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_IdleBrakeInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_IdleBrakeInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_HandbrakeInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_HandbrakeInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_BrakeInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_BrakeInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_ThrottleInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_ThrottleInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_SteeringInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_SteeringInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RawBrakeInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_RawBrakeInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RawThrottleInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_RawThrottleInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RawSteeringInput(self:unreal.UIntPtr):cpp.Float32;
public static function set_RawSteeringInput(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_ReplicatedState(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_ReplicatedState(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_PendingLaunchVelocity(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_PendingLaunchVelocity(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_AvoidanceWeight(self:unreal.UIntPtr):cpp.Float32;
public static function set_AvoidanceWeight(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_GroupsToIgnore(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_GroupsToIgnore(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_GroupsToAvoid(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_GroupsToAvoid(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_AvoidanceGroup(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_AvoidanceGroup(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_AvoidanceUID(self:unreal.UIntPtr):Int;
public static function set_AvoidanceUID(self:unreal.UIntPtr, value:Int):Void;
public static function get_RVOThrottleStep(self:unreal.UIntPtr):cpp.Float32;
public static function set_RVOThrottleStep(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RVOSteeringStep(self:unreal.UIntPtr):cpp.Float32;
public static function set_RVOSteeringStep(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_AvoidanceConsiderationRadius(self:unreal.UIntPtr):cpp.Float32;
public static function set_AvoidanceConsiderationRadius(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RVOAvoidanceHeight(self:unreal.UIntPtr):cpp.Float32;
public static function set_RVOAvoidanceHeight(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_RVOAvoidanceRadius(self:unreal.UIntPtr):cpp.Float32;
public static function set_RVOAvoidanceRadius(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_Wheels(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_Wheels(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_HighForwardSpeedSubStepCount(self:unreal.UIntPtr):Int;
public static function set_HighForwardSpeedSubStepCount(self:unreal.UIntPtr, value:Int):Void;
public static function get_LowForwardSpeedSubStepCount(self:unreal.UIntPtr):Int;
public static function set_LowForwardSpeedSubStepCount(self:unreal.UIntPtr, value:Int):Void;
public static function get_ThresholdLongitudinalSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function set_ThresholdLongitudinalSpeed(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MaxNormalizedTireLoadFiltered(self:unreal.UIntPtr):cpp.Float32;
public static function set_MaxNormalizedTireLoadFiltered(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MaxNormalizedTireLoad(self:unreal.UIntPtr):cpp.Float32;
public static function set_MaxNormalizedTireLoad(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MinNormalizedTireLoadFiltered(self:unreal.UIntPtr):cpp.Float32;
public static function set_MinNormalizedTireLoadFiltered(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MinNormalizedTireLoad(self:unreal.UIntPtr):cpp.Float32;
public static function set_MinNormalizedTireLoad(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_InertiaTensorScale(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_InertiaTensorScale(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_DebugDragMagnitude(self:unreal.UIntPtr):cpp.Float32;
public static function set_DebugDragMagnitude(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MaxEngineRPM(self:unreal.UIntPtr):cpp.Float32;
public static function set_MaxEngineRPM(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_EstimatedMaxEngineSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function set_EstimatedMaxEngineSpeed(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_DragArea(self:unreal.UIntPtr):cpp.Float32;
public static function set_DragArea(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_ChassisHeight(self:unreal.UIntPtr):cpp.Float32;
public static function set_ChassisHeight(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_ChassisWidth(self:unreal.UIntPtr):cpp.Float32;
public static function set_ChassisWidth(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_DragCoefficient(self:unreal.UIntPtr):cpp.Float32;
public static function set_DragCoefficient(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_WheelSetups(self:unreal.UIntPtr):unreal.VariantPtr;
public static function set_WheelSetups(self:unreal.UIntPtr, value:unreal.VariantPtr):Void;
public static function get_Mass(self:unreal.UIntPtr):cpp.Float32;
public static function set_Mass(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_bUseRVOAvoidance(self:unreal.UIntPtr):Bool;
public static function set_bUseRVOAvoidance(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bReverseAsBrake(self:unreal.UIntPtr):Bool;
public static function set_bReverseAsBrake(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bDeprecatedSpringOffsetMode(self:unreal.UIntPtr):Bool;
public static function set_bDeprecatedSpringOffsetMode(self:unreal.UIntPtr, value:Bool):Void;
public static function SetThrottleInput(self:unreal.UIntPtr, Throttle:cpp.Float32):Void;
public static function SetBrakeInput(self:unreal.UIntPtr, Brake:cpp.Float32):Void;
public static function SetSteeringInput(self:unreal.UIntPtr, Steering:cpp.Float32):Void;
public static function SetHandbrakeInput(self:unreal.UIntPtr, bNewHandbrake:Bool):Void;
public static function SetGearUp(self:unreal.UIntPtr, bNewGearUp:Bool):Void;
public static function SetGearDown(self:unreal.UIntPtr, bNewGearDown:Bool):Void;
public static function SetTargetGear(self:unreal.UIntPtr, GearNum:Int, bImmediate:Bool):Void;
public static function SetUseAutoGears(self:unreal.UIntPtr, bUseAuto:Bool):Void;
public static function GetForwardSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function GetEngineRotationSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function GetEngineMaxRotationSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function GetCurrentGear(self:unreal.UIntPtr):Int;
public static function GetTargetGear(self:unreal.UIntPtr):Int;
public static function GetUseAutoGears(self:unreal.UIntPtr):Bool;
public static function SetAvoidanceGroup(self:unreal.UIntPtr, GroupFlags:Int):Void;
public static function SetAvoidanceGroupMask(self:unreal.UIntPtr, GroupMask:unreal.VariantPtr):Void;
public static function SetGroupsToAvoid(self:unreal.UIntPtr, GroupFlags:Int):Void;
public static function SetGroupsToAvoidMask(self:unreal.UIntPtr, GroupMask:unreal.VariantPtr):Void;
public static function SetGroupsToIgnore(self:unreal.UIntPtr, GroupFlags:Int):Void;
public static function SetGroupsToIgnoreMask(self:unreal.UIntPtr, GroupMask:unreal.VariantPtr):Void;
public static function SetAvoidanceEnabled(self:unreal.UIntPtr, bEnable:Bool):Void;
public static function ServerUpdateState(self:unreal.UIntPtr, InSteeringInput:cpp.Float32, InThrottleInput:cpp.Float32, InBrakeInput:cpp.Float32, InHandbrakeInput:cpp.Float32, CurrentGear:Int):Void;
public static function StaticClass():unreal.UIntPtr;
}