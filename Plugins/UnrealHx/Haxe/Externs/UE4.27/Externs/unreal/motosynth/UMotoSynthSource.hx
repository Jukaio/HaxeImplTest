/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.motosynth;

/**
  UMotoSynthSource
  UAsset used to represent Imported MotoSynth Sources
**/
@:umodule("MotoSynth")
@:glueCppIncludes("MotoSynthSourceAsset.h")
@:uextern @:uclass extern class UMotoSynthSource extends unreal.UObject {
  
  /**
    Grain table containing information about how to granulate the source data buffer.
  **/
  @:uproperty private var GrainTable : unreal.TArray<unreal.motosynth.FGrainTableEntry>;
  
  /**
    Sample rate of the imported sound wave and the serialized data of the granulator
  **/
  @:uproperty private var SourceSampleRate : unreal.Int32;
  @:uproperty private var SourceDataPCM : unreal.TArray<unreal.Int16>;
  
  /**
    Data containing PCM audio of the imported source asset (filled out by the factory)
  **/
  @:deprecated @:uproperty private var SourceData_DEPRECATED : unreal.TArray<unreal.Float32>;
  #if WITH_EDITORONLY_DATA
  
  /**
    The path to write the audio analysis data (LPF and normalized asset)
  **/
  @:uproperty public var AnalysisInputFilePath : unreal.FString;
  
  /**
    Whether not to write the audio used for analysis to a wav file
  **/
  @:uproperty public var bWriteAnalysisInputToFile : Bool;
  @:uproperty public var RPMEstimationOctaveOffset : unreal.Int32;
  
  /**
    The end of the first cycle sample. Cut the source file to start exactly on the cycle start
  **/
  @:uproperty public var RPMFirstCycleSampleEnd : unreal.Int32;
  
  /**
    A samples to use to calibrate when an engine cycle begins
  **/
  @:uproperty public var RPMCycleCalibrationSample : unreal.Int32;
  @:uproperty public var SampleShiftOffset : unreal.Int32;
  @:uproperty public var bEnableNormalizationForAnalysis : Bool;
  @:uproperty public var DynamicsProcessorReleaseTimeMsec : unreal.Float32;
  @:uproperty public var DynamicsProcessorAttackTimeMsec : unreal.Float32;
  @:uproperty public var DynamicsProcessorThreshold : unreal.Float32;
  @:uproperty public var DynamicsKneeBandwidth : unreal.Float32;
  @:uproperty public var DynamicsProcessorRatio : unreal.Float32;
  @:uproperty public var DynamicsProcessorInputGainDb : unreal.Float32;
  @:uproperty public var DynamicsProcessorLookahead : unreal.Float32;
  
  /**
    Whether not to enable a dynamics processor to the analysis step
  **/
  @:uproperty public var bEnableDynamicsProcessorForAnalysis : Bool;
  
  /**
    Whether not to enable a low pass filter frequency before analyzing the audio file
  **/
  @:uproperty public var HighPassFilterFrequency : unreal.Float32;
  
  /**
    Frequency of a low pass filter to apply before running grain table analysis
  **/
  @:uproperty public var LowPassFilterFrequency : unreal.Float32;
  
  /**
    Whether not to enable a low pass filter frequency before analyzing the audio file
  **/
  @:uproperty public var bEnableFilteringForAnalysis : Bool;
  
  /**
    Sets the volume of the RPM curve synth for testing RPM curve to source
  **/
  @:uproperty public var RPMSynthVolume : unreal.Float32;
  #end // WITH_EDITORONLY_DATA
  
  /**
    A curve to define the RPM contour from the min and max estimated RPM
    Curve values are non-normalized and accurate to time
  **/
  @:uproperty public var RPMCurve : unreal.FRuntimeFloatCurve;
  
  /**
    Amount to scale down the sample rate of the source
  **/
  @:uproperty public var DownSampleFactor : unreal.Float32;
  
  /**
    Whether or not to convert this moto synth source to 8 bit on load to use less memory
  **/
  @:uproperty public var bConvertTo8Bit : Bool;
  #if WITH_EDITORONLY_DATA
  
  /**
    The source to use for the moto synth source
  **/
  @:uproperty public var SoundWaveSource : unreal.USoundWave;
  #end // WITH_EDITORONLY_DATA
  #if WITH_EDITOR
  @:ufunction @:final public function PerformGrainTableAnalysis() : Void;
  @:ufunction @:final public function PlayToneMatch() : Void;
  @:ufunction @:final public function StopToneMatch() : Void;
  #end // WITH_EDITOR
  
}
