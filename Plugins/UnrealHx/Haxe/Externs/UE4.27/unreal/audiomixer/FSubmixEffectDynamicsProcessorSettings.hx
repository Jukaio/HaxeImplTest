/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

/**
  Submix dynamics processor settings
**/
@:umodule("AudioMixer")
@:glueCppIncludes("Classes/SubmixEffects/AudioMixerSubmixEffectDynamicsProcessor.h")
@:uextern @:ustruct extern class FSubmixEffectDynamicsProcessorSettings {
  
  /**
    Low Shelf filter settings for key signal (external signal if supplied or input signal if not)
  **/
  @:uproperty public var KeyLowshelf : unreal.audiomixer.FSubmixEffectDynamicProcessorFilterSettings;
  
  /**
    High Shelf filter settings for key signal (external signal if supplied or input signal if not)
  **/
  @:uproperty public var KeyHighshelf : unreal.audiomixer.FSubmixEffectDynamicProcessorFilterSettings;
  
  /**
    The output gain of the dynamics processor
  **/
  @:uproperty public var OutputGainDb : unreal.Float32;
  
  /**
    Gain to apply to key signal if key source not set to default (input).
  **/
  @:uproperty public var KeyGainDb : unreal.Float32;
  
  /**
    Audition the key modulation signal, bypassing enveloping and processing the input signal.
  **/
  @:uproperty public var bKeyAudition : Bool;
  
  /**
    Whether or not to bypass effect
  **/
  @:uproperty public var bBypass : Bool;
  
  /**
    Toggles treating the attack and release envelopes as analog-style vs digital-style (Analog will respond a bit more naturally/slower)
  **/
  @:uproperty public var bAnalogMode : Bool;
  @:deprecated @:uproperty public var bChannelLinked_DEPRECATED : Bool;
  
  /**
    If set, uses output of provided submix as modulator of input signal for dynamics processor (Uses input signal as default modulator)
  **/
  @:uproperty public var ExternalSubmix : unreal.USoundSubmix;
  
  /**
    If set, uses output of provided audio bus as modulator of input signal for dynamics processor (Uses input signal as default modulator)
  **/
  @:uproperty public var ExternalAudioBus : unreal.UAudioBus;
  @:uproperty public var KeySource : unreal.audiomixer.ESubmixEffectDynamicsKeySource;
  
  /**
    The amount of time to release the dynamics processing effect
  **/
  @:uproperty public var ReleaseTimeMsec : unreal.Float32;
  
  /**
    The amount of time to ramp into any dynamics processing effect
  **/
  @:uproperty public var AttackTimeMsec : unreal.Float32;
  
  /**
    The amount of time to look ahead of the current audio (Allows for transients to be included in dynamics processing)
  **/
  @:uproperty public var LookAheadMsec : unreal.Float32;
  
  /**
    The knee bandwidth of the processor to use
  **/
  @:uproperty public var KneeBandwidthDb : unreal.Float32;
  
  /**
    The dynamics processor ratio used for compression/expansion
  **/
  @:uproperty public var Ratio : unreal.Float32;
  
  /**
    The threshold at which to perform a dynamics processing operation
  **/
  @:uproperty public var ThresholdDb : unreal.Float32;
  
  /**
    The input gain of the dynamics processor
  **/
  @:uproperty public var InputGainDb : unreal.Float32;
  
  /**
    Mode of peak detection if key signal is multi-channel
  **/
  @:uproperty public var LinkMode : unreal.audiomixer.ESubmixEffectDynamicsChannelLinkMode;
  
  /**
    Mode of peak detection used on input key signal
  **/
  @:uproperty public var PeakMode : unreal.audiomixer.ESubmixEffectDynamicsPeakMode;
  
  /**
    Type of processor to apply
  **/
  @:uproperty public var DynamicsProcessorType : unreal.audiomixer.ESubmixEffectDynamicsProcessorType;
  
}
