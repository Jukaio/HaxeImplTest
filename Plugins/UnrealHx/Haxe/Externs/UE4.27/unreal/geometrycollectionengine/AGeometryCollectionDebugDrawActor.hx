/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  AGeometryCollectionDebugDrawActor
    An actor representing the collection of data necessary to visualize the
    geometry collections' debug informations.
    Only one actor is to be used in the world, and should be automatically
    spawned by any GeometryDebugDrawComponent that needs it.
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/GeometryCollectionDebugDrawActor.h")
@:uextern @:uclass extern class AGeometryCollectionDebugDrawActor extends unreal.AActor {
  
  /**
    Display icon in the editor.
  **/
  @:uproperty public var SpriteComponent : unreal.UBillboardComponent;
  
  /**
    Color used for the visualization of the vertex normals.
  **/
  @:uproperty public var VertexNormalColor : unreal.FColor;
  
  /**
    Color used for the visualization of the vertex indices.
  **/
  @:uproperty public var VertexIndexColor : unreal.FColor;
  
  /**
    Color used for the visualization of the vertices.
  **/
  @:uproperty public var VertexColor : unreal.FColor;
  
  /**
    Color used for the visualization of the single face.
  **/
  @:uproperty public var SingleFaceColor : unreal.FColor;
  
  /**
    Color used for the visualization of the face normals.
  **/
  @:uproperty public var FaceNormalColor : unreal.FColor;
  
  /**
    Color used for the visualization of the face indices.
  **/
  @:uproperty public var FaceIndexColor : unreal.FColor;
  
  /**
    Color used for the visualization of the faces.
  **/
  @:uproperty public var FaceColor : unreal.FColor;
  
  /**
    Color used for the visualization of the bounding boxes.
  **/
  @:uproperty public var BoundingBoxColor : unreal.FColor;
  
  /**
    Scale for geometry transform visualization.
  **/
  @:uproperty public var GeometryTransformScale : unreal.Float32;
  
  /**
    Color used for the visualization of the geometry indices.
  **/
  @:uproperty public var GeometryIndexColor : unreal.FColor;
  
  /**
    Line thickness used for the visualization of the rigid clustering connectivity edges.
  **/
  @:uproperty public var ConnectivityEdgeThickness : unreal.Float32;
  
  /**
    Color used for the visualization of the link from the parents.
  **/
  @:uproperty public var ParentColor : unreal.FColor;
  
  /**
    Color used for the visualization of the levels.
  **/
  @:uproperty public var LevelColor : unreal.FColor;
  
  /**
    Scale for cluster transform visualization.
  **/
  @:uproperty public var TransformScale : unreal.Float32;
  
  /**
    Color used for the visualization of the transform indices.
  **/
  @:uproperty public var TransformIndexColor : unreal.FColor;
  
  /**
    Color used for the visualization of the rigid body infos.
  **/
  @:uproperty public var RigidBodyInfoColor : unreal.FColor;
  
  /**
    Color used for rigid body applied force and torque visualization.
  **/
  @:uproperty public var RigidBodyForceColor : unreal.FColor;
  
  /**
    Color used for rigid body velocities visualization.
  **/
  @:uproperty public var RigidBodyVelocityColor : unreal.FColor;
  
  /**
    Color used for the visualization of the rigid body inertia tensor box.
  **/
  @:uproperty public var RigidBodyInertiaColor : unreal.FColor;
  
  /**
    Color used for collision primitives visualization.
  **/
  @:uproperty public var RigidBodyCollisionColor : unreal.FColor;
  
  /**
    Scale for rigid body transform visualization.
  **/
  @:uproperty public var RigidBodyTransformScale : unreal.Float32;
  
  /**
    Color used for the visualization of the rigid body ids.
  **/
  @:uproperty public var RigidBodyIdColor : unreal.FColor;
  
  /**
    Size of arrows used for visualizing normals, breaking information, ...etc.
  **/
  @:uproperty public var ArrowScale : unreal.Float32;
  
  /**
    Scale of the axis used for visualizing all transforms.
  **/
  @:uproperty public var AxisScale : unreal.Float32;
  
  /**
    Scale factor used for visualizing normals.
  **/
  @:uproperty public var NormalScale : unreal.Float32;
  
  /**
    Scale of the font used to display text.
  **/
  @:uproperty public var TextScale : unreal.Float32;
  
  /**
    Draw shadows under the displayed text.
  **/
  @:uproperty public var bTextShadow : Bool;
  
  /**
    Thickness of lines when visualizing faces, normals, ...etc.
  **/
  @:uproperty public var LineThickness : unreal.Float32;
  
  /**
    Thickness of points when visualizing vertices.
  **/
  @:uproperty public var PointThickness : unreal.Float32;
  
  /**
    Adapt visualization depending of the cluster nodes' hierarchical level.
  **/
  @:uproperty public var bUseActiveVisualization : Bool;
  
  /**
    Show the vertex normals for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowVertexNormals : Bool;
  
  /**
    Show the vertex indices for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowVertexIndices : Bool;
  
  /**
    Show the vertices for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowVertices : Bool;
  
  /**
    The index of the single face to visualize.
  **/
  @:uproperty public var SingleFaceIndex : unreal.Int32;
  
  /**
    Enable single face visualization for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowSingleFace : Bool;
  
  /**
    Show the face normals for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowFaceNormals : Bool;
  
  /**
    Show the face indices for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowFaceIndices : Bool;
  
  /**
    Show the faces for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowFaces : Bool;
  
  /**
    Show the bounding box for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowBoundingBox : Bool;
  
  /**
    Show the geometry transform for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowGeometryTransform : Bool;
  
  /**
    Show the geometry index for the selected rigid body's associated geometries.
  **/
  @:uproperty public var bShowGeometryIndex : Bool;
  
  /**
    Show the connectivity edges for the selected rigid body's associated cluster nodes.
  **/
  @:uproperty public var bShowConnectivityEdges : Bool;
  
  /**
    Show the hierarchical level for the selected rigid body's associated cluster nodes.
  **/
  @:uproperty public var bShowLevel : Bool;
  
  /**
    Show a link from the selected rigid body's associated cluster nodes to their parent's nodes.
  **/
  @:uproperty public var bShowParent : Bool;
  
  /**
    Show the transform for the selected rigid body's associated cluster nodes.
  **/
  @:uproperty public var bShowTransform : Bool;
  
  /**
    Show the transform index for the selected rigid body's associated cluster nodes.
  **/
  @:uproperty public var bShowTransformIndex : Bool;
  
  /**
    Show the selected rigid body's on screen text information.
  **/
  @:uproperty public var bShowRigidBodyInfos : Bool;
  
  /**
    Show the selected rigid body's applied force and torque.
  **/
  @:uproperty public var bShowRigidBodyForce : Bool;
  
  /**
    Show the selected rigid body's linear and angular velocity.
  **/
  @:uproperty public var bShowRigidBodyVelocity : Bool;
  
  /**
    Show the selected rigid body's inertia tensor box.
  **/
  @:uproperty public var bShowRigidBodyInertia : Bool;
  
  /**
    Show the selected rigid body's transform.
  **/
  @:uproperty public var bShowRigidBodyTransform : Bool;
  
  /**
    Show the selected rigid body's collision volume at the origin, in local space.
  **/
  @:uproperty public var bCollisionAtOrigin : Bool;
  
  /**
    Show the selected rigid body's collision volume.
  **/
  @:uproperty public var bShowRigidBodyCollision : Bool;
  
  /**
    Display the selected rigid body's id.
  **/
  @:uproperty public var bShowRigidBodyId : Bool;
  
  /**
    Geometry visibility setting. Select the part of the geometry to hide in order to better visualize the debug information.
  **/
  @:uproperty public var HideGeometry : unreal.geometrycollectionengine.EGeometryCollectionDebugDrawActorHideGeometry;
  
  /**
    Show debug visualization for all clustered children associated to the current rigid body id selection.
  **/
  @:uproperty public var bDebugDrawClustering : Bool;
  
  /**
    Show debug visualization for the top level node rather than the bottom leaf nodes of a cluster's hierarchy. * Only affects Clustering and Geometry visualization.
  **/
  @:uproperty public var bDebugDrawHierarchy : Bool;
  
  /**
    Show debug visualization for the rest of the geometry collection related to the current rigid body id selection.
  **/
  @:uproperty public var bDebugDrawWholeCollection : Bool;
  
  /**
    Picking tool used to select a rigid body id.
  **/
  @:uproperty public var SelectedRigidBody : unreal.geometrycollectionengine.FGeometryCollectionDebugDrawActorSelectedRigidBody;
  
  /**
    Warning message to explain that the debug draw properties have no effect until starting playing/simulating.
  **/
  @:uproperty public var WarningMessage : unreal.geometrycollectionengine.FGeometryCollectionDebugDrawWarningMessage;
  
}
