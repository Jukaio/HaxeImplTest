/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  [Chaos Only]
**/
@:glueCppIncludes("Classes/PhysicsEngine/PhysicsAsset.h")
@:uextern @:ustruct extern class FSolverIterations {
  
  /**
    [Chaos Only]
    The recommended number of joint sub-push-out iterations. Increasing this can help with collision penetration problems.
  **/
  @:uproperty public var CollisionPushOutIterations : unreal.Int32;
  
  /**
    [Chaos Only]
    The recommended number of joint sub-push-out iterations.
  **/
  @:uproperty public var JointPushOutIterations : unreal.Int32;
  
  /**
    Increase this if bodies remain penetrating
  **/
  @:uproperty public var SolverPushOutIterations : unreal.Int32;
  
  /**
    [Chaos Only]
    The recommended number of collision sub-iterations. Increasing this can help with collision jitter.
  **/
  @:uproperty public var CollisionIterations : unreal.Int32;
  
  /**
    [Chaos Only]
    The recommended number of joint sub-iterations. Increasing this can help with chains of long-thin bodies.
  **/
  @:uproperty public var JointIterations : unreal.Int32;
  
  /**
    [Chaos Only]
    The recommended number of solver iterations. Increase this if collision and joints are fighting, or joint chains are stretching.
  **/
  @:uproperty public var SolverIterations : unreal.Int32;
  
  /**
    [Chaos Only]
    The recommended fixed timestep for the solver if supported (e.g., in RigidBody Anim Node). 0 to run with variable timestep.
    NOTE: If this value is non-zero and less than the current frame time, physics will step multiple times.
  **/
  @:uproperty public var FixedTimeStep : unreal.Float32;
  
}
