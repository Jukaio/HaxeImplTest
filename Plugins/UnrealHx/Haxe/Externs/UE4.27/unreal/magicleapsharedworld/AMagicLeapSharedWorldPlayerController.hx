/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.magicleapsharedworld;

@:umodule("MagicLeapSharedWorld")
@:glueCppIncludes("MagicLeapSharedWorldPlayerController.h")
@:uextern @:uclass extern class AMagicLeapSharedWorldPlayerController extends unreal.APlayerController {
  
  /**
    Updates list of pins local to a client on the server.
    
    This makes the list of local pins available to AMagicLeapSharedWorldGameMode to determine
    which ones to share across all clients and use for global coordinate space alignment.
  **/
  @:ufunction(Server, BlueprintCallable) public function ServerSetLocalWorldData(LocalWorldReplicationData : unreal.Const<unreal.PRef<unreal.magicleapsharedworld.FMagicLeapSharedWorldLocalData>>) : Void;
  
  /**
    Marks the client ready to start sending local data to the server.
    Currently this function or the ::CanSendLocalDataToServer() function is not that relevant to the implementation.
    The data will reach the server even if ::ServerSetLocalWorldData() is called before this function.
  **/
  @:ufunction(Client) public function ClientMarkReadyForSendingLocalData() : Void;
  
  /**
    Marks the client as the "chosen-one" or pseudo-authoritative for this shared world session.
    
    Means that this client is responsible for sending the list of it's pin transforms (in world space so its own alignment is unaffected)
    to the server via ServerSetAlignmentTransforms(). Everyone will align to this client's coordinate space
    using those pin transforms. The game mode or the player controller doesnt directly use this property. It is just a helper
    data point to determine which client should send the alignment transforms. Apps can choose to implement their own ways
    to select which client should should everyone align with.
    @see ServerSetAlignmentTransforms
  **/
  @:ufunction(Client, BlueprintCallable) public function ClientSetChosenOne(bChosenOne : Bool) : Void;
  
  /**
    Getter to check if the current client is the chosen one
    @return true if this client is the chosen one, false otherwise
    @see ClientSetChosenOne()
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function IsChosenOne() : Bool;
  
  /**
    Getter to check if the current client can start sending local pins to the server
    @return true if it is now safe to send local data to server, false otherwise
    @see ServerSetLocalWorldData()
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function CanSendLocalDataToServer() : Bool;
  
  /**
    Sets list of transforms to be used by all clients to align coordinate spaces.
    
    This list is redirected to AMagicLeapSharedWorldGameState which performs the replication.
    Bind an event to AMagicLeapSharedWorldGameState::OnAlignmentTransformsUpdated to get a
    notification when new alignment transforms are available.
    If performing shared world alignment on-the-fly (i.e. without any prior setup like in a museum app),
    these transforms should be sent by a single selected client. Apps can make use of the "chosen one"
    client for this purpose. Override AMagicLeapSharedWorldGameMode::SelectChosenOne() to select which
    of the connected clients should send the alignment transforms. By default the first connected client
    is considered the "chosen one".
    
    @see AMagicLeapSharedWorldGameMode::SelectChosenOne()
    @see AMagicLeapSharedWorldGameState::OnAlignmentTransformsUpdated
    @see AMagicLeapSharedWorldGameState::CalculateXRCameraRootTransform()
  **/
  @:ufunction(Server, BlueprintCallable) public function ServerSetAlignmentTransforms(InAlignmentTransforms : unreal.Const<unreal.PRef<unreal.magicleapsharedworld.FMagicLeapSharedWorldAlignmentTransforms>>) : Void;
  
}
