/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.audiomixer;

@:umodule("AudioMixer")
@:glueCppIncludes("Quartz/AudioMixerClockHandle.h")
@:uextern @:uclass extern class UQuartzClockHandle extends unreal.UObject {
  @:ufunction(BlueprintCallable) @:final public function ResetTransport(WorldContextObject : unreal.Const<unreal.UObject>, InDelegate : unreal.Const<unreal.PRef<unreal.FOnQuartzCommandEventBP>>) : Void;
  @:ufunction(BlueprintCallable) @:final public function IsClockRunning(WorldContextObject : unreal.Const<unreal.UObject>) : Bool;
  
  /**
    Returns the duration in seconds of the given Quantization Type
    
    @param The Quantization type to measure
    @param The quantity of the Quantization Type to calculate the time of
    @return The duration, in seconds, of a multiplier amount of the Quantization Type, or -1 in the case the clock is invalid
  **/
  @:ufunction(BlueprintCallable) @:final public function GetDurationOfQuantizationTypeInSeconds(WorldContextObject : unreal.Const<unreal.UObject>, QuantizationType : unreal.Const<unreal.Ref<unreal.EQuartzCommandQuantization>>, Multiplier : unreal.Float32 = 1.000000) : unreal.Float32;
  
  /**
    Retrieves a timestamp for the clock
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurrentTimestamp(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.FQuartzTransportTimeStamp;
  
  /**
    Returns the amount of time, in seconds, the clock has been running. Caution: due to latency, this will not be perfectly accurate
  **/
  @:ufunction(BlueprintCallable) @:final public function GetEstimatedRunTime(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  
  /**
    "other" clock manipulation
  **/
  @:ufunction(BlueprintCallable) @:final public function StartOtherClock(WorldContextObject : unreal.Const<unreal.UObject>, OtherClockName : unreal.FName, InQuantizationBoundary : unreal.FQuartzQuantizationBoundary, InDelegate : unreal.Const<unreal.PRef<unreal.FOnQuartzCommandEventBP>>) : Void;
  
  /**
    Metronome getters
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMillisecondsPerTick(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetTicksPerSecond(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSecondsPerTick(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetThirtySecondNotesPerMinute(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetBeatsPerMinute(WorldContextObject : unreal.Const<unreal.UObject>) : unreal.Float32;
  
}
