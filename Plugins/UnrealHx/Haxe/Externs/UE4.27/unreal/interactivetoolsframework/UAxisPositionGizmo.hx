/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.interactivetoolsframework;

/**
  UAxisPositionGizmo implements a gizmo interaction where 1D parameter value is manipulated
  by dragging a point on a 3D line/axis in space. The 3D point is converted to the axis parameter at
  the nearest point, giving us the 1D parameter value.
  
  As with other base gizmos, this class only implements the interaction. The visual aspect of the
  gizmo, the axis, and the parameter storage are all provided externally.
  
  The axis direction+origin is provided by an IGizmoAxisSource.
  
  The interaction target (ie the thing you have to click on to start the dragging interaction) is provided by an IGizmoClickTarget.
  
  The new 1D parameter value is sent to an IGizmoFloatParameterSource
  
  Internally a UClickDragInputBehavior is used to handle mouse input, configured in ::Setup()
**/
@:umodule("InteractiveToolsFramework")
@:glueCppIncludes("BaseGizmos/AxisPositionGizmo.h")
@:uextern @:uclass extern class UAxisPositionGizmo extends unreal.interactivetoolsframework.UInteractiveGizmo {
  @:uproperty public var ParameterSign : unreal.Float32;
  @:uproperty public var InteractionCurParameter : unreal.Float32;
  @:uproperty public var InteractionStartParameter : unreal.Float32;
  @:uproperty public var InteractionCurPoint : unreal.FVector;
  @:uproperty public var InteractionStartPoint : unreal.FVector;
  @:uproperty public var InteractionAxis : unreal.FVector;
  
  /**
    The values below are used in the context of a single click-drag interaction, ie if bInInteraction = true
    They otherwise should be considered uninitialized
  **/
  @:uproperty public var InteractionOrigin : unreal.FVector;
  
  /**
    If true, we are in an active click+drag interaction, otherwise we are not
  **/
  @:uproperty public var bInInteraction : Bool;
  
  /**
    If enabled, then the sign on the parameter delta is always "increasing" when moving away from the origin point, rather than just being a projection onto the axis
  **/
  @:uproperty public var bEnableSignedAxis : Bool;
  
}
