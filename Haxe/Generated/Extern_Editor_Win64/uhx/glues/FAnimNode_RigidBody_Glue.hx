// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/animgraphruntime/fanimnode_rigidbody.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class FAnimNode_RigidBody_Glue {
public static function get_EvaluationResetTime(self:unreal.VariantPtr):cpp.Float32;
public static function set_EvaluationResetTime(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_WorldSpaceMinimumScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_WorldSpaceMinimumScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bClampLinearTranslationLimitToRefPose(self:unreal.VariantPtr):Bool;
public static function set_bClampLinearTranslationLimitToRefPose(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bFreezeIncomingPoseOnStart(self:unreal.VariantPtr):Bool;
public static function set_bFreezeIncomingPoseOnStart(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bTransferBoneVelocities(self:unreal.VariantPtr):Bool;
public static function set_bTransferBoneVelocities(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bOverrideWorldGravity(self:unreal.VariantPtr):Bool;
public static function set_bOverrideWorldGravity(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bEnableWorldGeometry(self:unreal.VariantPtr):Bool;
public static function set_bEnableWorldGeometry(self:unreal.VariantPtr, value:Bool):Void;
public static function get_bForceDisableCollisionBetweenConstraintBodies(self:unreal.VariantPtr):Bool;
public static function set_bForceDisableCollisionBetweenConstraintBodies(self:unreal.VariantPtr, value:Bool):Void;
public static function get_SimulationSpace(self:unreal.VariantPtr):Int;
public static function set_SimulationSpace(self:unreal.VariantPtr, value:Int):Void;
public static function get_OverlapChannel(self:unreal.VariantPtr):Int;
public static function set_OverlapChannel(self:unreal.VariantPtr, value:Int):Void;
public static function get_BaseBoneRef(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_BaseBoneRef(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_CachedBoundsScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_CachedBoundsScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_SimSpaceSettings(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_SimSpaceSettings(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ComponentAppliedLinearAccClamp(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ComponentAppliedLinearAccClamp(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ComponentLinearVelScale(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ComponentLinearVelScale(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ComponentLinearAccScale(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ComponentLinearAccScale(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ExternalForce(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ExternalForce(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OverrideWorldGravity(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OverrideWorldGravity(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OverridePhysicsAsset(self:unreal.VariantPtr):unreal.UIntPtr;
public static function set_OverridePhysicsAsset(self:unreal.VariantPtr, value:unreal.UIntPtr):Void;
public static function copyNew(self:unreal.VariantPtr):unreal.VariantPtr;
public static function copy(self:unreal.VariantPtr):unreal.VariantPtr;
public static function assign(self:unreal.VariantPtr, val:unreal.VariantPtr):Void;
public static function equals(self:unreal.VariantPtr, other:unreal.VariantPtr):Bool;
}