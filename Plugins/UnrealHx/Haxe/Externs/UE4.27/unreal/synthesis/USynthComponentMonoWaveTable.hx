/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.synthesis;

@:umodule("Synthesis")
@:glueCppIncludes("SynthComponents/SynthComponentMonoWaveTable.h")
@:uextern @:uclass extern class USynthComponentMonoWaveTable extends unreal.audiomixer.USynthComponent {
  
  /**
    The settings asset to use for this synth
  **/
  @:uproperty private var CurrentPreset : unreal.synthesis.UMonoWaveTableSynthPreset;
  
  /**
    Curve array altered
  **/
  @:uproperty public var OnNumTablesChanged : unreal.synthesis.FNumTablesChanged;
  
  /**
    Wave Table curve was edited
  **/
  @:uproperty public var OnTableAltered : unreal.synthesis.FOnTableAltered;
  
  /**
    Start BP functionality // Get the number of table elements from Blueprint
  **/
  @:ufunction(BlueprintCallable) @:final public function GetNumTableEntries() : unreal.Int32;
  
  /**
    Starts a new note (retrigs modulators, etc.)
  **/
  @:ufunction(BlueprintCallable) @:final public function NoteOn(InMidiNote : unreal.Float32, InVelocity : unreal.Float32) : Void;
  
  /**
    Starts a new note (retrigs modulators, etc.)
  **/
  @:ufunction(BlueprintCallable) @:final public function NoteOff(InMidiNote : unreal.Float32) : Void;
  
  /**
    Inform the synth if the sustain pedal is pressed or not
  **/
  @:ufunction(BlueprintCallable) @:final public function SetSustainPedalState(InSustainPedalState : Bool) : Void;
  
  /**
    Sets the oscillator's frequency
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFrequency(FrequencyHz : unreal.Float32) : Void;
  
  /**
    Set a frequency offset in cents (for pitch modulation such as the Pitch Bend Wheel)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFrequencyPitchBend(FrequencyOffsetCents : unreal.Float32) : Void;
  
  /**
    Set the oscillator's frequency via midi note number
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFrequencyWithMidiNote(InMidiNote : unreal.Float32) : Void;
  
  /**
    Sets the wavetable position. Expects a percentage between 0.0 and 1.0
  **/
  @:ufunction(BlueprintCallable) @:final public function SetWaveTablePosition(InPosition : unreal.Float32) : Void;
  
  /**
    Refresh a particular wavetable (from Game Thread data)
  **/
  @:ufunction(BlueprintCallable) @:final public function RefreshWaveTable(Index : unreal.Int32) : Void;
  
  /**
    Refresh all wavetables (from Game Thread data)
  **/
  @:ufunction(BlueprintCallable) @:final public function RefreshAllWaveTables() : Void;
  
  /**
    Set frequency of LFO controlling Table Position (in Hz)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPosLfoFrequency(InLfoFrequency : unreal.Float32) : Void;
  
  /**
    Set the Modulation depth of the Lfo controlling the Table Position around the current position value
             0.0 = no modulation, 1.0 = current position +/- 0.5 (Lfo + Position result will clamp [0.0, 1.0])
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPosLfoDepth(InLfoDepth : unreal.Float32) : Void;
  
  /**
    Set the shape of the Lfo controlling the position
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPosLfoType(InLfoType : unreal.Const<unreal.synthesis.ESynthLFOType>) : Void;
  
  /**
    Set the Cut-off frequency of the low-pass filter
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLowPassFilterResonance(InNewQ : unreal.Float32) : Void;
  
  /**
    Set Amp envelope attack time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeAttackTime(InAttackTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Amp envelope decay time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeDecayTime(InDecayTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Amp envelope sustain gain [0.0, 1.0]
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeSustainGain(InSustainGain : unreal.Float32) : Void;
  
  /**
    Set Amp envelope release time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeReleaseTime(InReleaseTimeMsec : unreal.Float32) : Void;
  
  /**
    Set whether or not the Amp envelope is inverted
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeInvert(bInInvert : Bool) : Void;
  
  /**
    Set whether or not the Amp envelope's bias is inverted
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeBiasInvert(bInBiasInvert : Bool) : Void;
  
  /**
    Set the overall depth of the Amp envelope
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Set the bias depth of the the Amp envelope
  **/
  @:ufunction(BlueprintCallable) @:final public function SetAmpEnvelopeBiasDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope attack time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeAttackTime(InAttackTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope decay time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopenDecayTime(InDecayTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope sustain gain
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeSustainGain(InSustainGain : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope release time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeReleaseTime(InReleaseTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope inversion
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeInvert(bInInvert : Bool) : Void;
  
  /**
    Set Low-Pass Filter envelope bias inversion
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeBiasInvert(bInBiasInvert : Bool) : Void;
  
  /**
    Set Low-Pass Filter envelope depth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Set Low-Pass Filter envelope bias depth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetFilterEnvelopeBiasDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Set Position envelope attack time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeAttackTime(InAttackTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Position envelope decay time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeDecayTime(InDecayTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Position envelope sustain gain
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeSustainGain(InSustainGain : unreal.Float32) : Void;
  
  /**
    Set Position envelope release time (msec)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeReleaseTime(InReleaseTimeMsec : unreal.Float32) : Void;
  
  /**
    Set Position envelope envelope inversion
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeInvert(bInInvert : Bool) : Void;
  
  /**
    Set Position envelope bias inversion
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeBiasInvert(bInBiasInvert : Bool) : Void;
  
  /**
    Set Position envelope envelope depth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Set Position envelope bias depth
  **/
  @:ufunction(BlueprintCallable) @:final public function SetPositionEnvelopeBiasDepth(InDepth : unreal.Float32) : Void;
  
  /**
    Get the number of curves in the wave table. (returns -1 if there is no asset)
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetMaxTableIndex() : unreal.Int32;
  
  /**
    Set a Keyframe value given a Table number and Keyframe number.
             Returns false if the request was invalid.
             NewValue will be clamped from +/- 1.0
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurveValue(TableIndex : unreal.Int32, KeyframeIndex : unreal.Int32, NewValue : unreal.Float32) : Bool;
  
  /**
    Set the curve interpolation type (What the curve is doing between keyframes)
    This should only be used for live-editing features! (changing the curves at runtime is expensive)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurveInterpolationType(InterpolationType : unreal.synthesis.CurveInterpolationType, TableIndex : unreal.Int32) : Bool;
  
  /**
    Set the curve tangent ("Curve depth" between keyframes)
    This should only be used for live-editing features! (changing the curves at runtime is expensive)
  **/
  @:ufunction(BlueprintCallable) @:final public function SetCurveTangent(TableIndex : unreal.Int32, InNewTangent : unreal.Float32) : Bool;
  
  /**
    Get the curve interpolation type (What the curve is doing between keyframes)
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCurveTangent(TableIndex : unreal.Int32) : unreal.Float32;
  
  /**
    Get an array of floats that represent the key frames in the requested curve
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetKeyFrameValuesForTable(TableIndex : unreal.Float32) : unreal.TArray<unreal.Float32>;
  
}
