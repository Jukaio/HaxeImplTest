// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/editor/uphysicsasseteditoroptions.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class UPhysicsAssetEditorOptions_Glue {
public static function get_bResetClothWhenSimulating(self:unreal.UIntPtr):Bool;
public static function set_bResetClothWhenSimulating(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bHideKinematicBodies(self:unreal.UIntPtr):Bool;
public static function set_bHideKinematicBodies(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bHideSimulatedBodies(self:unreal.UIntPtr):Bool;
public static function set_bHideSimulatedBodies(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bSolidRenderingForSelectedOnly(self:unreal.UIntPtr):Bool;
public static function set_bSolidRenderingForSelectedOnly(self:unreal.UIntPtr, value:Bool):Void;
public static function get_CollisionOpacity(self:unreal.UIntPtr):cpp.Float32;
public static function set_CollisionOpacity(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_SimulationConstraintViewMode(self:unreal.UIntPtr):Int;
public static function set_SimulationConstraintViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_SimulationCollisionViewMode(self:unreal.UIntPtr):Int;
public static function set_SimulationCollisionViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_SimulationMeshViewMode(self:unreal.UIntPtr):Int;
public static function set_SimulationMeshViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_ConstraintViewMode(self:unreal.UIntPtr):Int;
public static function set_ConstraintViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_CollisionViewMode(self:unreal.UIntPtr):Int;
public static function set_CollisionViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_MeshViewMode(self:unreal.UIntPtr):Int;
public static function set_MeshViewMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_ConstraintDrawSize(self:unreal.UIntPtr):cpp.Float32;
public static function set_ConstraintDrawSize(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_bRenderOnlySelectedConstraints(self:unreal.UIntPtr):Bool;
public static function set_bRenderOnlySelectedConstraints(self:unreal.UIntPtr, value:Bool):Void;
public static function get_bShowConstraintsAsPoints(self:unreal.UIntPtr):Bool;
public static function set_bShowConstraintsAsPoints(self:unreal.UIntPtr, value:Bool):Void;
public static function get_PokeStrength(self:unreal.UIntPtr):cpp.Float32;
public static function set_PokeStrength(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_InterpolationSpeed(self:unreal.UIntPtr):cpp.Float32;
public static function set_InterpolationSpeed(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_HandleAngularStiffness(self:unreal.UIntPtr):cpp.Float32;
public static function set_HandleAngularStiffness(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_HandleAngularDamping(self:unreal.UIntPtr):cpp.Float32;
public static function set_HandleAngularDamping(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_HandleLinearStiffness(self:unreal.UIntPtr):cpp.Float32;
public static function set_HandleLinearStiffness(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_HandleLinearDamping(self:unreal.UIntPtr):cpp.Float32;
public static function set_HandleLinearDamping(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_MaxFPS(self:unreal.UIntPtr):Int;
public static function set_MaxFPS(self:unreal.UIntPtr, value:Int):Void;
public static function get_bUseGravityOverride(self:unreal.UIntPtr):Bool;
public static function set_bUseGravityOverride(self:unreal.UIntPtr, value:Bool):Void;
public static function get_GravityOverrideZ(self:unreal.UIntPtr):cpp.Float32;
public static function set_GravityOverrideZ(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_GravScale(self:unreal.UIntPtr):cpp.Float32;
public static function set_GravScale(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_PokeBlendTime(self:unreal.UIntPtr):cpp.Float32;
public static function set_PokeBlendTime(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_PokePauseTime(self:unreal.UIntPtr):cpp.Float32;
public static function set_PokePauseTime(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function get_PhysicsUpdateMode(self:unreal.UIntPtr):Int;
public static function set_PhysicsUpdateMode(self:unreal.UIntPtr, value:Int):Void;
public static function get_bUpdateJointsFromAnimation(self:unreal.UIntPtr):Bool;
public static function set_bUpdateJointsFromAnimation(self:unreal.UIntPtr, value:Bool):Void;
public static function get_PhysicsBlend(self:unreal.UIntPtr):cpp.Float32;
public static function set_PhysicsBlend(self:unreal.UIntPtr, value:cpp.Float32):Void;
public static function StaticClass():unreal.UIntPtr;
}