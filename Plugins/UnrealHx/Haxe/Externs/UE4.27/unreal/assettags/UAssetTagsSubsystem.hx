/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.assettags;

@:umodule("AssetTags")
@:glueCppIncludes("AssetTagsSubsystem.h")
@:uextern @:uclass extern class UAssetTagsSubsystem extends unreal.UEngineSubsystem {
  #if WITH_EDITOR
  
  /**
    Create a new collection with the given name and share type.
    
    @param Name Name to give to the collection.
    @param ShareType Whether the collection should be local, private, or shared?
    
    @return True if the collection was created, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function CreateCollection(Name : unreal.Const<unreal.FName>, ShareType : unreal.Const<unreal.assettags.ECollectionScriptingShareType>) : Bool;
  
  /**
    Destroy the given collection.
    
    @param Name Name of the collection to destroy.
    
    @return True if the collection was destroyed, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function DestroyCollection(Name : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Rename the given collection.
    
    @param Name Name of the collection to rename.
    @param NewName Name to give to the collection.
    
    @return True if the collection was renamed, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RenameCollection(Name : unreal.Const<unreal.FName>, NewName : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Re-parent the given collection.
    
    @param Name Name of the collection to re-parent.
    @param NewParentName Name of the new parent collection, or None to have the collection become a root collection.
    
    @return True if the collection was renamed, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function ReparentCollection(Name : unreal.Const<unreal.FName>, NewParentName : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Remove all assets from the given collection.
    
    @param Name Name of the collection to modify.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function EmptyCollection(Name : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Add the given asset to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPathName Asset to add (its path name, eg) /Game/MyFolder/MyAsset.MyAsset).
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetToCollection(Name : unreal.Const<unreal.FName>, AssetPathName : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Add the given asset to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetData Asset to add.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetDataToCollection(Name : unreal.Const<unreal.FName>, AssetData : unreal.Const<unreal.PRef<unreal.FAssetData>>) : Bool;
  
  /**
    Add the given asset to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPtr Asset to add.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetPtrToCollection(Name : unreal.Const<unreal.FName>, AssetPtr : unreal.Const<unreal.UObject>) : Bool;
  
  /**
    Add the given assets to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPathNames Assets to add (their path names, eg) /Game/MyFolder/MyAsset.MyAsset).
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetsToCollection(Name : unreal.Const<unreal.FName>, AssetPathNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Add the given assets to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetDatas Assets to add.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetDatasToCollection(Name : unreal.Const<unreal.FName>, AssetDatas : unreal.Const<unreal.PRef<unreal.TArray<unreal.FAssetData>>>) : Bool;
  
  /**
    Add the given assets to the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPtrs Assets to add.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function AddAssetPtrsToCollection(Name : unreal.Const<unreal.FName>, AssetPtrs : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>) : Bool;
  
  /**
    Remove the given asset from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPathName Asset to remove (its path name, eg) /Game/MyFolder/MyAsset.MyAsset).
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetFromCollection(Name : unreal.Const<unreal.FName>, AssetPathName : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Remove the given asset from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetData Asset to remove.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetDataFromCollection(Name : unreal.Const<unreal.FName>, AssetData : unreal.Const<unreal.PRef<unreal.FAssetData>>) : Bool;
  
  /**
    Remove the given asset from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPtr Asset to remove.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetPtrFromCollection(Name : unreal.Const<unreal.FName>, AssetPtr : unreal.Const<unreal.UObject>) : Bool;
  
  /**
    Remove the given assets from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPathNames Assets to remove (their path names, eg) /Game/MyFolder/MyAsset.MyAsset).
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetsFromCollection(Name : unreal.Const<unreal.FName>, AssetPathNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Remove the given assets from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetDatas Assets to remove.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetDatasFromCollection(Name : unreal.Const<unreal.FName>, AssetDatas : unreal.Const<unreal.PRef<unreal.TArray<unreal.FAssetData>>>) : Bool;
  
  /**
    Remove the given assets from the given collection.
    
    @param Name Name of the collection to modify.
    @param AssetPtrs Assets to remove.
    
    @return True if the collection was modified, false otherwise (see the output log for details on error).
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveAssetPtrsFromCollection(Name : unreal.Const<unreal.FName>, AssetPtrs : unreal.Const<unreal.PRef<unreal.TArray<unreal.UObject>>>) : Bool;
  #end // WITH_EDITOR
  
  /**
    Check whether the given collection exists.
    
    @param Name Name of the collection to test.
    
    @return True if the collection exists, false otherwise.
  **/
  @:ufunction(BlueprintCallable) @:final public function CollectionExists(Name : unreal.Const<unreal.FName>) : Bool;
  
  /**
    Get the names of all available collections.
    
    @return Names of all available collections.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCollections() : unreal.TArray<unreal.FName>;
  
  /**
    Get the assets in the given collection.
    
    @param Name Name of the collection to test.
    
    @return Assets in the given collection.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetAssetsInCollection(Name : unreal.Const<unreal.FName>) : unreal.TArray<unreal.FAssetData>;
  
  /**
    Get the names of the collections that contain the given asset.
    
    @param AssetPathName Asset to test (its path name, eg) /Game/MyFolder/MyAsset.MyAsset).
    
    @return Names of the collections that contain the asset.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCollectionsContainingAsset(AssetPathName : unreal.Const<unreal.FName>) : unreal.TArray<unreal.FName>;
  
  /**
    Get the names of the collections that contain the given asset.
    
    @param AssetData Asset to test.
    
    @return Names of the collections that contain the asset.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCollectionsContainingAssetData(AssetData : unreal.Const<unreal.PRef<unreal.FAssetData>>) : unreal.TArray<unreal.FName>;
  
  /**
    Get the names of the collections that contain the given asset.
    
    @param AssetPtr Asset to test.
    
    @return Names of the collections that contain the asset.
  **/
  @:ufunction(BlueprintCallable) @:final public function GetCollectionsContainingAssetPtr(AssetPtr : unreal.Const<unreal.UObject>) : unreal.TArray<unreal.FName>;
  
}
