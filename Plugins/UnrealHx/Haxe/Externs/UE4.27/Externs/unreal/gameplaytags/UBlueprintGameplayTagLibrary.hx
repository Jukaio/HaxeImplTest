/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.gameplaytags;

@:umodule("GameplayTags")
@:glueCppIncludes("BlueprintGameplayTagLibrary.h")
@:uextern @:uclass extern class UBlueprintGameplayTagLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Determine if TagOne matches against TagTwo
    
    @param TagOne                        Tag to check for match
    @param TagTwo                        Tag to check match against
    @param bExactMatch           If true, the tag has to be exactly present, if false then TagOne will include it's parent tags while matching
    
    @return True if TagOne matches TagTwo
  **/
  @:ufunction(BlueprintCallable) static public function MatchesTag(TagOne : unreal.gameplaytags.FGameplayTag, TagTwo : unreal.gameplaytags.FGameplayTag, bExactMatch : Bool) : Bool;
  
  /**
    Determine if TagOne matches against any tag in OtherContainer
    
    @param TagOne                        Tag to check for match
    @param OtherContainer        Container to check against.
    @param bExactMatch           If true, the tag has to be exactly present, if false then TagOne will include it's parent tags while matching
    
    @return True if TagOne matches any tags explicitly present in OtherContainer
  **/
  @:ufunction(BlueprintCallable) static public function MatchesAnyTags(TagOne : unreal.gameplaytags.FGameplayTag, OtherContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, bExactMatch : Bool) : Bool;
  
  /**
    Returns true if the values are equal (A == B)
  **/
  @:ufunction(BlueprintCallable) static public function EqualEqual_GameplayTag(A : unreal.gameplaytags.FGameplayTag, B : unreal.gameplaytags.FGameplayTag) : Bool;
  
  /**
    Returns true if the values are not equal (A != B)
  **/
  @:ufunction(BlueprintCallable) static public function NotEqual_GameplayTag(A : unreal.gameplaytags.FGameplayTag, B : unreal.gameplaytags.FGameplayTag) : Bool;
  
  /**
    Returns true if the passed in gameplay tag is non-null
  **/
  @:ufunction(BlueprintCallable) static public function IsGameplayTagValid(GameplayTag : unreal.gameplaytags.FGameplayTag) : Bool;
  
  /**
    Returns FName of this tag
  **/
  @:ufunction(BlueprintCallable) static public function GetTagName(GameplayTag : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTag>>) : unreal.FName;
  
  /**
    Creates a literal FGameplayTag
  **/
  @:ufunction(BlueprintCallable) static public function MakeLiteralGameplayTag(Value : unreal.gameplaytags.FGameplayTag) : unreal.gameplaytags.FGameplayTag;
  
  /**
    Get the number of gameplay tags in the specified container
    
    @param TagContainer  Tag container to get the number of tags from
    
    @return The number of tags in the specified container
  **/
  @:ufunction(BlueprintCallable) static public function GetNumGameplayTagsInContainer(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : unreal.Int32;
  
  /**
    Check if the tag container has the specified tag
    
    @param TagContainer                  Container to check for the tag
    @param Tag                                   Tag to check for in the container
    @param bExactMatch                   If true, the tag has to be exactly present, if false then TagContainer will include it's parent tags while matching
    
    @return True if the container has the specified tag, false if it does not
  **/
  @:ufunction(BlueprintCallable) static public function HasTag(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, Tag : unreal.gameplaytags.FGameplayTag, bExactMatch : Bool) : Bool;
  
  /**
    Check if the specified tag container has ANY of the tags in the other container
    
    @param TagContainer                  Container to check if it matches any of the tags in the other container
    @param OtherContainer                Container to check against.
    @param bExactMatch                   If true, the tag has to be exactly present, if false then TagContainer will include it's parent tags while matching
    
    @return True if the container has ANY of the tags in the other container
  **/
  @:ufunction(BlueprintCallable) static public function HasAnyTags(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, OtherContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, bExactMatch : Bool) : Bool;
  
  /**
    Check if the specified tag container has ALL of the tags in the other container
    
    @param TagContainer                  Container to check if it matches all of the tags in the other container
    @param OtherContainer                Container to check against. If this is empty, the check will succeed
    @param bExactMatch                   If true, the tag has to be exactly present, if false then TagContainer will include it's parent tags while matching
    
    @return True if the container has ALL of the tags in the other container
  **/
  @:ufunction(BlueprintCallable) static public function HasAllTags(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, OtherContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, bExactMatch : Bool) : Bool;
  
  /**
    Check if the specified tag query is empty
    
    @param TagQuery                              Query to check
    
    @return True if the query is empty, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function IsTagQueryEmpty(TagQuery : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagQuery>>) : Bool;
  
  /**
    Check if the specified tag container matches the given Tag Query
    
    @param TagContainer                  Container to check if it matches all of the tags in the other container
    @param TagQuery                              Query to match against
    
    @return True if the container matches the query, false otherwise.
  **/
  @:ufunction(BlueprintCallable) static public function DoesContainerMatchTagQuery(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, TagQuery : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagQuery>>) : Bool;
  
  /**
    Get an array of all actors of a specific class (or subclass of that class) which match the specified gameplay tag query.
    
    @param ActorClass                    Class of actors to fetch
    @param GameplayTagQuery              Query to match against
  **/
  @:ufunction(BlueprintCallable) static public function GetAllActorsOfClassMatchingTagQuery(WorldContextObject : unreal.UObject, ActorClass : unreal.TSubclassOf<unreal.AActor>, GameplayTagQuery : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagQuery>>, OutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    Adds a single tag to the passed in tag container
    
    @param InOutTagContainer             The container that will be appended too.
    @param Tag                                   The tag to add to the container
  **/
  @:ufunction(BlueprintCallable) static public function AddGameplayTag(TagContainer : unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>, Tag : unreal.gameplaytags.FGameplayTag) : Void;
  
  /**
    Remove a single tag from the passed in tag container, returns true if found
    
    @param InOutTagContainer             The container that will be appended too.
    @param Tag                                   The tag to add to the container
  **/
  @:ufunction(BlueprintCallable) static public function RemoveGameplayTag(TagContainer : unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>, Tag : unreal.gameplaytags.FGameplayTag) : Bool;
  
  /**
    Appends all tags in the InTagContainer to InOutTagContainer
    
    @param InOutTagContainer             The container that will be appended too.
    @param InTagContainer                The container to append.
  **/
  @:ufunction(BlueprintCallable) static public function AppendGameplayTagContainers(InOutTagContainer : unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>, InTagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : Void;
  
  /**
    Returns true if the values are equal (A == B)
  **/
  @:ufunction(BlueprintCallable) static public function EqualEqual_GameplayTagContainer(A : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, B : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : Bool;
  
  /**
    Returns true if the values are not equal (A != B)
  **/
  @:ufunction(BlueprintCallable) static public function NotEqual_GameplayTagContainer(A : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, B : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : Bool;
  
  /**
    Creates a literal FGameplayTagContainer
  **/
  @:ufunction(BlueprintCallable) static public function MakeLiteralGameplayTagContainer(Value : unreal.gameplaytags.FGameplayTagContainer) : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Creates a FGameplayTagContainer from the array of passed in tags
  **/
  @:ufunction(BlueprintCallable) static public function MakeGameplayTagContainerFromArray(GameplayTags : unreal.Const<unreal.PRef<unreal.TArray<unreal.gameplaytags.FGameplayTag>>>) : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Creates a FGameplayTagContainer containing a single tag
  **/
  @:ufunction(BlueprintCallable) static public function MakeGameplayTagContainerFromTag(SingleTag : unreal.gameplaytags.FGameplayTag) : unreal.gameplaytags.FGameplayTagContainer;
  
  /**
    Breaks tag container into explicit array of tags
  **/
  @:ufunction(BlueprintCallable) static public function BreakGameplayTagContainer(GameplayTagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>, GameplayTags : unreal.PRef<unreal.TArray<unreal.gameplaytags.FGameplayTag>>) : Void;
  
  /**
    Creates a literal FGameplayTagQuery
    
    @param       TagQuery        value to set the FGameplayTagQuery to
    
    @return      The literal FGameplayTagQuery
  **/
  @:ufunction(BlueprintCallable) static public function MakeGameplayTagQuery(TagQuery : unreal.gameplaytags.FGameplayTagQuery) : unreal.gameplaytags.FGameplayTagQuery;
  
  /**
    Checks if a gameplay tag's name and a string are not equal to one another
  **/
  @:ufunction(BlueprintCallable) static public function NotEqual_TagTag(A : unreal.gameplaytags.FGameplayTag, B : unreal.FString) : Bool;
  
  /**
    Checks if a gameplay tag containers's name and a string are not equal to one another
  **/
  @:ufunction(BlueprintCallable) static public function NotEqual_TagContainerTagContainer(A : unreal.gameplaytags.FGameplayTagContainer, B : unreal.FString) : Bool;
  
  /**
    Returns an FString listing all of the gameplay tags in the tag container for debugging purposes.
    
    @param TagContainer  The tag container to get the debug string from.
  **/
  @:ufunction(BlueprintCallable) static public function GetDebugStringFromGameplayTagContainer(TagContainer : unreal.Const<unreal.PRef<unreal.gameplaytags.FGameplayTagContainer>>) : unreal.FString;
  
  /**
    Returns an FString representation of a gameplay tag for debugging purposes.
    
    @param GameplayTag   The tag to get the debug string from.
  **/
  @:ufunction(BlueprintCallable) static public function GetDebugStringFromGameplayTag(GameplayTag : unreal.gameplaytags.FGameplayTag) : unreal.FString;
  
}
