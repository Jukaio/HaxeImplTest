/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.chaosniagara;

/**
  Data Interface allowing sampling of Chaos Destruction data.
**/
@:umodule("ChaosNiagara")
@:glueCppIncludes("NiagaraDataInterfaceChaosDestruction.h")
@:uextern @:uclass extern class UNiagaraDataInterfaceChaosDestruction extends unreal.niagara.UNiagaraDataInterface {
  @:uproperty private var TimeStampOfLastProcessedData : unreal.Float32;
  @:uproperty private var SolverTime : unreal.Float32;
  @:uproperty private var LastSpawnTime : unreal.Float32;
  @:uproperty private var LastSpawnedPointID : unreal.Int32;
  
  /**
    Debug visualization method
  **/
  @:uproperty public var DebugType : unreal.chaosniagara.EDebugTypeEnum;
  @:uproperty public var MaxLatency : unreal.Float32;
  
  /**
    Clamp particles velocity
  **/
  @:uproperty public var FinalVelocityMagnitudeMinMax : unreal.FVector2D;
  
  /**
    Max Offset value added to spawned particles velocity
  **/
  @:uproperty public var VelocityOffsetMax : unreal.FVector;
  
  /**
    Min Offset value added to spawned particles velocity
  **/
  @:uproperty public var VelocityOffsetMin : unreal.FVector;
  @:uproperty public var SpreadAngleMax : unreal.Float32;
  
  /**
    Every particles will be spawned with random velocity with magnitude in the range of [RandomVelocityMagnitudeMin, RandomVelocityMagnitudeMax]
  **/
  @:uproperty public var RandomVelocityMagnitudeMinMax : unreal.FVector2D;
  
  /**
    The method used to create the random velocities for the newly spawned particles
  **/
  @:uproperty public var RandomVelocityGenerationType : unreal.chaosniagara.ERandomVelocityGenerationTypeEnum;
  
  /**
    How much of the collision velocity gets inherited
  **/
  @:uproperty public var InheritedVelocityMultiplier : unreal.Float32;
  
  /**
    Random displacement value for the particle spawn position
  **/
  @:uproperty public var RandomPositionMagnitudeMinMax : unreal.FVector2D;
  
  /**
    TODO: Explanatory comment
  **/
  @:uproperty public var bGetExternalTrailingData : Bool;
  
  /**
    TODO: Explanatory comment
  **/
  @:uproperty public var bGetExternalBreakingData : Bool;
  
  /**
    TODO: Explanatory comment
  **/
  @:uproperty public var ChaosBreakingMaterialSet : unreal.TSet<unreal.physicscore.UPhysicalMaterial>;
  
  /**
    Materials Filter
  **/
  @:uproperty public var bApplyMaterialsFilter : Bool;
  @:uproperty public var MaxDataPerCell : unreal.Int32;
  
  /**
    SpatialHash volume resolution
  **/
  @:uproperty public var SpatialHashVolumeCellSize : unreal.FVector;
  
  /**
    SpatialHash volume max
  **/
  @:uproperty public var SpatialHashVolumeMax : unreal.FVector;
  
  /**
    SpatialHash volume min
  **/
  @:uproperty public var SpatialHashVolumeMin : unreal.FVector;
  @:uproperty public var DoSpatialHash : Bool;
  
  /**
    TODO: Explanatory comment
  **/
  @:uproperty public var bGetExternalCollisionData : Bool;
  
  /**
    Sorting method to sort the collision data
  **/
  @:uproperty public var DataSortingType : unreal.chaosniagara.EDataSortTypeEnum;
  
  /**
    Min/Max LocationX to spawn particles
  **/
  @:uproperty public var LocationZToSpawnMinMax : unreal.FVector2D;
  
  /**
    How to use LocationZ to filter
  **/
  @:uproperty public var LocationZToSpawn : unreal.chaosniagara.ELocationZToSpawnEnum;
  
  /**
    Min/Max LocationY to spawn particles
  **/
  @:uproperty public var LocationYToSpawnMinMax : unreal.FVector2D;
  
  /**
    How to use LocationY to filter
  **/
  @:uproperty public var LocationYToSpawn : unreal.chaosniagara.ELocationYToSpawnEnum;
  
  /**
    Min/Max LocationX to spawn particles
  **/
  @:uproperty public var LocationXToSpawnMinMax : unreal.FVector2D;
  
  /**
    How to use LocationX to filter
  **/
  @:uproperty public var LocationXToSpawn : unreal.chaosniagara.ELocationXToSpawnEnum;
  
  /**
    Location Filtering Mode
  **/
  @:uproperty public var LocationFilteringMode : unreal.chaosniagara.ELocationFilteringModeEnum;
  
  /**
    SurfaceType to spawn particles
  **/
  @:uproperty public var SurfaceTypeToSpawn : unreal.Int32;
  
  /**
    Min/Max solver time mass to spawn particles
  **/
  @:uproperty public var SolverTimeToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max volume to spawn particles
  **/
  @:uproperty public var VolumeToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max ExtentMax to spawn particles
  **/
  @:uproperty public var ExtentMaxToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max ExtentMin to spawn particles
  **/
  @:uproperty public var ExtentMinToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max mass to spawn particles
  **/
  @:uproperty public var MassToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max speed to spawn particles
  **/
  @:uproperty public var SpeedToSpawnMinMax : unreal.FVector2D;
  
  /**
    Min/Max collision accumulated impulse to spawn particles
  **/
  @:uproperty public var ImpulseToSpawnMinMax : unreal.FVector2D;
  
  /**
    For every collision random number of particles will be spawned in the range of [SpawnMultiplierMin, SpawnMultiplierMax]
  **/
  @:uproperty public var SpawnChance : unreal.Float32;
  
  /**
    For every collision random number of particles will be spawned in the range of [SpawnMultiplierMin, SpawnMultiplierMax]
  **/
  @:uproperty public var SpawnMultiplierMinMax : unreal.FVector2D;
  
  /**
    Turn on/off particle spawning
  **/
  @:uproperty public var DoSpawn : Bool;
  
  /**
    Maximum number of collision/breaking/trailing entry used for spawning particles every time data from the physics solver gets processed
  **/
  @:uproperty public var MaxNumberOfDataEntriesToSpawn : unreal.Int32;
  
  /**
    Number of times the RBD collision data gets processed every second
  **/
  @:uproperty public var DataProcessFrequency : unreal.Int32;
  @:uproperty public var DataSourceType : unreal.chaosniagara.EDataSourceTypeEnum;
  
  /**
    Chaos Solver
  **/
  @:uproperty public var ChaosSolverActorSet : unreal.TSet<unreal.chaossolverengine.AChaosSolverActor>;
  
}
