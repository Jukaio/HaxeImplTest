/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.curveeditortools;

/**
  WARNING: This type was not defined as DLL export on its declaration. Because of that, some of its methods are inaccessible
  
  
**/
@:umodule("CurveEditorTools")
@:glueCppIncludes("Private/Filters/CurveEditorFFTFilter.h")
@:noClass @:uextern @:uclass extern class UCurveEditorFFTFilter extends unreal.curveeditor.UCurveEditorFilterBase {
  
  /**
    The number of samples used to filter in the time domain. It maps how steep the roll off is for the filter.
  **/
  @:uproperty public var Order : unreal.Int32;
  
  /**
    Which FFT filter implementation to use.
  **/
  @:uproperty public var Response : unreal.curveeditortools.ECurveEditorFFTFilterClass;
  
  /**
    Which frequencies are allowed through. For example, low-pass will let low frequency through and remove high frequency noise.
  **/
  @:uproperty public var Type : unreal.curveeditortools.ECurveEditorFFTFilterType;
  
  /**
    Normalized between 0-1. In a low pass filter, the lower the value is the smoother the output. In a high pass filter the higher the value the smoother the output.
  **/
  @:uproperty public var CutoffFrequency : unreal.Float32;
  
}
