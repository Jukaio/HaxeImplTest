/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.editor;

@:umodule("UnrealEd")
@:glueCppIncludes("Layers/LayersSubsystem.h")
@:uextern @:uclass extern class ULayersSubsystem extends unreal.editorsubsystem.UEditorSubsystem {
  
  /**
    Aggregates any information regarding layers associated with the level and it contents
    
    @param  Level   The process
  **/
  @:ufunction(BlueprintCallable) @:final public function AddLevelLayerInformation(Level : unreal.ULevel) : Void;
  
  /**
    Purges any information regarding layers associated with the level and it contents
    
    @param  Level   The process
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveLevelLayerInformation(Level : unreal.ULevel) : Void;
  
  /**
    Checks to see if the specified actor is in an appropriate state to interact with layers
    
    @param  Actor   The actor to validate
  **/
  @:ufunction(BlueprintCallable) @:final public function IsActorValidForLayer(Actor : unreal.AActor) : Bool;
  
  /**
    Synchronizes an newly created Actor's layers with the layer system
    
    @param  Actor   The actor to initialize
  **/
  @:ufunction(BlueprintCallable) @:final public function InitializeNewActorLayers(Actor : unreal.AActor) : Bool;
  
  /**
    Disassociates an Actor's layers from the layer system, general used before deleting the Actor
    
    @param  Actor   The actor to disassociate from the layer system
  **/
  @:ufunction(BlueprintCallable) @:final public function DisassociateActorFromLayers(Actor : unreal.AActor) : Bool;
  
  /**
    Adds the actor to the named layer.
    
    @param       Actor           The actor to add to the named layer
    @param       LayerName       The name of the layer to add the actor to
    @return                              true if the actor was added.  false is returned if the actor already belongs to the layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddActorToLayer(Actor : unreal.AActor, LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Adds the provided actor to the named layers.
    
    @param       Actor           The actor to add to the provided layers
    @param       LayerNames      A valid list of layer names.
    @return                              true if the actor was added to at least one of the provided layers.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddActorToLayers(Actor : unreal.AActor, LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Removes an actor from the specified layer.
    
    @param       Actor                   The actor to remove from the provided layer
    @param       LayerToRemove   The name of the layer to remove the actor from
    @return                                      true if the actor was removed from the layer.  false is returned if the actor already belonged to the layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveActorFromLayer(Actor : unreal.AActor, LayerToRemove : unreal.Const<unreal.PRef<unreal.FName>>, bUpdateStats : Bool = true) : Bool;
  
  /**
    Removes the provided actor from the named layers.
    
    @param       Actor           The actor to remove from the provided layers
    @param       LayerNames      A valid list of layer names.
    @return                              true if the actor was removed from at least one of the provided layers.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveActorFromLayers(Actor : unreal.AActor, LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>, bUpdateStats : Bool = true) : Bool;
  
  /**
    Add the actors to the named layer
    
    @param       Actors          The actors to add to the named layer
    @param       LayerName       The name of the layer to add to
    @return                              true if at least one actor was added to the layer.  false is returned if all the actors already belonged to the layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddActorsToLayer(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Add the actors to the named layers
    
    @param       Actors          The actors to add to the named layers
    @param       LayerNames      A valid list of layer names.
    @return                              true if at least one actor was added to at least one layer.  false is returned if all the actors already belonged to all specified layers.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddActorsToLayers(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Removes the actors from the specified layer.
    
    @param       Actors                  The actors to remove from the provided layer
    @param       LayerToRemove   The name of the layer to remove the actors from
    @return                                      true if at least one actor was removed from the layer.  false is returned if all the actors already belonged to the layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveActorsFromLayer(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LayerName : unreal.Const<unreal.PRef<unreal.FName>>, bUpdateStats : Bool = true) : Bool;
  
  /**
    Remove the actors to the named layers
    
    @param       Actors          The actors to remove to the named layers
    @param       LayerNames      A valid list of layer names.
    @return                              true if at least one actor was removed from at least one layer.  false is returned if none of the actors belonged to any of the specified layers.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveActorsFromLayers(Actors : unreal.Const<unreal.PRef<unreal.TArray<unreal.AActor>>>, LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>, bUpdateStats : Bool = true) : Bool;
  
  /**
    Find and return the selected actors.
    
    @return                              The selected AActor's as a TArray.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetSelectedActors() : unreal.TArray<unreal.AActor>;
  
  /**
    Adds selected actors to the named layer.
    
    @param       LayerName       A layer name.
    @return                              true if at least one actor was added.  false is returned if all selected actors already belong to the named layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddSelectedActorsToLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Adds selected actors to the named layers.
    
    @param       LayerNames      A valid list of layer names.
    @return                              true if at least one actor was added.  false is returned if all selected actors already belong to the named layers.
  **/
  @:ufunction(BlueprintCallable) @:final public function AddSelectedActorsToLayers(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Removes the selected actors from the named layer.
    
    @param       LayerName       A layer name.
    @return                              true if at least one actor was added.  false is returned if all selected actors already belong to the named layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveSelectedActorsFromLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Removes selected actors from the named layers.
    
    @param       LayerNames      A valid list of layer names.
    @return                              true if at least one actor was removed.
  **/
  @:ufunction(BlueprintCallable) @:final public function RemoveSelectedActorsFromLayers(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Bool;
  
  /**
    Selects/de-selects actors belonging to the named layer.
    
    @param       LayerName                                               A valid layer name.
    @param       bSelect                                                 If true actors are selected; if false, actors are deselected.
    @param       bNotify                                                 If true the Editor is notified of the selection change; if false, the Editor will not be notified.
    @param       bSelectEvenIfHidden     [optional]      If true even hidden actors will be selected; if false, hidden actors won't be selected.
    @return                                                                      true if at least one actor was selected/deselected.
  **/
  @:ufunction(BlueprintCallable) @:final public function SelectActorsInLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>, bSelect : Bool, bNotify : Bool, bSelectEvenIfHidden : Bool = false) : Bool;
  
  /**
    Selects/de-selects actors belonging to the named layers.
    
    @param       LayerNames                                              A valid list of layer names.
    @param       bSelect                                                 If true actors are selected; if false, actors are deselected.
    @param       bNotify                                                 If true the Editor is notified of the selection change; if false, the Editor will not be notified
    @param       bSelectEvenIfHidden     [optional]      If true even hidden actors will be selected; if false, hidden actors won't be selected.
    @return                                                                      true if at least one actor was selected/deselected.
  **/
  @:ufunction(BlueprintCallable) @:final public function SelectActorsInLayers(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>, bSelect : Bool, bNotify : Bool, bSelectEvenIfHidden : Bool = false) : Bool;
  
  /**
    Updates the visibility for all actors for all views.
    
    @param LayerThatChanged  If one layer was changed (toggled in view pop-up, etc), then we only need to modify actors that use that layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateAllViewVisibility(LayerThatChanged : unreal.Const<unreal.PRef<unreal.FName>>) : Void;
  
  /**
    Updates per-view visibility for the given actor for all views
    
    @param Actor         Actor to update
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateActorAllViewsVisibility(Actor : unreal.AActor) : Void;
  
  /**
    Updates the provided actors visibility in the viewports
    
    @param       Actor                                           Actor to update
    @param       bOutSelectionChanged [OUT]      Whether the Editors selection changed
    @param       bOutActorModified [OUT]         Whether the actor was modified
    @param       bNotifySelectionChange          If true the Editor is notified of the selection change; if false, the Editor will not be notified
    @param       bRedrawViewports                        If true the viewports will be redrawn; if false, they will not
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateActorVisibility(Actor : unreal.AActor, bOutSelectionChanged : Bool, bOutActorModified : Bool, bNotifySelectionChange : Bool, bRedrawViewports : Bool) : Bool;
  
  /**
    Updates the visibility of all actors in the viewports
    
    @param       bNotifySelectionChange          If true the Editor is notified of the selection change; if false, the Editor will not be notified
    @param       bRedrawViewports                        If true the viewports will be redrawn; if false, they will not
  **/
  @:ufunction(BlueprintCallable) @:final public function UpdateAllActorsVisibility(bNotifySelectionChange : Bool, bRedrawViewports : Bool) : Bool;
  
  /**
    Appends all the actors associated with the specified layer.
    
    @param  LayerName                       The layer to find actors for.
    @param  InOutActors                     The list to append the found actors to.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function AppendActorsFromLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>, InOutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    Appends all the actors associated with ANY of the specified layers.
    
    @param  LayerNames                      The layers to find actors for.
    @param  InOutActors                     The list to append the found actors to.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function AppendActorsFromLayers(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>, InOutActors : unreal.PRef<unreal.TArray<unreal.AActor>>) : Void;
  
  /**
    Gets all the actors associated with the specified layer. Analog to AppendActorsFromLayer but it returns rather than appends the actors.
    
    @param  LayerName                       The layer to find actors for.
    @return                                         The list to assign the found actors to.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetActorsFromLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : unreal.TArray<unreal.AActor>;
  
  /**
    Gets all the actors associated with ANY of the specified layers. Analog to AppendActorsFromLayers but it returns rather than appends the actors.
    
    @param  LayerNames                      The layers to find actors for.
    @return                                         The list to assign the found actors to.
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetActorsFromLayers(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : unreal.TArray<unreal.AActor>;
  
  /**
    Changes the named layer's visibility to the provided state
    
    @param       LayerName       The name of the layer to affect.
    @param       bIsVisible      If true the layer will be visible; if false, the layer will not be visible.
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLayerVisibility(LayerName : unreal.Const<unreal.PRef<unreal.FName>>, bIsVisible : Bool) : Void;
  
  /**
    Changes visibility of the named layers to the provided state
    
    @param       LayerNames      The names of the layers to affect
    @param       bIsVisible      If true the layers will be visible; if false, the layers will not be visible
  **/
  @:ufunction(BlueprintCallable) @:final public function SetLayersVisibility(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>, bIsVisible : Bool) : Void;
  
  /**
    Toggles the named layer's visibility
    
    @param LayerName     The name of the layer to affect
  **/
  @:ufunction(BlueprintCallable) @:final public function ToggleLayerVisibility(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Void;
  
  /**
    Toggles the visibility of all of the named layers
    
    @param       LayerNames      The names of the layers to affect
  **/
  @:ufunction(BlueprintCallable) @:final public function ToggleLayersVisibility(LayerNames : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Void;
  
  /**
    Set the visibility of all layers to true
  **/
  @:ufunction(BlueprintCallable) @:final public function MakeAllLayersVisible() : Void;
  
  /**
    Gets the ULayer Object of the named layer
    
    @param       LayerName       The name of the layer whose ULayer Object is returned
    @return                              The ULayer Object of the provided layer name
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : unreal.ULayer;
  
  /**
    Checks whether the ULayer Object of the provided layer name exists.
    
    @param       LayerName               The name of the layer whose ULayer Object to retrieve
    @return                                      If true a valid ULayer Object was found; if false, a valid ULayer object was not found
  **/
  @:ufunction(BlueprintCallable) @:final public function IsLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Gets all known layers and appends their names to the provide array
    
    @param OutLayers[OUT] Output array to store all known layers
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function AddAllLayerNamesTo(OutLayerNames : unreal.PRef<unreal.TArray<unreal.FName>>) : Void;
  
  /**
    Gets all known layers and appends them to the provided array
    
    @param OutLayers[OUT] Output array to store all known layers
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function AddAllLayersTo(OutLayers : unreal.PRef<unreal.TArray<unreal.ULayer>>) : Void;
  
  /**
    Creates a ULayer Object for the named layer
    
    @param       LayerName       The name of the layer to create
    @return                              The newly created ULayer Object for the named layer
  **/
  @:ufunction(BlueprintCallable) @:final public function CreateLayer(LayerName : unreal.Const<unreal.PRef<unreal.FName>>) : unreal.ULayer;
  
  /**
    Deletes all of the provided layers, disassociating all actors from them
    
    @param LayersToDelete        A valid list of layer names.
  **/
  @:ufunction(BlueprintCallable) @:final public function DeleteLayers(LayersToDelete : unreal.Const<unreal.PRef<unreal.TArray<unreal.FName>>>) : Void;
  
  /**
    Deletes the provided layer, disassociating all actors from them
    
    @param LayerToDelete         A valid layer name
  **/
  @:ufunction(BlueprintCallable) @:final public function DeleteLayer(LayerToDelete : unreal.Const<unreal.PRef<unreal.FName>>) : Void;
  
  /**
    Renames the provided originally named layer to the provided new name
    
    @param       OriginalLayerName       The name of the layer to be renamed
    @param       NewLayerName            The new name for the layer to be renamed
  **/
  @:ufunction(BlueprintCallable) @:final public function RenameLayer(OriginalLayerName : unreal.Const<unreal.PRef<unreal.FName>>, NewLayerName : unreal.Const<unreal.PRef<unreal.FName>>) : Bool;
  
  /**
    Get the current UWorld object.
    
    @return                                              The UWorld* object
  **/
  @:ufunction(BlueprintCallable) @:thisConst @:final public function GetWorld() : unreal.UWorld;
  
  /**
    Delegate handler for FEditorDelegates::MapChange. It internally calls LayersChanged.Broadcast.
  **/
  @:ufunction(BlueprintCallable) @:final public function EditorMapChange() : Void;
  
  /**
    Delegate handler for FEditorDelegates::RefreshLayerBrowser. It internally calls UpdateAllActorsVisibility to refresh the actors of each layer.
  **/
  @:ufunction(BlueprintCallable) @:final public function EditorRefreshLayerBrowser() : Void;
  
}
