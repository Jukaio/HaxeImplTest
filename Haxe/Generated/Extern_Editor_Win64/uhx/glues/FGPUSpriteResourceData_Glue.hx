// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/fgpuspriteresourcedata.hx
/*******************************************************
 * 
 * WARNING! This file was autogenerated by: 
 *  _    _                      _   _ 
 * | |  | |                    | | | |
 * | |  | |_ __  _ __ ___  __ _| | | |__ __  __
 * | |  | | '_ \| '__/ _ \/ _` | | | '_ \ \/ /
 * | |__| | | | | | |  __/ (_| | |_| | | |>  < 
 *  \____/|_| |_|_|  \___|\__,_|_(_)_| |_/_/\_\
 *******************************************************/


package uhx.glues;
@:unrealGlue extern class FGPUSpriteResourceData_Glue {
public static function get_MaxFacingCameraBlendDistance(self:unreal.VariantPtr):cpp.Float32;
public static function set_MaxFacingCameraBlendDistance(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_MinFacingCameraBlendDistance(self:unreal.VariantPtr):cpp.Float32;
public static function set_MinFacingCameraBlendDistance(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_bRemoveHMDRoll(self:unreal.VariantPtr):Bool;
public static function set_bRemoveHMDRoll(self:unreal.VariantPtr, value:Bool):Void;
public static function get_PivotOffset(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_PivotOffset(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_LockAxisFlag(self:unreal.VariantPtr):Int;
public static function set_LockAxisFlag(self:unreal.VariantPtr, value:Int):Void;
public static function get_ScreenAlignment(self:unreal.VariantPtr):Int;
public static function set_ScreenAlignment(self:unreal.VariantPtr, value:Int):Void;
public static function get_CameraMotionBlurAmount(self:unreal.VariantPtr):cpp.Float32;
public static function set_CameraMotionBlurAmount(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_RotationRateScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_RotationRateScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_OneMinusFriction(self:unreal.VariantPtr):cpp.Float32;
public static function set_OneMinusFriction(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_CollisionRandomDistribution(self:unreal.VariantPtr):cpp.Float32;
public static function set_CollisionRandomDistribution(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_CollisionRandomSpread(self:unreal.VariantPtr):cpp.Float32;
public static function set_CollisionRandomSpread(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_CollisionTimeBias(self:unreal.VariantPtr):cpp.Float32;
public static function set_CollisionTimeBias(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_CollisionRadiusBias(self:unreal.VariantPtr):cpp.Float32;
public static function set_CollisionRadiusBias(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_CollisionRadiusScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_CollisionRadiusScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ResilienceBias(self:unreal.VariantPtr):cpp.Float32;
public static function set_ResilienceBias(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_ResilienceScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_ResilienceScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_DragCoefficientBias(self:unreal.VariantPtr):cpp.Float32;
public static function set_DragCoefficientBias(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_DragCoefficientScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_DragCoefficientScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_PerParticleVectorFieldBias(self:unreal.VariantPtr):cpp.Float32;
public static function set_PerParticleVectorFieldBias(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_PerParticleVectorFieldScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_PerParticleVectorFieldScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_GlobalVectorFieldTightness(self:unreal.VariantPtr):cpp.Float32;
public static function set_GlobalVectorFieldTightness(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_GlobalVectorFieldScale(self:unreal.VariantPtr):cpp.Float32;
public static function set_GlobalVectorFieldScale(self:unreal.VariantPtr, value:cpp.Float32):Void;
public static function get_OrbitPhaseRange(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitPhaseRange(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OrbitPhaseBase(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitPhaseBase(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OrbitFrequencyRange(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitFrequencyRange(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OrbitFrequencyBase(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitFrequencyBase(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OrbitOffsetRange(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitOffsetRange(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_OrbitOffsetBase(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_OrbitOffsetBase(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ConstantAcceleration(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ConstantAcceleration(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_SizeBySpeed(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_SizeBySpeed(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_SubImageSize(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_SubImageSize(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_SimulationAttrCurveBias(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_SimulationAttrCurveBias(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_SimulationAttrCurveScale(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_SimulationAttrCurveScale(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_MiscBias(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_MiscBias(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_MiscScale(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_MiscScale(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ColorBias(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ColorBias(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_ColorScale(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_ColorScale(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_QuantizedSimulationAttrSamples(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_QuantizedSimulationAttrSamples(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_QuantizedMiscSamples(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_QuantizedMiscSamples(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
public static function get_QuantizedColorSamples(self:unreal.VariantPtr):unreal.VariantPtr;
public static function set_QuantizedColorSamples(self:unreal.VariantPtr, value:unreal.VariantPtr):Void;
}