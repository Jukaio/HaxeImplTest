// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/ureflectioncapturecomponent.hx
package unreal;
/**
  
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  -> will be exported to EngineDecalClasses.h
  
**/

@:umodule("Unreal")
@:glueCppIncludes("Components/ReflectionCaptureComponent.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.UReflectionCaptureComponent_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.UReflectionCaptureComponent")) #end
class UReflectionCaptureComponent #if !macro extends unreal.USceneComponent #end {
  #if !macro 
  /**
    
    Guid for map build data
    
  **/
  
  @:uproperty
  public var MapBuildDataId(get,set):unreal.PPtr<unreal.FGuid>;
  /**
    
    World space offset to apply before capturing.
    
  **/
  
  @:uproperty
  public var CaptureOffset(get,set):unreal.PPtr<unreal.FVector>;
  /**
    
    M values for RGBM, it will dynamically be generated by taking the highest RGB value into account. Explictly modifying it will require a Reflection Re-Capture.
    
  **/
  
  @:uproperty
  public var MaxValueRGBM(get,set):cpp.Float32;
  /**
    
    Indicates if we want to manually modify the MaxRGBM value.
    
  **/
  
  @:uproperty
  public var bModifyMaxValueRGBM(get,set):Bool;
  /**
    
    A brightness control to scale the captured scene's reflection intensity.
    
  **/
  
  @:uproperty
  public var Brightness(get,set):cpp.Float32;
  /**
    
    Angle to rotate the source cubemap when SourceType is set to SLS_SpecifiedCubemap.
    
  **/
  
  @:uproperty
  public var SourceCubemapAngle(get,set):cpp.Float32;
  /**
    
    Cubemap to use for reflection if ReflectionSourceType is set to RS_SpecifiedCubemap.
    
  **/
  
  @:uproperty
  public var Cubemap(get,set):unreal.UTextureCube;
  /**
    
    Indicates if the Reflection will be compressed for mobile. If set to default it will take the project wide setting.
    
  **/
  
  @:uproperty
  public var MobileReflectionCompression(get,set):unreal.EMobileReflectionCompression;
  /**
    
    Indicates where to get the reflection source from.
    
  **/
  
  @:uproperty
  public var ReflectionSourceType(get,set):unreal.EReflectionSourceType;
  @:uproperty
  public var CaptureOffsetComponent(get,set):unreal.UBillboardComponent;
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.UReflectionCaptureComponent_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("ReflectionCaptureComponent", "unreal.UReflectionCaptureComponent");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.UReflectionCaptureComponent(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.UReflectionCaptureComponent {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_MapBuildDataId(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UReflectionCaptureComponent_Glue_obj::get_MapBuildDataId(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UReflectionCaptureComponent *) self )->MapBuildDataId)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_MapBuildDataId() : unreal.PPtr<unreal.FGuid> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_MapBuildDataId");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "MapBuildDataId");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FGuid.fromPointer( uhx.glues.UReflectionCaptureComponent_Glue.get_MapBuildDataId(uhx_arg_0) ) : unreal.PPtr<unreal.FGuid> );
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_MapBuildDataId(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_MapBuildDataId(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UReflectionCaptureComponent *) self )->MapBuildDataId = *::uhx::StructHelper< FGuid >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_MapBuildDataId(value : unreal.FGuid) : unreal.FGuid {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_MapBuildDataId");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "MapBuildDataId", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_MapBuildDataId(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_CaptureOffset(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UReflectionCaptureComponent_Glue_obj::get_CaptureOffset(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UReflectionCaptureComponent *) self )->CaptureOffset)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CaptureOffset() : unreal.PPtr<unreal.FVector> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CaptureOffset");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CaptureOffset");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FVector.fromPointer( uhx.glues.UReflectionCaptureComponent_Glue.get_CaptureOffset(uhx_arg_0) ) : unreal.PPtr<unreal.FVector> );
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_CaptureOffset(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_CaptureOffset(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UReflectionCaptureComponent *) self )->CaptureOffset = *::uhx::StructHelper< FVector >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CaptureOffset(value : unreal.FVector) : unreal.FVector {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CaptureOffset");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CaptureOffset", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_CaptureOffset(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_MaxValueRGBM(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::UReflectionCaptureComponent_Glue_obj::get_MaxValueRGBM(unreal::UIntPtr self) {\n\treturn ( (UReflectionCaptureComponent *) self )->MaxValueRGBM;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_MaxValueRGBM() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_MaxValueRGBM");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "MaxValueRGBM");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UReflectionCaptureComponent_Glue.get_MaxValueRGBM(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_MaxValueRGBM(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_MaxValueRGBM(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (UReflectionCaptureComponent *) self )->MaxValueRGBM = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_MaxValueRGBM(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_MaxValueRGBM");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "MaxValueRGBM", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_MaxValueRGBM(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bModifyMaxValueRGBM(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::UReflectionCaptureComponent_Glue_obj::get_bModifyMaxValueRGBM(unreal::UIntPtr self) {\n\treturn ( (UReflectionCaptureComponent *) self )->bModifyMaxValueRGBM;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bModifyMaxValueRGBM() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bModifyMaxValueRGBM");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bModifyMaxValueRGBM");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UReflectionCaptureComponent_Glue.get_bModifyMaxValueRGBM(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bModifyMaxValueRGBM(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_bModifyMaxValueRGBM(unreal::UIntPtr self, bool value) {\n\t( (UReflectionCaptureComponent *) self )->bModifyMaxValueRGBM = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bModifyMaxValueRGBM(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bModifyMaxValueRGBM");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bModifyMaxValueRGBM", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_bModifyMaxValueRGBM(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_Brightness(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::UReflectionCaptureComponent_Glue_obj::get_Brightness(unreal::UIntPtr self) {\n\treturn ( (UReflectionCaptureComponent *) self )->Brightness;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Brightness() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Brightness");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Brightness");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UReflectionCaptureComponent_Glue.get_Brightness(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_Brightness(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_Brightness(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (UReflectionCaptureComponent *) self )->Brightness = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Brightness(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Brightness");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Brightness", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_Brightness(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_SourceCubemapAngle(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::UReflectionCaptureComponent_Glue_obj::get_SourceCubemapAngle(unreal::UIntPtr self) {\n\treturn ( (UReflectionCaptureComponent *) self )->SourceCubemapAngle;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_SourceCubemapAngle() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_SourceCubemapAngle");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "SourceCubemapAngle");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UReflectionCaptureComponent_Glue.get_SourceCubemapAngle(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_SourceCubemapAngle(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_SourceCubemapAngle(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (UReflectionCaptureComponent *) self )->SourceCubemapAngle = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_SourceCubemapAngle(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_SourceCubemapAngle");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "SourceCubemapAngle", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.UReflectionCaptureComponent_Glue.set_SourceCubemapAngle(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Engine/TextureCube.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_Cubemap(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UReflectionCaptureComponent_Glue_obj::get_Cubemap(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UTextureCube * >( ( (UReflectionCaptureComponent *) self )->Cubemap )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Cubemap() : unreal.UTextureCube {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Cubemap");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Cubemap");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.UReflectionCaptureComponent_Glue.get_Cubemap(uhx_arg_0)) : unreal.UTextureCube );
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Engine/TextureCube.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_Cubemap(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_Cubemap(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (UReflectionCaptureComponent *) self )->Cubemap = ( (UTextureCube *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Cubemap(value : unreal.UTextureCube) : unreal.UTextureCube {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Cubemap");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Cubemap", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.UReflectionCaptureComponent_Glue.set_Cubemap(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Classes/Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_MobileReflectionCompression(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::UReflectionCaptureComponent_Glue_obj::get_MobileReflectionCompression(unreal::UIntPtr self) {\n\treturn ( (int) (EMobileReflectionCompression) ( (UReflectionCaptureComponent *) self )->MobileReflectionCompression );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_MobileReflectionCompression() : unreal.EMobileReflectionCompression {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_MobileReflectionCompression");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "MobileReflectionCompression");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return unreal.EMobileReflectionCompression.EMobileReflectionCompression_EnumConv.wrap(uhx.glues.UReflectionCaptureComponent_Glue.get_MobileReflectionCompression(uhx_arg_0));
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Classes/Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_MobileReflectionCompression(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_MobileReflectionCompression(unreal::UIntPtr self, int value) {\n\t( (UReflectionCaptureComponent *) self )->MobileReflectionCompression = ( (EMobileReflectionCompression) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_MobileReflectionCompression(value : unreal.EMobileReflectionCompression) : unreal.EMobileReflectionCompression {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_MobileReflectionCompression");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "MobileReflectionCompression", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = unreal.EMobileReflectionCompression.EMobileReflectionCompression_EnumConv.unwrap(value);
    uhx.glues.UReflectionCaptureComponent_Glue.set_MobileReflectionCompression(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Classes/Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_ReflectionSourceType(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::UReflectionCaptureComponent_Glue_obj::get_ReflectionSourceType(unreal::UIntPtr self) {\n\treturn ( (int) (EReflectionSourceType) ( (UReflectionCaptureComponent *) self )->ReflectionSourceType );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ReflectionSourceType() : unreal.EReflectionSourceType {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ReflectionSourceType");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ReflectionSourceType");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return unreal.EReflectionSourceType.EReflectionSourceType_EnumConv.wrap(uhx.glues.UReflectionCaptureComponent_Glue.get_ReflectionSourceType(uhx_arg_0));
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Classes/Components/ReflectionCaptureComponent.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_ReflectionSourceType(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_ReflectionSourceType(unreal::UIntPtr self, int value) {\n\t( (UReflectionCaptureComponent *) self )->ReflectionSourceType = ( (EReflectionSourceType) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ReflectionSourceType(value : unreal.EReflectionSourceType) : unreal.EReflectionSourceType {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ReflectionSourceType");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ReflectionSourceType", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = unreal.EReflectionSourceType.EReflectionSourceType_EnumConv.unwrap(value);
    uhx.glues.UReflectionCaptureComponent_Glue.set_ReflectionSourceType(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Components/BillboardComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_CaptureOffsetComponent(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UReflectionCaptureComponent_Glue_obj::get_CaptureOffsetComponent(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UBillboardComponent * >( ( (UReflectionCaptureComponent *) self )->CaptureOffsetComponent )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CaptureOffsetComponent() : unreal.UBillboardComponent {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CaptureOffsetComponent");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CaptureOffsetComponent");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.UReflectionCaptureComponent_Glue.get_CaptureOffsetComponent(uhx_arg_0)) : unreal.UBillboardComponent );
    
    #end
    
  }
  @:glueCppIncludes("Components/ReflectionCaptureComponent.h", "Components/BillboardComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_CaptureOffsetComponent(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::UReflectionCaptureComponent_Glue_obj::set_CaptureOffsetComponent(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (UReflectionCaptureComponent *) self )->CaptureOffsetComponent = ( (UBillboardComponent *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CaptureOffsetComponent(value : unreal.UBillboardComponent) : unreal.UBillboardComponent {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CaptureOffsetComponent");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CaptureOffsetComponent", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.UReflectionCaptureComponent_Glue.set_CaptureOffsetComponent(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UReflectionCaptureComponent_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (UReflectionCaptureComponent::StaticClass()) );\n}")
  @:ifFeature("unreal.UReflectionCaptureComponent.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("ReflectionCaptureComponent");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.UReflectionCaptureComponent_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
