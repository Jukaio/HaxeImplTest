/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.livelinksequencer;

/**
  WARNING: This type was not defined as DLL export on its declaration. Because of that, some of its methods are inaccessible
  
  A recording source that records LiveLink
**/
@:umodule("LiveLinkSequencer")
@:glueCppIncludes("Private/TakeRecorderSource/TakeRecorderLiveLinkSource.h")
@:noClass @:uextern @:uclass extern class UTakeRecorderLiveLinkSource extends unreal.takescore.UTakeRecorderSource {
  
  /**
    The master track recorder we created.
  **/
  @:uproperty public var TrackRecorder : unreal.livelinksequencer.UMovieSceneLiveLinkTrackRecorder;
  
  /**
    If true discard livelink samples with timecode that occurs before the start of recording
  **/
  @:uproperty public var bDiscardSamplesBeforeStart : Bool;
  
  /**
    If true we use timecode even if not synchronized, else we use world time
  **/
  @:uproperty public var bUseSourceTimecode : Bool;
  
  /**
    Whether we should save subject settings in the the live link section. If not, we'll create one with subject information with no settings
  **/
  @:uproperty public var bSaveSubjectSettings : Bool;
  
  /**
    Name of the subject to record
  **/
  @:uproperty public var SubjectName : unreal.FName;
  
  /**
    Whether to perform key-reduction algorithms as part of the recording
  **/
  @:uproperty public var bReduceKeys : Bool;
  
}
