/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.geometrycollectionengine;

/**
  UGeometryCollectionObject (UObject)
  
  UObject wrapper for the FGeometryCollection
**/
@:umodule("GeometryCollectionEngine")
@:glueCppIncludes("GeometryCollection/GeometryCollectionObject.h")
@:uextern @:uclass extern class UGeometryCollection extends unreal.UObject {
  #if WITH_EDITORONLY_DATA
  
  /**
    Information for thumbnail rendering
  **/
  @:uproperty public var ThumbnailInfo : unreal.UThumbnailInfo;
  #end // WITH_EDITORONLY_DATA
  
  /**
    Materials relating to remove on fracture
  **/
  @:uproperty public var RemoveOnFractureMaterials : unreal.TArray<unreal.UMaterialInterface>;
  
  /**
    Enable remove pieces on fracture
  **/
  @:uproperty public var EnableRemovePiecesOnFracture : Bool;
  @:uproperty public var SizeSpecificData : unreal.TArray<unreal.geometrycollectionengine.FGeometryCollectionSizeSpecificData>;
  
  /**
    Max number of particles.
  **/
  @:uproperty public var MaximumCollisionParticles : unreal.Int32;
  
  /**
    Number of particles on the triangulated surface to use for collisions.
  **/
  @:uproperty public var CollisionParticlesFraction : unreal.Float32;
  
  /**
    Smallest allowable mass (def:0.1)
  **/
  @:uproperty public var MinimumMassClamp : unreal.Float32;
  
  /**
    Total Mass of Collection. If density, units are in kg/m^3
  **/
  @:uproperty public var Mass : unreal.Float32;
  
  /**
    Mass As Density, units are in kg/m^3
  **/
  @:uproperty public var bMassAsDensity : Bool;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 10)
  **/
  @:uproperty public var CollisionObjectReductionPercentage : unreal.Float32;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 10)
  **/
  @:uproperty public var MaxClusterLevelSetResolution : unreal.Int32;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 5)
  **/
  @:uproperty public var MinClusterLevelSetResolution : unreal.Int32;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 10)
  **/
  @:uproperty public var MaxLevelSetResolution : unreal.Int32;
  
  /**
    *  Resolution on the smallest axes for the level set. (def: 5)
  **/
  @:uproperty public var MinLevelSetResolution : unreal.Int32;
  
  /**
    *  CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var ImplicitType : unreal.chaos.EImplicitTypeEnum;
  
  /**
    *  CollisionType defines how to initialize the rigid collision structures.
  **/
  @:uproperty public var CollisionType : unreal.chaos.ECollisionTypeEnum;
  @:uproperty public var Materials : unreal.TArray<unreal.UMaterialInterface>;
  @:uproperty public var GeometrySource : unreal.TArray<unreal.geometrycollectionengine.FGeometryCollectionSource>;
  @:uproperty public var ClusterConnectionType : unreal.chaossolverengine.EClusterConnectionTypeEnum;
  
  /**
    Damage threshold for clusters at different levels.
  **/
  @:uproperty public var DamageThreshold : unreal.TArray<unreal.Float32>;
  
  /**
    Maximum level for cluster breaks.
  **/
  @:uproperty public var MaxClusterLevel : unreal.Int32;
  
  /**
    Maximum level for cluster breaks.
  **/
  @:uproperty public var ClusterGroupIndex : unreal.Int32;
  @:uproperty public var EnableClustering : Bool;
  
}
