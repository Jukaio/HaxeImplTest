/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal;

/**
  Container for properties of a physics constraint that can be easily swapped at runtime. This is useful for switching different setups when going from ragdoll to standup for example
**/
@:glueCppIncludes("Classes/PhysicsEngine/ConstraintInstance.h")
@:uextern @:ustruct extern class FConstraintProfileProperties {
  
  /**
    Whether it is possible to reset spring rest length from the linear deformation.
  **/
  @:uproperty public var bLinearPlasticity : Bool;
  
  /**
    Whether it is possible to break the joint with linear force.
  **/
  @:uproperty public var bLinearBreakable : Bool;
  
  /**
    Whether it is possible to reset target rotations from the angular displacement.
  **/
  @:uproperty public var bAngularPlasticity : Bool;
  
  /**
    Whether it is possible to break the joint with angular force.
  **/
  @:uproperty public var bAngularBreakable : Bool;
  
  /**
    [Chaos Only] Apply projection to constraints with soft limits. This can be used to stiffen up soft joints at low iteration counts, but the projection will
    override a lot of the spring-damper behaviour of the soft limits. E.g., if you have soft projection enabled and ProjectionAngularAlpha = 1.0,
    the joint will act as if it is a hard limit.
  **/
  @:uproperty public var bEnableSoftProjection : Bool;
  
  /**
    [PhysX] If distance error between bodies exceeds 0.1 units, or rotation error exceeds 10 degrees, body will be projected to fix this.
    For example a chain spinning too fast will have its elements appear detached due to velocity, this will project all bodies so they still appear attached to each other.
    
    [Chaos] Chaos applies a post-solve position and angular fixup where the parent body in the constraint is treated as having infinite mass and the child body is
    translated and rotated to resolve any remaining errors. This can be used to make constraint chains significantly stiffer at lower iteration counts. Increasing
    iterations would have the same effect, but be much more expensive. Projection only works well if the chain is not interacting with other objects (e.g.,
    through collisions) because the projection of the bodies in the chain will cause other constraints to be violated. Likewise, if a body is influenced by multiple
    constraints, then enabling projection on more than one constraint may lead to unexpected results - the "last" constraint would win but the order in which constraints
    are solved cannot be directly controlled.
    
    Note: projection will not be applied to constraints with soft limits.
  **/
  @:uproperty public var bEnableProjection : Bool;
  
  /**
    When set, the parent body in a constraint will not be affected by the motion of the child
  **/
  @:uproperty public var bParentDominates : Bool;
  
  /**
    Disable collision between bodies joined by this constraint.
  **/
  @:uproperty public var bDisableCollision : Bool;
  @:uproperty public var AngularDrive : unreal.FAngularDriveConstraint;
  @:uproperty public var LinearDrive : unreal.FLinearDriveConstraint;
  @:uproperty public var TwistLimit : unreal.FTwistConstraint;
  @:uproperty public var ConeLimit : unreal.FConeConstraint;
  @:uproperty public var LinearLimit : unreal.FLinearConstraint;
  
  /**
    Degree threshold from target angle needed to reset the target angle.
  **/
  @:uproperty public var AngularPlasticityThreshold : unreal.Float32;
  
  /**
    Torque needed to break the joint.
  **/
  @:uproperty public var AngularBreakThreshold : unreal.Float32;
  
  /**
    Percent threshold from target position needed to reset the spring rest length.
  **/
  @:uproperty public var LinearPlasticityThreshold : unreal.Float32;
  
  /**
    Force needed to break the distance constraint.
  **/
  @:uproperty public var LinearBreakThreshold : unreal.Float32;
  
  /**
    [Chaos Only] How much angular projection to apply [0-1]. Projection fixes any post-solve angle error in the constraint.
  **/
  @:uproperty public var ProjectionAngularAlpha : unreal.Float32;
  
  /**
    [Chaos Only] How much linear projection to apply [0-1]. Projection fixes any post-solve position error in the constraint.
  **/
  @:uproperty public var ProjectionLinearAlpha : unreal.Float32;
  
  /**
    [PhysX only] Angular tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.
  **/
  @:uproperty public var ProjectionAngularTolerance : unreal.Float32;
  
  /**
    [PhysX only] Linear tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.
  **/
  @:uproperty public var ProjectionLinearTolerance : unreal.Float32;
  
}
