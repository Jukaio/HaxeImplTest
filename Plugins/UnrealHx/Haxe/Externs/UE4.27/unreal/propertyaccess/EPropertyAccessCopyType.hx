/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.propertyaccess;

@:umodule("PropertyAccess")
@:glueCppIncludes("Public/PropertyAccess.h")
@:uname("EPropertyAccessCopyType")
@:class @:uextern @:uenum extern enum EPropertyAccessCopyType {
  
  /**
    No copying
  **/
  None;
  
  /**
    For plain old data types, we do a simple memcpy.
  **/
  Plain;
  
  /**
    For more complex data types, we need to call the properties copy function
  **/
  Complex;
  
  /**
    Read and write properties using bool property helpers, as source/dest could be bitfield or boolean
  **/
  Bool;
  
  /**
    Use struct copy operation, as this needs to correctly handle CPP struct ops
  **/
  Struct;
  
  /**
    Read and write properties using object property helpers, as source/dest could be regular/weak/soft etc.
  **/
  Object;
  
  /**
    FName needs special case because its size changes between editor/compiler and runtime.
  **/
  Name;
  
  /**
    Array needs special handling for fixed size arrays
  **/
  Array;
  
  /**
    Promote the type during the copy
    Bool promotions
  **/
  PromoteBoolToByte;
  PromoteBoolToInt32;
  PromoteBoolToInt64;
  PromoteBoolToFloat;
  
  /**
    Byte promotions
  **/
  PromoteByteToInt32;
  PromoteByteToInt64;
  PromoteByteToFloat;
  
  /**
    Int32 promotions
  **/
  PromoteInt32ToInt64;
  PromoteInt32ToFloat;
  
}
