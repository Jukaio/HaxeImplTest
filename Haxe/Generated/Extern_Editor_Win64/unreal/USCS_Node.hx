// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/uscs_node.hx
package unreal;
/**
  
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  
  
**/

@:umodule("Unreal")
@:glueCppIncludes("Engine/SCS_Node.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.USCS_Node_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.USCS_Node")) #end
class USCS_Node #if !macro extends unreal.UObject #end {
  #if !macro 
  /**
    
    (DEPRECATED) If true, the variable name was a autogenerated and is not presented to the user
    
  **/
  
  @:deprecated
  @:uproperty
  public var bVariableNameAutoGenerated_DEPRECATED(get,set):Bool;
  /**
    
    (DEPRECATED) If this is a native component, this is the name of the UActorComponent
    
  **/
  
  @:deprecated
  @:uproperty
  public var NativeComponentName_DEPRECATED(get,set):unreal.PPtr<unreal.PPtr<unreal.FName>>;
  /**
    
    (DEPRECATED) Indicates if this is a native component or not
    
  **/
  
  @:deprecated
  @:uproperty
  public var bIsNative_DEPRECATED(get,set):Bool;
  @:uproperty
  public var VariableGuid(get,set):unreal.PPtr<unreal.FGuid>;
  /**
    
    Metadata information for this Node
    
  **/
  
  @:uproperty
  public var MetaDataArray(get,set):unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.FBPVariableMetaDataEntry>>>;
  /**
    
    Set of child nodes
    
  **/
  
  @:uproperty
  public var ChildNodes(get,set):unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.USCS_Node>>>;
  /**
    
    If the node is parented, this indicates whether or not the template is found in the CDO's Components array
    
  **/
  
  @:uproperty
  public var bIsParentComponentNative(get,set):Bool;
  /**
    
    If the node is attached to another node inherited from a parent Blueprint, this contains the name of the Blueprint parent class that owns the component template //@TODO: We can potentially remove this if/when inherited SCS component template instances are included in subobject serialization, as we could then infer that the owner class is always the same as the BP class.
    
  **/
  
  @:uproperty
  public var ParentComponentOwnerClassName(get,set):unreal.PPtr<unreal.PPtr<unreal.FName>>;
  /**
    
    Component template or variable that Node might be parented to
    
  **/
  
  @:uproperty
  public var ParentComponentOrVariableName(get,set):unreal.PPtr<unreal.PPtr<unreal.FName>>;
  /**
    
    Socket/Bone that Node might attach to
    
  **/
  
  @:uproperty
  public var AttachToName(get,set):unreal.PPtr<unreal.PPtr<unreal.FName>>;
  /**
    
    If non-None, the assigned category name
    
  **/
  
  @:uproperty
  public var CategoryName(get,set):unreal.PPtr<unreal.PPtr<unreal.FText>>;
  /**
    
    Cached data for faster runtime instancing (only used in cooked builds)
    
  **/
  
  @:uproperty
  public var CookedComponentInstancingData(get,set):unreal.PPtr<unreal.FBlueprintCookedComponentInstancingData>;
  /**
    
    Template for the component to create
    
  **/
  
  @:uproperty
  public var ComponentTemplate(get,set):unreal.UActorComponent;
  /**
    
    Component class
    
  **/
  
  @:uproperty
  public var ComponentClass(get,set):unreal.UClass;
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.USCS_Node_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("SCS_Node", "unreal.USCS_Node");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.USCS_Node(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.USCS_Node {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bVariableNameAutoGenerated_DEPRECATED(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::USCS_Node_Glue_obj::get_bVariableNameAutoGenerated_DEPRECATED(unreal::UIntPtr self) {\n\treturn ( (USCS_Node *) self )->bVariableNameAutoGenerated_DEPRECATED;\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bVariableNameAutoGenerated_DEPRECATED() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bVariableNameAutoGenerated_DEPRECATED");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bVariableNameAutoGenerated_DEPRECATED");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.USCS_Node_Glue.get_bVariableNameAutoGenerated_DEPRECATED(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bVariableNameAutoGenerated_DEPRECATED(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_bVariableNameAutoGenerated_DEPRECATED(unreal::UIntPtr self, bool value) {\n\t( (USCS_Node *) self )->bVariableNameAutoGenerated_DEPRECATED = value;\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bVariableNameAutoGenerated_DEPRECATED(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bVariableNameAutoGenerated_DEPRECATED");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bVariableNameAutoGenerated_DEPRECATED", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.USCS_Node_Glue.set_bVariableNameAutoGenerated_DEPRECATED(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_NativeComponentName_DEPRECATED(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_NativeComponentName_DEPRECATED(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->NativeComponentName_DEPRECATED)) );\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_NativeComponentName_DEPRECATED() : unreal.PPtr<unreal.PPtr<unreal.FName>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_NativeComponentName_DEPRECATED");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "NativeComponentName_DEPRECATED");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FNameImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_NativeComponentName_DEPRECATED(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FName>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_NativeComponentName_DEPRECATED(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_NativeComponentName_DEPRECATED(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->NativeComponentName_DEPRECATED = *::uhx::StructHelper< FName >::getPointer(value);\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_NativeComponentName_DEPRECATED(value : unreal.FName) : unreal.FName {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_NativeComponentName_DEPRECATED");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "NativeComponentName_DEPRECATED", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_NativeComponentName_DEPRECATED(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bIsNative_DEPRECATED(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::USCS_Node_Glue_obj::get_bIsNative_DEPRECATED(unreal::UIntPtr self) {\n\treturn ( (USCS_Node *) self )->bIsNative_DEPRECATED;\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bIsNative_DEPRECATED() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bIsNative_DEPRECATED");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bIsNative_DEPRECATED");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.USCS_Node_Glue.get_bIsNative_DEPRECATED(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bIsNative_DEPRECATED(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_bIsNative_DEPRECATED(unreal::UIntPtr self, bool value) {\n\t( (USCS_Node *) self )->bIsNative_DEPRECATED = value;\n}")
  @:deprecated
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bIsNative_DEPRECATED(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bIsNative_DEPRECATED");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bIsNative_DEPRECATED", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.USCS_Node_Glue.set_bIsNative_DEPRECATED(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_VariableGuid(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_VariableGuid(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->VariableGuid)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_VariableGuid() : unreal.PPtr<unreal.FGuid> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_VariableGuid");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "VariableGuid");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FGuid.fromPointer( uhx.glues.USCS_Node_Glue.get_VariableGuid(uhx_arg_0) ) : unreal.PPtr<unreal.FGuid> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Public/UObject/NoExportTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_VariableGuid(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_VariableGuid(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->VariableGuid = *::uhx::StructHelper< FGuid >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_VariableGuid(value : unreal.FGuid) : unreal.FGuid {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_VariableGuid");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "VariableGuid", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_VariableGuid(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Containers/Array.h", "Classes/Engine/Blueprint.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_MetaDataArray(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_MetaDataArray(unreal::UIntPtr self) {\n\treturn ::uhx::TemplateHelper<TArray<FBPVariableMetaDataEntry>>::fromPointer( (&(( (USCS_Node *) self )->MetaDataArray)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_MetaDataArray() : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.FBPVariableMetaDataEntry>>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_MetaDataArray");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "MetaDataArray");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.TArrayImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_MetaDataArray(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.FBPVariableMetaDataEntry>>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Containers/Array.h", "Classes/Engine/Blueprint.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_MetaDataArray(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_MetaDataArray(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->MetaDataArray = *::uhx::TemplateHelper< TArray<FBPVariableMetaDataEntry> >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_MetaDataArray(value : unreal.TArray<unreal.FBPVariableMetaDataEntry>) : unreal.TArray<unreal.FBPVariableMetaDataEntry> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_MetaDataArray");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "MetaDataArray", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_MetaDataArray(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Containers/Array.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_ChildNodes(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_ChildNodes(unreal::UIntPtr self) {\n\treturn ::uhx::TemplateHelper<TArray<USCS_Node *>>::fromPointer( (&(( (USCS_Node *) self )->ChildNodes)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ChildNodes() : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.USCS_Node>>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ChildNodes");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ChildNodes");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.TArrayImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_ChildNodes(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.TArray<unreal.USCS_Node>>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Containers/Array.h", "uhx/glues/TArrayImpl_Glue_UE.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_ChildNodes(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_ChildNodes(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->ChildNodes = *::uhx::TemplateHelper< TArray<USCS_Node *> >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ChildNodes(value : unreal.TArray<unreal.USCS_Node>) : unreal.TArray<unreal.USCS_Node> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ChildNodes");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ChildNodes", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_ChildNodes(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static bool get_bIsParentComponentNative(unreal::UIntPtr self);")
  @:glueCppCode("bool uhx::glues::USCS_Node_Glue_obj::get_bIsParentComponentNative(unreal::UIntPtr self) {\n\treturn ( (USCS_Node *) self )->bIsParentComponentNative;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_bIsParentComponentNative() : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_bIsParentComponentNative");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "bIsParentComponentNative");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.USCS_Node_Glue.get_bIsParentComponentNative(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_bIsParentComponentNative(unreal::UIntPtr self, bool value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_bIsParentComponentNative(unreal::UIntPtr self, bool value) {\n\t( (USCS_Node *) self )->bIsParentComponentNative = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_bIsParentComponentNative(value : Bool) : Bool {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_bIsParentComponentNative");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "bIsParentComponentNative", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Bool = value;
    uhx.glues.USCS_Node_Glue.set_bIsParentComponentNative(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_ParentComponentOwnerClassName(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_ParentComponentOwnerClassName(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->ParentComponentOwnerClassName)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ParentComponentOwnerClassName() : unreal.PPtr<unreal.PPtr<unreal.FName>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ParentComponentOwnerClassName");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ParentComponentOwnerClassName");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FNameImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_ParentComponentOwnerClassName(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FName>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_ParentComponentOwnerClassName(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_ParentComponentOwnerClassName(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->ParentComponentOwnerClassName = *::uhx::StructHelper< FName >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ParentComponentOwnerClassName(value : unreal.FName) : unreal.FName {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ParentComponentOwnerClassName");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ParentComponentOwnerClassName", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_ParentComponentOwnerClassName(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_ParentComponentOrVariableName(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_ParentComponentOrVariableName(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->ParentComponentOrVariableName)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ParentComponentOrVariableName() : unreal.PPtr<unreal.PPtr<unreal.FName>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ParentComponentOrVariableName");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ParentComponentOrVariableName");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FNameImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_ParentComponentOrVariableName(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FName>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_ParentComponentOrVariableName(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_ParentComponentOrVariableName(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->ParentComponentOrVariableName = *::uhx::StructHelper< FName >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ParentComponentOrVariableName(value : unreal.FName) : unreal.FName {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ParentComponentOrVariableName");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ParentComponentOrVariableName", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_ParentComponentOrVariableName(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_AttachToName(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_AttachToName(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->AttachToName)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_AttachToName() : unreal.PPtr<unreal.PPtr<unreal.FName>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_AttachToName");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "AttachToName");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FNameImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_AttachToName(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FName>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "UObject/NameTypes.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_AttachToName(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_AttachToName(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->AttachToName = *::uhx::StructHelper< FName >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_AttachToName(value : unreal.FName) : unreal.FName {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_AttachToName");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "AttachToName", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_AttachToName(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Internationalization/Text.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_CategoryName(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_CategoryName(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->CategoryName)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CategoryName() : unreal.PPtr<unreal.PPtr<unreal.FText>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CategoryName");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CategoryName");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FTextImpl.fromPointer( uhx.glues.USCS_Node_Glue.get_CategoryName(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FText>> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Internationalization/Text.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_CategoryName(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_CategoryName(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->CategoryName = *::uhx::StructHelper< FText >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CategoryName(value : unreal.FText) : unreal.FText {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CategoryName");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CategoryName", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_CategoryName(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Classes/Engine/BlueprintGeneratedClass.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_CookedComponentInstancingData(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::USCS_Node_Glue_obj::get_CookedComponentInstancingData(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (USCS_Node *) self )->CookedComponentInstancingData)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CookedComponentInstancingData() : unreal.PPtr<unreal.FBlueprintCookedComponentInstancingData> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CookedComponentInstancingData");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CookedComponentInstancingData");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FBlueprintCookedComponentInstancingData.fromPointer( uhx.glues.USCS_Node_Glue.get_CookedComponentInstancingData(uhx_arg_0) ) : unreal.PPtr<unreal.FBlueprintCookedComponentInstancingData> );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "uhx/Wrapper.h", "Classes/Engine/BlueprintGeneratedClass.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_CookedComponentInstancingData(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_CookedComponentInstancingData(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (USCS_Node *) self )->CookedComponentInstancingData = *::uhx::StructHelper< FBlueprintCookedComponentInstancingData >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CookedComponentInstancingData(value : unreal.FBlueprintCookedComponentInstancingData) : unreal.FBlueprintCookedComponentInstancingData {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CookedComponentInstancingData");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CookedComponentInstancingData", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.USCS_Node_Glue.set_CookedComponentInstancingData(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "Components/ActorComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_ComponentTemplate(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::USCS_Node_Glue_obj::get_ComponentTemplate(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UActorComponent * >( ( (USCS_Node *) self )->ComponentTemplate )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ComponentTemplate() : unreal.UActorComponent {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ComponentTemplate");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ComponentTemplate");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.USCS_Node_Glue.get_ComponentTemplate(uhx_arg_0)) : unreal.UActorComponent );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "Components/ActorComponent.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_ComponentTemplate(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_ComponentTemplate(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (USCS_Node *) self )->ComponentTemplate = ( (UActorComponent *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ComponentTemplate(value : unreal.UActorComponent) : unreal.UActorComponent {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ComponentTemplate");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ComponentTemplate", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.USCS_Node_Glue.set_ComponentTemplate(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr get_ComponentClass(unreal::UIntPtr self);")
  @:glueCppCode("unreal::UIntPtr uhx::glues::USCS_Node_Glue_obj::get_ComponentClass(unreal::UIntPtr self) {\n\treturn ( (unreal::UIntPtr) (const_cast< UClass * >( ( (USCS_Node *) self )->ComponentClass )) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_ComponentClass() : unreal.UClass {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_ComponentClass");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "ComponentClass");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( cast unreal.UObject.wrap(uhx.glues.USCS_Node_Glue.get_ComponentClass(uhx_arg_0)) : unreal.UClass );
    
    #end
    
  }
  @:glueCppIncludes("Engine/SCS_Node.h", "CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static void set_ComponentClass(unreal::UIntPtr self, unreal::UIntPtr value);")
  @:glueCppCode("void uhx::glues::USCS_Node_Glue_obj::set_ComponentClass(unreal::UIntPtr self, unreal::UIntPtr value) {\n\t( (USCS_Node *) self )->ComponentClass = ( (UClass *) value );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_ComponentClass(value : unreal.UClass) : unreal.UClass {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_ComponentClass");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "ComponentClass", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(value);
    uhx.glues.USCS_Node_Glue.set_ComponentClass(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::USCS_Node_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (USCS_Node::StaticClass()) );\n}")
  @:ifFeature("unreal.USCS_Node.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("SCS_Node");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.USCS_Node_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
