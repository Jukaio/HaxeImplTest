// Ver:1
// GeneratedBy:c:\users\jukai\documents\unreal projects\haxetest\plugins\unrealhx/haxe/externs/ue4.27/unreal/statsviewer/ushadercookerstats.hx
package unreal.statsviewer;
/**
  
  WARNING: This type was defined as MinimalAPI on its declaration. Because of that, its properties/methods are inaccessible
  
  Statistics page for shader cooker stats.
  
**/

@:umodule("StatsViewer")
@:glueCppIncludes("ShaderCookerStats.h")
@:uextern
@:uclass
@:ueGluePath("uhx.glues.UShaderCookerStats_Glue")
#if (cppia && !LIVE_RELOAD_BUILD && !macro) @:build(uhx.compiletime.types.CompiledMetaCheck.build("unreal.statsviewer.UShaderCookerStats")) #end
class UShaderCookerStats #if !macro extends unreal.UObject #end {
  #if !macro 
  /**
    
    Material path
    
  **/
  
  @:uproperty
  public var Path(get,set):unreal.PPtr<unreal.PPtr<unreal.FString>>;
  /**
    
    Cpu time spent compiling shaders not in DDC
    
  **/
  
  @:uproperty
  public var CompileTime(get,set):cpp.Float32;
  /**
    
    Number of material permutations generated by switch etc.
    
  **/
  
  @:uproperty
  public var Permutations(get,set):Int;
  /**
    
    Total number of shaders cooked
    
  **/
  
  @:uproperty
  public var Cooked(get,set):Int;
  /**
    
    Number of shaders that was actually compiled and not present in the DDC
    
  **/
  
  @:uproperty
  public var Compiled(get,set):Int;
  /**
    
    Material Category. Edit Engine/Config/ShaderConfiguration.csv & Engine/Config/ShaderConfiguration.csv to configure
    
  **/
  
  @:uproperty
  public var Category(get,set):unreal.PPtr<unreal.PPtr<unreal.FString>>;
  /**
    
    Material platform
    
  **/
  
  @:uproperty
  public var Platform(get,set):unreal.PPtr<unreal.PPtr<unreal.FString>>;
  /**
    
    Material name
    
  **/
  
  @:uproperty
  public var Name(get,set):unreal.PPtr<unreal.PPtr<unreal.FString>>;
  static function __init__():Void {
    #if !cppia
    var func = cpp.Function.fromStaticFunction(wrapPointer).toFunction();
    uhx.ue.ClassMap.addWrapper(uhx.glues.UShaderCookerStats_Glue.StaticClass(), func);
    #else
    uhx.runtime.Helpers.addCppiaExternWrapper("ShaderCookerStats", "unreal.statsviewer.UShaderCookerStats");
    #end
  }
  
  #if !cppia
  static function wrapPointer(uobject:unreal.UIntPtr):unreal.UIntPtr {
    return uhx.internal.HaxeHelpers.dynamicToPointer(new unreal.statsviewer.UShaderCookerStats(uobject));
  }
  #end
  inline public static function wrap(uobject:unreal.UIntPtr):unreal.statsviewer.UShaderCookerStats {
    return cast uhx.ClassWrap.wrap(uobject);
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_Path(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UShaderCookerStats_Glue_obj::get_Path(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UShaderCookerStats *) self )->Path)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Path() : unreal.PPtr<unreal.PPtr<unreal.FString>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Path");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Path");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FStringImpl.fromPointer( uhx.glues.UShaderCookerStats_Glue.get_Path(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FString>> );
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_Path(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Path(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UShaderCookerStats *) self )->Path = *::uhx::StructHelper< FString >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Path(value : unreal.FString) : unreal.FString {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Path");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Path", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UShaderCookerStats_Glue.set_Path(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static cpp::Float32 get_CompileTime(unreal::UIntPtr self);")
  @:glueCppCode("cpp::Float32 uhx::glues::UShaderCookerStats_Glue_obj::get_CompileTime(unreal::UIntPtr self) {\n\treturn ( (UShaderCookerStats *) self )->CompileTime;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_CompileTime() : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_CompileTime");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "CompileTime");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UShaderCookerStats_Glue.get_CompileTime(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_CompileTime(unreal::UIntPtr self, cpp::Float32 value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_CompileTime(unreal::UIntPtr self, cpp::Float32 value) {\n\t( (UShaderCookerStats *) self )->CompileTime = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_CompileTime(value : cpp.Float32) : cpp.Float32 {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_CompileTime");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "CompileTime", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:cpp.Float32 = value;
    uhx.glues.UShaderCookerStats_Glue.set_CompileTime(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_Permutations(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::UShaderCookerStats_Glue_obj::get_Permutations(unreal::UIntPtr self) {\n\treturn ( (UShaderCookerStats *) self )->Permutations;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Permutations() : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Permutations");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Permutations");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UShaderCookerStats_Glue.get_Permutations(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_Permutations(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Permutations(unreal::UIntPtr self, int value) {\n\t( (UShaderCookerStats *) self )->Permutations = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Permutations(value : Int) : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Permutations");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Permutations", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = value;
    uhx.glues.UShaderCookerStats_Glue.set_Permutations(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_Cooked(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::UShaderCookerStats_Glue_obj::get_Cooked(unreal::UIntPtr self) {\n\treturn ( (UShaderCookerStats *) self )->Cooked;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Cooked() : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Cooked");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Cooked");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UShaderCookerStats_Glue.get_Cooked(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_Cooked(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Cooked(unreal::UIntPtr self, int value) {\n\t( (UShaderCookerStats *) self )->Cooked = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Cooked(value : Int) : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Cooked");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Cooked", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = value;
    uhx.glues.UShaderCookerStats_Glue.set_Cooked(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static int get_Compiled(unreal::UIntPtr self);")
  @:glueCppCode("int uhx::glues::UShaderCookerStats_Glue_obj::get_Compiled(unreal::UIntPtr self) {\n\treturn ( (UShaderCookerStats *) self )->Compiled;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Compiled() : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Compiled");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Compiled");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return uhx.glues.UShaderCookerStats_Glue.get_Compiled(uhx_arg_0);
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h")
  @:glueHeaderIncludes("IntPtr.h", "<hxcpp.h>")
  @:glueHeaderCode("static void set_Compiled(unreal::UIntPtr self, int value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Compiled(unreal::UIntPtr self, int value) {\n\t( (UShaderCookerStats *) self )->Compiled = value;\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Compiled(value : Int) : Int {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Compiled");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Compiled", value);
    return value;
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:Int = value;
    uhx.glues.UShaderCookerStats_Glue.set_Compiled(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_Category(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UShaderCookerStats_Glue_obj::get_Category(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UShaderCookerStats *) self )->Category)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Category() : unreal.PPtr<unreal.PPtr<unreal.FString>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Category");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Category");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FStringImpl.fromPointer( uhx.glues.UShaderCookerStats_Glue.get_Category(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FString>> );
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_Category(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Category(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UShaderCookerStats *) self )->Category = *::uhx::StructHelper< FString >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Category(value : unreal.FString) : unreal.FString {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Category");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Category", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UShaderCookerStats_Glue.set_Category(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_Platform(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UShaderCookerStats_Glue_obj::get_Platform(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UShaderCookerStats *) self )->Platform)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Platform() : unreal.PPtr<unreal.PPtr<unreal.FString>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Platform");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Platform");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FStringImpl.fromPointer( uhx.glues.UShaderCookerStats_Glue.get_Platform(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FString>> );
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_Platform(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Platform(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UShaderCookerStats *) self )->Platform = *::uhx::StructHelper< FString >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Platform(value : unreal.FString) : unreal.FString {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Platform");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Platform", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UShaderCookerStats_Glue.set_Platform(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static unreal::VariantPtr get_Name(unreal::UIntPtr self);")
  @:glueCppCode("unreal::VariantPtr uhx::glues::UShaderCookerStats_Glue_obj::get_Name(unreal::UIntPtr self) {\n\treturn unreal::VariantPtr::fromExternalPointer( (void *) (&(( (UShaderCookerStats *) self )->Name)) );\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  private function get_Name() : unreal.PPtr<unreal.PPtr<unreal.FString>> {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "get_Name");
    #end
    #if cppia
    return unreal.ReflectAPI.bpGetField(this, "Name");
    
    #else
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    return ( @:privateAccess unreal.FStringImpl.fromPointer( uhx.glues.UShaderCookerStats_Glue.get_Name(uhx_arg_0) ) : unreal.PPtr<unreal.PPtr<unreal.FString>> );
    
    #end
    
  }
  @:glueCppIncludes("ShaderCookerStats.h", "uhx/Wrapper.h", "Containers/UnrealString.h")
  @:glueHeaderIncludes("IntPtr.h", "VariantPtr.h")
  @:glueHeaderCode("static void set_Name(unreal::UIntPtr self, unreal::VariantPtr value);")
  @:glueCppCode("void uhx::glues::UShaderCookerStats_Glue_obj::set_Name(unreal::UIntPtr self, unreal::VariantPtr value) {\n\t( (UShaderCookerStats *) self )->Name = *::uhx::StructHelper< FString >::getPointer(value);\n}")
  @:uproperty
  @:final @:nonVirtual 
  @:nonVirtual
  @:final @:nonVirtual 
  @:nonVirtual
  private function set_Name(value : unreal.FString) : unreal.FString {
    #if (debug || UHX_CHECK_POINTER)
    uhx.internal.HaxeHelpers.checkObjectPointer(this, "set_Name");
    #end
    #if cppia
    unreal.ReflectAPI.bpSetField(this, "Name", value);
    return value;
    
    #else
    if (value == null) uhx.internal.HaxeHelpers.nullDeref("value");
    var uhx_arg_0:unreal.UIntPtr = uhx.internal.HaxeHelpers.getUObjectWrapped(this);
    var uhx_arg_1:unreal.VariantPtr = value;
    uhx.glues.UShaderCookerStats_Glue.set_Name(uhx_arg_0, uhx_arg_1);
    return value;
    
    #end
    
  }
  /**
    
    Returns the `UClass` object which describes this class
    
  **/
  
  @:glueCppIncludes("CoreUObject.h")
  @:glueHeaderIncludes("IntPtr.h")
  @:glueHeaderCode("static unreal::UIntPtr StaticClass();")
  @:glueCppCode("unreal::UIntPtr uhx::glues::UShaderCookerStats_Glue_obj::StaticClass() {\n\treturn ( (unreal::UIntPtr) (UShaderCookerStats::StaticClass()) );\n}")
  @:ifFeature("unreal.statsviewer.UShaderCookerStats.*")
  public static function StaticClass() : unreal.UClass {
    #if cppia
    return uhx.runtime.UReflectionGenerator.getUClass("ShaderCookerStats");
    
    #else
    return ( cast unreal.UObject.wrap(uhx.glues.UShaderCookerStats_Glue.StaticClass()) : unreal.UClass );
    
    #end
    
  }
  #end
  
}
