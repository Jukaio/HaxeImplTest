/**
 * 
 * WARNING! This file was autogenerated by: 
 *  _   _ _   _ __   __ 
 * | | | | | | |\ \ / / 
 * | | | | |_| | \ V /  
 * | | | |  _  | /   \  
 * | |_| | | | |/ /^\ \ 
 *  \___/\_| |_/\/   \/ 
 * 
 * This file was autogenerated by UnrealHxGenerator using UHT definitions.
 * It only includes UPROPERTYs and UFUNCTIONs. Do not modify it!
 * In order to add more definitions, create or edit a type with the same name/package, but with an `_Extra` suffix
**/
package unreal.steamvrinputdevice;

/**
  * SteamVR Input Extended Functions
  * Functions and properties defined here are safe for developer use
**/
@:umodule("SteamVRInputDevice")
@:glueCppIncludes("SteamVRInputDeviceFunctionLibrary.h")
@:uextern @:uclass extern class USteamVRInputDeviceFunctionLibrary extends unreal.UBlueprintFunctionLibrary {
  
  /**
    Get the finger curl and splay for a give hand in the current frame
    @param Hand - Which hand to get the finger curls and splay values for
    @param FingerCurls - Curl values for each finger pair this frame
  **/
  @:ufunction(BlueprintCallable) static public function GetFingerCurlsAndSplays(Hand : unreal.steamvrinputdevice.EHand, FingerCurls : unreal.PRef<unreal.steamvrinputdevice.FSteamVRFingerCurls>, FingerSplays : unreal.PRef<unreal.steamvrinputdevice.FSteamVRFingerSplays>, @:opt("VR_SummaryType_FromAnimation") SummaryDataType : unreal.steamvrinputdevice.ESkeletalSummaryDataType) : Void;
  
  /**
    Generate haptic feedback in the requested controller
    @param Hand - Which hand to send the controller feedback to
    @param StartSecondsFromNow - When to start the haptic feedback
    @param DurationSeconds - How long to have the haptic feedback active
    @param Frequency - Frequency used in the haptic feedback
    @param Amplitude - Amplitude used in the haptic feedback
  **/
  @:ufunction(BlueprintCallable) static public function PlaySteamVR_HapticFeedback(Hand : unreal.steamvrinputdevice.ESteamVRHand, StartSecondsFromNow : unreal.Float32, DurationSeconds : unreal.Float32 = 1.000000, Frequency : unreal.Float32 = 1.000000, Amplitude : unreal.Float32 = 0.500000) : Void;
  
  /**
    Check Whether or not Curls and Splay values are being retrieved per frame from the SteamVR Input System
    @return LeftHandState - Whether or not curls and splay values are being retrieved from the left hand
    @return RightHandState -  Whether or not curls and splay values are being retrieved from the right hand
  **/
  @:ufunction(BlueprintCallable) static public function GetCurlsAndSplaysState(LeftHandState : Bool, RightHandState : Bool) : Void;
  
  /**
    Check Whether or not controllers attached to either hand have Skeletal Input support
    @return LeftHandState - Whether or not the controller attached to the player's left hand have skeletal input support
    @return RightHandState -  Whether or not the controller attached to the player's right hand have skeletal input support
  **/
  @:ufunction(BlueprintCallable) static public function GetSkeletalState(LeftHandState : Bool, RightHandState : Bool) : Void;
  
  /**
    Retrieve skeletal tracking level for all controllers
    @return LeftControllerFidelity - The skeletal tracking level of the left controller
    @return RightControllerFidelity -  The skeletal tracking level of the right controller
  **/
  @:ufunction(BlueprintCallable) static public function GetControllerFidelity(LeftControllerFidelity : unreal.Ref<unreal.steamvrinputdevice.EControllerFidelity>, RightControllerFidelity : unreal.Ref<unreal.steamvrinputdevice.EControllerFidelity>) : Void;
  
  /**
    Tell SteamVR Whether or not to retrieve Curls and Splay values per frame
    @param NewLeftHandState - Whether or not curls and splay values will be retrieved for the left hand
    @param NewRightHandState -  Whether or not curls and splay values will be retrieved for the right hand
  **/
  @:ufunction(BlueprintCallable) static public function SetCurlsAndSplaysState(NewLeftHandState : Bool, NewRightHandState : Bool) : Void;
  
  /**
    Check whether we are using a skeleton pose or the raw controller pose for the orientation and position of the motion controller
    @param bUseSkeletonPose - Whether or not we are using the skeleton pose instead of the controller raw pose
  **/
  @:ufunction(BlueprintCallable) static public function GetPoseSource(bUsingSkeletonPose : Bool) : Void;
  
  /**
    Set whether to use skeleton pose or the raw controller pose for the orientation and position of the motion controller
    @param bUseSkeletonPose - Whether or not to use the skeleton pose instead of the controller raw pose
  **/
  @:ufunction(BlueprintCallable) static public function SetPoseSource(bUseSkeletonPose : Bool) : Void;
  
  /**
    Retrieve the live skeletal input bone values from SteamVR
    @return LeftHand - Per bone transform values for the left hand skeleton
    @return RightHand - Per bone transform values for the right hand skeleton
    @param bWithController - Whether or not retrieve skeletal input values with controller
    @param bXAxisForward - Whether or not the Skeleton has the X axis facing forward
  **/
  @:ufunction(BlueprintCallable) static public function GetSkeletalTransform(LeftHand : unreal.PRef<unreal.steamvrinputdevice.FSteamVRSkeletonTransform>, RightHand : unreal.PRef<unreal.steamvrinputdevice.FSteamVRSkeletonTransform>, bWithController : Bool = false) : Void;
  
  /**
    Retrieve the left hand pose information - position, orientation and velocities
    @return Position - Translation from the pose data matrix in UE coordinates
    @return Orientation - Orientation derived from the pose data matrix in UE coordinates
    @return AngularVelocity - The angular velocity of the hand this frame
    @return Velocity - The velocity of the hand this frame
  **/
  @:ufunction(BlueprintCallable) static public function GetLeftHandPoseData(Position : unreal.PRef<unreal.FVector>, Orientation : unreal.PRef<unreal.FRotator>, AngularVelocity : unreal.PRef<unreal.FVector>, Velocity : unreal.PRef<unreal.FVector>) : Void;
  
  /**
    Retrieve the right hand pose information - position, orientation and velocities
    @return Position - Translation from the pose data matrix in UE coordinates
    @return Orientation - Orientation derived from the pose data matrix in UE coordinates
    @return AngularVelocity - The angular velocity of the hand this frame
    @return Velocity - The velocity of the hand this frame
  **/
  @:ufunction(BlueprintCallable) static public function GetRightHandPoseData(Position : unreal.PRef<unreal.FVector>, Orientation : unreal.PRef<unreal.FRotator>, AngularVelocity : unreal.PRef<unreal.FVector>, Velocity : unreal.PRef<unreal.FVector>) : Void;
  
  /**
    Retrieve the input actions for this project
    @return SteamVRActions - Input actions defined in this project
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_ActionArray(SteamVRActions : unreal.PRef<unreal.TArray<unreal.steamvrinputdevice.FSteamVRAction>>) : Void;
  
  /**
    Search for a valid action matching the given action name and action set
    @param ActionName - The name of the action to look for (e.g. TeleportLeft)
    @param ActionSet - The name of the action set that the action belongs to (e.g. main). Default is "main"
    @return bresult - The result of the search
    @return FoundAction - The action if found
    @return FoundActionSet - The action set if found
  **/
  @:ufunction(BlueprintCallable) static public function FindSteamVR_Action(ActionName : unreal.FName, bResult : Bool, FoundAction : unreal.PRef<unreal.steamvrinputdevice.FSteamVRAction>, FoundActionSet : unreal.PRef<unreal.steamvrinputdevice.FSteamVRActionSet>, @:opt("main") ActionSet : unreal.FName) : Void;
  
  /**
    Retrieve the input action sets for this project
    @return SteamVRActionSets - Input action sets defined in this project
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_ActionSetArray(SteamVRActionSets : unreal.PRef<unreal.TArray<unreal.steamvrinputdevice.FSteamVRActionSet>>) : Void;
  
  /**
    Returns information about the tracked device associated from the input source.
    @param SteamVRAction - The action that's the source of the input
    @return InputOriginInfo - The origin info of the action
    @return bool - whether the operation is successful or not
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_OriginTrackedDeviceInfo(SteamVRAction : unreal.steamvrinputdevice.FSteamVRAction, InputOriginInfo : unreal.PRef<unreal.steamvrinputdevice.FSteamVRInputOriginInfo>) : Bool;
  
  /**
    Find and return information about the tracked device associated from the input source.
    @param SteamVRAction - The action that's the source of the input
    @return InputOriginInfo - The origin info of the action
    @return bool - whether the operation is successful or not
  **/
  @:ufunction(BlueprintCallable) static public function FindSteamVR_OriginTrackedDeviceInfo(ActionName : unreal.FName, bResult : Bool, InputOriginInfo : unreal.PRef<unreal.steamvrinputdevice.FSteamVRInputOriginInfo>, @:opt("main") ActionSet : unreal.FName) : Void;
  
  /**
    Retrieve the localized name of the origin of a given action (e.g. "Left Hand Index Controller Trackpad")
    @param SteamVRAction - The action that we will lookup the last active origin for
    @param LocalizedParts - Bitfields to specify which origin parts to return
    @return OriginLocalizedName -  The localized name of the origin of a given action (e.g. "Left Hand Index Controller Trackpad")
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_OriginLocalizedName(SteamVRAction : unreal.steamvrinputdevice.FSteamVRAction, LocalizedParts : unreal.TArray<unreal.steamvrinputdevice.ESteamVRInputStringBits>, OriginLocalizedName : unreal.PRef<unreal.FString>) : Void;
  
  /**
    Show the current binding of a given action in the user's HMD
    @param SteamVRAction - The action that we will lookup the current binding for
    @param SteamVRActionSet - The action set that the action belongs to
  **/
  @:ufunction(BlueprintCallable) static public function ShowSteamVR_ActionOrigin(SteamVRAction : unreal.steamvrinputdevice.FSteamVRAction, SteamVRActionSet : unreal.steamvrinputdevice.FSteamVRActionSet) : Void;
  
  /**
    Search and show the current binding of a provided action name and action set in the user's HMD
    @param SteamVRAction - The action that we will lookup the current binding for
    @param SteamVRActionSet - The action set that the action belongs to. Defaults to "main"
  **/
  @:ufunction(BlueprintCallable) static public function FindSteamVR_ActionOrigin(ActionName : unreal.FName, @:opt("main") ActionSet : unreal.FName) : Bool;
  
  /**
    Returns the data for the hand transform at any point in time from current time, given a relative number of seconds
    @param Hand - The hand that we're going to retrieve the transform for
    @return Position - The position of the hand at the point in time, given a relative number of seconds, from the current time
    @return Orientation - The rotation of the hand at the point in time, given a relative number of seconds, from the current time
    @return bool - Whether or not the call was succesful
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_HandPoseRelativeToNow(Position : unreal.PRef<unreal.FVector>, Orientation : unreal.PRef<unreal.FRotator>, @:opt("VR_Left") Hand : unreal.steamvrinputdevice.ESteamVRHand, PredictedSecondsFromNow : unreal.Float32 = 0.000000) : Bool;
  
  /**
    Returns the the current value of the global PredictedSecondsFromNow use in any Get Pose Action Data calls (i.e. Getting controller transform)
    A value of -9999.f triggers a GetPoseActionDataForNextFrame, otherwise GetPoseActionRelativeToNow is called with this value
    @return float - The current Predicted Seconds From Now from the SteamVRInput device
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_GlobalPredictedSecondsFromNow() : unreal.Float32;
  
  /**
    Sets the the current value of the global PredictedSecondsFromNow to use in any Get Pose Action Data calls (i.e. Getting controller transform)
    A value of -9999.f will trigger a GetPoseActionDataForNextFrame, otherwise GetPoseActionRelativeToNow will be called with this value
    @param NewValue - The value for PredictedSecondsFromNow that will be used by the SteamVRInput device for Get Action Pose Data calls
    @return float - The current Predicted Seconds From Now from the SteamVRInput device
  **/
  @:ufunction(BlueprintCallable) static public function SetSteamVR_GlobalPredictedSecondsFromNow(NewValue : unreal.Float32) : unreal.Float32;
  
  /**
    Shows all current bindings for the current controller in the user's headset
  **/
  @:ufunction(BlueprintCallable) static public function ShowAllSteamVR_ActionOrigins() : Void;
  
  /**
    Retrieves useful information about the SteamVR input bindings for an action.
    @param SteamVRActionHandle - The action handle of the action that binding info will be retrieved for the currently active controller. Use Find SteamVRAction node to get a handle
    @return SteamVRInputBindingInfo - Array of binding info for an action with the currently active controller
  **/
  @:ufunction(BlueprintCallable) static public function GetSteamVR_InputBindingInfo(SteamVRActionHandle : unreal.steamvrinputdevice.FSteamVRAction) : unreal.TArray<unreal.steamvrinputdevice.FSteamVRInputBindingInfo>;
  
  /**
    Retrieves useful information about the SteamVR input bindings with a given action name and action set.
    @param ActionName - The name of the action that binding info will be retrieved for the currently active controller
    @param ActionSet - The name of the action set that the action belongs in
    @return SteamVRInputBindingInfo - Array of binding info for an action with the currently active controller
  **/
  @:ufunction(BlueprintCallable) static public function FindSteamVR_InputBindingInfo(ActionName : unreal.FName, @:opt("main") ActionSet : unreal.FName) : unreal.TArray<unreal.steamvrinputdevice.FSteamVRInputBindingInfo>;
  
  /**
    Sets the zero pose for the seated tracker coordinate system to the current position and yaw of the HMD.
    After this call, calls that pass TrackingUniverseSeated as the origin will be relative to this new zero pose.
    
    NOTE: This function overrides the user's previously saved seated zero pose and should only be called as the result of a user action.
    Users are also able to set their seated zero pose via the SteamVR Dashboard.
  **/
  @:ufunction(BlueprintCallable) static public function ResetSeatedPosition() : Bool;
  
  /**
    Returns the user's HMD's current IPD (interpupillary distance) setting in millimetres.
    @return float - The current IPD setting of the user's headset in millimetres
  **/
  @:ufunction(BlueprintCallable) static public function GetUserIPD() : unreal.Float32;
  
}
